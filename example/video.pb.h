// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#ifndef PROTOBUF_video_2eproto__INCLUDED
#define PROTOBUF_video_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace json {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_video_2eproto();
void protobuf_AssignDesc_video_2eproto();
void protobuf_ShutdownFile_video_2eproto();

class People;
class ParentInfo;
class ChildInfo;
class Topic;
class TagFeature;
class DetailedTag;
class Slide;
class PlayLocation;
class DisplayFields;
class Video;

enum Video_RatingType {
  Video_RatingType_GENERAL = 0,
  Video_RatingType_CHILD_PROTECTED = 1,
  Video_RatingType_PARENT_GUIDED = 2,
  Video_RatingType_MATURE = 3
};
bool Video_RatingType_IsValid(int value);
const Video_RatingType Video_RatingType_RatingType_MIN = Video_RatingType_GENERAL;
const Video_RatingType Video_RatingType_RatingType_MAX = Video_RatingType_MATURE;
const int Video_RatingType_RatingType_ARRAYSIZE = Video_RatingType_RatingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Video_RatingType_descriptor();
inline const ::std::string& Video_RatingType_Name(Video_RatingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Video_RatingType_descriptor(), value);
}
inline bool Video_RatingType_Parse(
    const ::std::string& name, Video_RatingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Video_RatingType>(
    Video_RatingType_descriptor(), name, value);
}
enum Video_DangerLevel {
  Video_DangerLevel_SAFE = 0,
  Video_DangerLevel_DANGEROUS_HIGH = 1,
  Video_DangerLevel_DANGEROUS_MIDDLE = 2,
  Video_DangerLevel_DANGEROUS_LOW = 3
};
bool Video_DangerLevel_IsValid(int value);
const Video_DangerLevel Video_DangerLevel_DangerLevel_MIN = Video_DangerLevel_SAFE;
const Video_DangerLevel Video_DangerLevel_DangerLevel_MAX = Video_DangerLevel_DANGEROUS_LOW;
const int Video_DangerLevel_DangerLevel_ARRAYSIZE = Video_DangerLevel_DangerLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* Video_DangerLevel_descriptor();
inline const ::std::string& Video_DangerLevel_Name(Video_DangerLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    Video_DangerLevel_descriptor(), value);
}
inline bool Video_DangerLevel_Parse(
    const ::std::string& name, Video_DangerLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Video_DangerLevel>(
    Video_DangerLevel_descriptor(), name, value);
}
enum Video_EditorRecommendLevel {
  Video_EditorRecommendLevel_NONE = 0,
  Video_EditorRecommendLevel_GENERAL_REC = 1,
  Video_EditorRecommendLevel_KEY = 2,
  Video_EditorRecommendLevel_STRONG = 3
};
bool Video_EditorRecommendLevel_IsValid(int value);
const Video_EditorRecommendLevel Video_EditorRecommendLevel_EditorRecommendLevel_MIN = Video_EditorRecommendLevel_NONE;
const Video_EditorRecommendLevel Video_EditorRecommendLevel_EditorRecommendLevel_MAX = Video_EditorRecommendLevel_STRONG;
const int Video_EditorRecommendLevel_EditorRecommendLevel_ARRAYSIZE = Video_EditorRecommendLevel_EditorRecommendLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* Video_EditorRecommendLevel_descriptor();
inline const ::std::string& Video_EditorRecommendLevel_Name(Video_EditorRecommendLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    Video_EditorRecommendLevel_descriptor(), value);
}
inline bool Video_EditorRecommendLevel_Parse(
    const ::std::string& name, Video_EditorRecommendLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Video_EditorRecommendLevel>(
    Video_EditorRecommendLevel_descriptor(), name, value);
}
enum Video_ContentType {
  Video_ContentType_FEATURE_FILM = 1,
  Video_ContentType_PREVUE = 2,
  Video_ContentType_TRAILER = 3,
  Video_ContentType_CLIP = 4,
  Video_ContentType_OTHER = 5
};
bool Video_ContentType_IsValid(int value);
const Video_ContentType Video_ContentType_ContentType_MIN = Video_ContentType_FEATURE_FILM;
const Video_ContentType Video_ContentType_ContentType_MAX = Video_ContentType_OTHER;
const int Video_ContentType_ContentType_ARRAYSIZE = Video_ContentType_ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Video_ContentType_descriptor();
inline const ::std::string& Video_ContentType_Name(Video_ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Video_ContentType_descriptor(), value);
}
inline bool Video_ContentType_Parse(
    const ::std::string& name, Video_ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Video_ContentType>(
    Video_ContentType_descriptor(), name, value);
}
enum Video_FeatureFilmType {
  Video_FeatureFilmType_MOVIE = 0,
  Video_FeatureFilmType_TV = 1
};
bool Video_FeatureFilmType_IsValid(int value);
const Video_FeatureFilmType Video_FeatureFilmType_FeatureFilmType_MIN = Video_FeatureFilmType_MOVIE;
const Video_FeatureFilmType Video_FeatureFilmType_FeatureFilmType_MAX = Video_FeatureFilmType_TV;
const int Video_FeatureFilmType_FeatureFilmType_ARRAYSIZE = Video_FeatureFilmType_FeatureFilmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Video_FeatureFilmType_descriptor();
inline const ::std::string& Video_FeatureFilmType_Name(Video_FeatureFilmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Video_FeatureFilmType_descriptor(), value);
}
inline bool Video_FeatureFilmType_Parse(
    const ::std::string& name, Video_FeatureFilmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Video_FeatureFilmType>(
    Video_FeatureFilmType_descriptor(), name, value);
}
enum FilmVarietyType {
  INTERVIEW = 1
};
bool FilmVarietyType_IsValid(int value);
const FilmVarietyType FilmVarietyType_MIN = INTERVIEW;
const FilmVarietyType FilmVarietyType_MAX = INTERVIEW;
const int FilmVarietyType_ARRAYSIZE = FilmVarietyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FilmVarietyType_descriptor();
inline const ::std::string& FilmVarietyType_Name(FilmVarietyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FilmVarietyType_descriptor(), value);
}
inline bool FilmVarietyType_Parse(
    const ::std::string& name, FilmVarietyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FilmVarietyType>(
    FilmVarietyType_descriptor(), name, value);
}
// ===================================================================

class People : public ::google::protobuf::Message {
 public:
  People();
  virtual ~People();

  People(const People& from);

  inline People& operator=(const People& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const People& default_instance();

  void Swap(People* other);

  // implements Message ----------------------------------------------

  People* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const People& from);
  void MergeFrom(const People& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string character = 3;
  inline int character_size() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 3;
  inline const ::std::string& character(int index) const;
  inline ::std::string* mutable_character(int index);
  inline void set_character(int index, const ::std::string& value);
  inline void set_character(int index, const char* value);
  inline void set_character(int index, const char* value, size_t size);
  inline ::std::string* add_character();
  inline void add_character(const ::std::string& value);
  inline void add_character(const char* value);
  inline void add_character(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& character() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_character();

  // @@protoc_insertion_point(class_scope:json.People)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> character_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static People* default_instance_;
};
// -------------------------------------------------------------------

class ParentInfo : public ::google::protobuf::Message {
 public:
  ParentInfo();
  virtual ~ParentInfo();

  ParentInfo(const ParentInfo& from);

  inline ParentInfo& operator=(const ParentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParentInfo& default_instance();

  void Swap(ParentInfo* other);

  // implements Message ----------------------------------------------

  ParentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParentInfo& from);
  void MergeFrom(const ParentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string picture_url = 3;
  inline bool has_picture_url() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 3;
  inline const ::std::string& picture_url() const;
  inline void set_picture_url(const ::std::string& value);
  inline void set_picture_url(const char* value);
  inline void set_picture_url(const char* value, size_t size);
  inline ::std::string* mutable_picture_url();
  inline ::std::string* release_picture_url();
  inline void set_allocated_picture_url(::std::string* picture_url);

  // optional string page_url = 4;
  inline bool has_page_url() const;
  inline void clear_page_url();
  static const int kPageUrlFieldNumber = 4;
  inline const ::std::string& page_url() const;
  inline void set_page_url(const ::std::string& value);
  inline void set_page_url(const char* value);
  inline void set_page_url(const char* value, size_t size);
  inline ::std::string* mutable_page_url();
  inline ::std::string* release_page_url();
  inline void set_allocated_page_url(::std::string* page_url);

  // optional double sns_score = 5;
  inline bool has_sns_score() const;
  inline void clear_sns_score();
  static const int kSnsScoreFieldNumber = 5;
  inline double sns_score() const;
  inline void set_sns_score(double value);

  // optional double pps_wiki_score = 6;
  inline bool has_pps_wiki_score() const;
  inline void clear_pps_wiki_score();
  static const int kPpsWikiScoreFieldNumber = 6;
  inline double pps_wiki_score() const;
  inline void set_pps_wiki_score(double value);

  // @@protoc_insertion_point(class_scope:json.ParentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_picture_url();
  inline void clear_has_picture_url();
  inline void set_has_page_url();
  inline void clear_has_page_url();
  inline void set_has_sns_score();
  inline void clear_has_sns_score();
  inline void set_has_pps_wiki_score();
  inline void clear_has_pps_wiki_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* picture_url_;
  ::std::string* page_url_;
  double sns_score_;
  double pps_wiki_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static ParentInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChildInfo : public ::google::protobuf::Message {
 public:
  ChildInfo();
  virtual ~ChildInfo();

  ChildInfo(const ChildInfo& from);

  inline ChildInfo& operator=(const ChildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChildInfo& default_instance();

  void Swap(ChildInfo* other);

  // implements Message ----------------------------------------------

  ChildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChildInfo& from);
  void MergeFrom(const ChildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 is_member_only = 2;
  inline bool has_is_member_only() const;
  inline void clear_is_member_only();
  static const int kIsMemberOnlyFieldNumber = 2;
  inline ::google::protobuf::int32 is_member_only() const;
  inline void set_is_member_only(::google::protobuf::int32 value);

  // optional int32 purchase_type = 3;
  inline bool has_purchase_type() const;
  inline void clear_purchase_type();
  static const int kPurchaseTypeFieldNumber = 3;
  inline ::google::protobuf::int32 purchase_type() const;
  inline void set_purchase_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:json.ChildInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_member_only();
  inline void clear_has_is_member_only();
  inline void set_has_purchase_type();
  inline void clear_has_purchase_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 is_member_only_;
  ::google::protobuf::int32 purchase_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static ChildInfo* default_instance_;
};
// -------------------------------------------------------------------

class Topic : public ::google::protobuf::Message {
 public:
  Topic();
  virtual ~Topic();

  Topic(const Topic& from);

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Topic& default_instance();

  void Swap(Topic* other);

  // implements Message ----------------------------------------------

  Topic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:json.Topic)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static Topic* default_instance_;
};
// -------------------------------------------------------------------

class TagFeature : public ::google::protobuf::Message {
 public:
  TagFeature();
  virtual ~TagFeature();

  TagFeature(const TagFeature& from);

  inline TagFeature& operator=(const TagFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagFeature& default_instance();

  void Swap(TagFeature* other);

  // implements Message ----------------------------------------------

  TagFeature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagFeature& from);
  void MergeFrom(const TagFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag_value = 1;
  inline bool has_tag_value() const;
  inline void clear_tag_value();
  static const int kTagValueFieldNumber = 1;
  inline const ::std::string& tag_value() const;
  inline void set_tag_value(const ::std::string& value);
  inline void set_tag_value(const char* value);
  inline void set_tag_value(const char* value, size_t size);
  inline ::std::string* mutable_tag_value();
  inline ::std::string* release_tag_value();
  inline void set_allocated_tag_value(::std::string* tag_value);

  // optional int32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:json.TagFeature)
 private:
  inline void set_has_tag_value();
  inline void clear_has_tag_value();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tag_value_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static TagFeature* default_instance_;
};
// -------------------------------------------------------------------

class DetailedTag : public ::google::protobuf::Message {
 public:
  DetailedTag();
  virtual ~DetailedTag();

  DetailedTag(const DetailedTag& from);

  inline DetailedTag& operator=(const DetailedTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailedTag& default_instance();

  void Swap(DetailedTag* other);

  // implements Message ----------------------------------------------

  DetailedTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailedTag& from);
  void MergeFrom(const DetailedTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag_type = 1;
  inline bool has_tag_type() const;
  inline void clear_tag_type();
  static const int kTagTypeFieldNumber = 1;
  inline const ::std::string& tag_type() const;
  inline void set_tag_type(const ::std::string& value);
  inline void set_tag_type(const char* value);
  inline void set_tag_type(const char* value, size_t size);
  inline ::std::string* mutable_tag_type();
  inline ::std::string* release_tag_type();
  inline void set_allocated_tag_type(::std::string* tag_type);

  // repeated string tag_values = 2;
  inline int tag_values_size() const;
  inline void clear_tag_values();
  static const int kTagValuesFieldNumber = 2;
  inline const ::std::string& tag_values(int index) const;
  inline ::std::string* mutable_tag_values(int index);
  inline void set_tag_values(int index, const ::std::string& value);
  inline void set_tag_values(int index, const char* value);
  inline void set_tag_values(int index, const char* value, size_t size);
  inline ::std::string* add_tag_values();
  inline void add_tag_values(const ::std::string& value);
  inline void add_tag_values(const char* value);
  inline void add_tag_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tag_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag_values();

  // repeated .json.TagFeature tag_features = 3;
  inline int tag_features_size() const;
  inline void clear_tag_features();
  static const int kTagFeaturesFieldNumber = 3;
  inline const ::json::TagFeature& tag_features(int index) const;
  inline ::json::TagFeature* mutable_tag_features(int index);
  inline ::json::TagFeature* add_tag_features();
  inline const ::google::protobuf::RepeatedPtrField< ::json::TagFeature >&
      tag_features() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::TagFeature >*
      mutable_tag_features();

  // @@protoc_insertion_point(class_scope:json.DetailedTag)
 private:
  inline void set_has_tag_type();
  inline void clear_has_tag_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tag_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_values_;
  ::google::protobuf::RepeatedPtrField< ::json::TagFeature > tag_features_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static DetailedTag* default_instance_;
};
// -------------------------------------------------------------------

class Slide : public ::google::protobuf::Message {
 public:
  Slide();
  virtual ~Slide();

  Slide(const Slide& from);

  inline Slide& operator=(const Slide& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Slide& default_instance();

  void Swap(Slide* other);

  // implements Message ----------------------------------------------

  Slide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Slide& from);
  void MergeFrom(const Slide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string slide_url = 1;
  inline bool has_slide_url() const;
  inline void clear_slide_url();
  static const int kSlideUrlFieldNumber = 1;
  inline const ::std::string& slide_url() const;
  inline void set_slide_url(const ::std::string& value);
  inline void set_slide_url(const char* value);
  inline void set_slide_url(const char* value, size_t size);
  inline ::std::string* mutable_slide_url();
  inline ::std::string* release_slide_url();
  inline void set_allocated_slide_url(::std::string* slide_url);

  // optional string platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional int32 order = 3;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional string page_url = 4;
  inline bool has_page_url() const;
  inline void clear_page_url();
  static const int kPageUrlFieldNumber = 4;
  inline const ::std::string& page_url() const;
  inline void set_page_url(const ::std::string& value);
  inline void set_page_url(const char* value);
  inline void set_page_url(const char* value, size_t size);
  inline ::std::string* mutable_page_url();
  inline ::std::string* release_page_url();
  inline void set_allocated_page_url(::std::string* page_url);

  // optional int64 slide_final_time = 5;
  inline bool has_slide_final_time() const;
  inline void clear_slide_final_time();
  static const int kSlideFinalTimeFieldNumber = 5;
  inline ::google::protobuf::int64 slide_final_time() const;
  inline void set_slide_final_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:json.Slide)
 private:
  inline void set_has_slide_url();
  inline void clear_has_slide_url();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_page_url();
  inline void clear_has_page_url();
  inline void set_has_slide_final_time();
  inline void clear_has_slide_final_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* slide_url_;
  ::std::string* platform_;
  ::std::string* page_url_;
  ::google::protobuf::int64 slide_final_time_;
  ::google::protobuf::int32 order_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static Slide* default_instance_;
};
// -------------------------------------------------------------------

class PlayLocation : public ::google::protobuf::Message {
 public:
  PlayLocation();
  virtual ~PlayLocation();

  PlayLocation(const PlayLocation& from);

  inline PlayLocation& operator=(const PlayLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayLocation& default_instance();

  void Swap(PlayLocation* other);

  // implements Message ----------------------------------------------

  PlayLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayLocation& from);
  void MergeFrom(const PlayLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 play_platform = 1;
  inline bool has_play_platform() const;
  inline void clear_play_platform();
  static const int kPlayPlatformFieldNumber = 1;
  inline ::google::protobuf::int32 play_platform() const;
  inline void set_play_platform(::google::protobuf::int32 value);

  // optional bool is_whitelist = 2;
  inline bool has_is_whitelist() const;
  inline void clear_is_whitelist();
  static const int kIsWhitelistFieldNumber = 2;
  inline bool is_whitelist() const;
  inline void set_is_whitelist(bool value);

  // repeated int32 continent = 3;
  inline int continent_size() const;
  inline void clear_continent();
  static const int kContinentFieldNumber = 3;
  inline ::google::protobuf::int32 continent(int index) const;
  inline void set_continent(int index, ::google::protobuf::int32 value);
  inline void add_continent(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      continent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_continent();

  // repeated int32 country = 4;
  inline int country_size() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 4;
  inline ::google::protobuf::int32 country(int index) const;
  inline void set_country(int index, ::google::protobuf::int32 value);
  inline void add_country(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      country() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_country();

  // repeated int32 province = 5;
  inline int province_size() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 5;
  inline ::google::protobuf::int32 province(int index) const;
  inline void set_province(int index, ::google::protobuf::int32 value);
  inline void add_province(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      province() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_province();

  // repeated int32 city = 6;
  inline int city_size() const;
  inline void clear_city();
  static const int kCityFieldNumber = 6;
  inline ::google::protobuf::int32 city(int index) const;
  inline void set_city(int index, ::google::protobuf::int32 value);
  inline void add_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_city();

  // repeated int32 county = 7;
  inline int county_size() const;
  inline void clear_county();
  static const int kCountyFieldNumber = 7;
  inline ::google::protobuf::int32 county(int index) const;
  inline void set_county(int index, ::google::protobuf::int32 value);
  inline void add_county(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      county() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_county();

  // repeated int32 area = 8;
  inline int area_size() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 8;
  inline ::google::protobuf::int32 area(int index) const;
  inline void set_area(int index, ::google::protobuf::int32 value);
  inline void add_area(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      area() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_area();

  // @@protoc_insertion_point(class_scope:json.PlayLocation)
 private:
  inline void set_has_play_platform();
  inline void clear_has_play_platform();
  inline void set_has_is_whitelist();
  inline void clear_has_is_whitelist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 play_platform_;
  bool is_whitelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > continent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > country_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > province_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > city_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > county_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static PlayLocation* default_instance_;
};
// -------------------------------------------------------------------

class DisplayFields : public ::google::protobuf::Message {
 public:
  DisplayFields();
  virtual ~DisplayFields();

  DisplayFields(const DisplayFields& from);

  inline DisplayFields& operator=(const DisplayFields& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayFields& default_instance();

  void Swap(DisplayFields* other);

  // implements Message ----------------------------------------------

  DisplayFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisplayFields& from);
  void MergeFrom(const DisplayFields& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 album_id = 1;
  inline bool has_album_id() const;
  inline void clear_album_id();
  static const int kAlbumIdFieldNumber = 1;
  inline ::google::protobuf::int64 album_id() const;
  inline void set_album_id(::google::protobuf::int64 value);

  // optional int64 tv_id = 2;
  inline bool has_tv_id() const;
  inline void clear_tv_id();
  static const int kTvIdFieldNumber = 2;
  inline ::google::protobuf::int64 tv_id() const;
  inline void set_tv_id(::google::protobuf::int64 value);

  // optional string vid = 3;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 3;
  inline const ::std::string& vid() const;
  inline void set_vid(const ::std::string& value);
  inline void set_vid(const char* value);
  inline void set_vid(const char* value, size_t size);
  inline ::std::string* mutable_vid();
  inline ::std::string* release_vid();
  inline void set_allocated_vid(::std::string* vid);

  // optional string short_title = 4;
  inline bool has_short_title() const;
  inline void clear_short_title();
  static const int kShortTitleFieldNumber = 4;
  inline const ::std::string& short_title() const;
  inline void set_short_title(const ::std::string& value);
  inline void set_short_title(const char* value);
  inline void set_short_title(const char* value, size_t size);
  inline ::std::string* mutable_short_title();
  inline ::std::string* release_short_title();
  inline void set_allocated_short_title(::std::string* short_title);

  // optional string source_name = 5;
  inline bool has_source_name() const;
  inline void clear_source_name();
  static const int kSourceNameFieldNumber = 5;
  inline const ::std::string& source_name() const;
  inline void set_source_name(const ::std::string& value);
  inline void set_source_name(const char* value);
  inline void set_source_name(const char* value, size_t size);
  inline ::std::string* mutable_source_name();
  inline ::std::string* release_source_name();
  inline void set_allocated_source_name(::std::string* source_name);

  // optional string page_url = 6;
  inline bool has_page_url() const;
  inline void clear_page_url();
  static const int kPageUrlFieldNumber = 6;
  inline const ::std::string& page_url() const;
  inline void set_page_url(const ::std::string& value);
  inline void set_page_url(const char* value);
  inline void set_page_url(const char* value, size_t size);
  inline ::std::string* mutable_page_url();
  inline ::std::string* release_page_url();
  inline void set_allocated_page_url(::std::string* page_url);

  // optional string picture_url = 7;
  inline bool has_picture_url() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 7;
  inline const ::std::string& picture_url() const;
  inline void set_picture_url(const ::std::string& value);
  inline void set_picture_url(const char* value);
  inline void set_picture_url(const char* value, size_t size);
  inline ::std::string* mutable_picture_url();
  inline ::std::string* release_picture_url();
  inline void set_allocated_picture_url(::std::string* picture_url);

  // optional int32 total_episode_num = 8;
  inline bool has_total_episode_num() const;
  inline void clear_total_episode_num();
  static const int kTotalEpisodeNumFieldNumber = 8;
  inline ::google::protobuf::int32 total_episode_num() const;
  inline void set_total_episode_num(::google::protobuf::int32 value);

  // optional string global_publish_date = 9;
  inline bool has_global_publish_date() const;
  inline void clear_global_publish_date();
  static const int kGlobalPublishDateFieldNumber = 9;
  inline const ::std::string& global_publish_date() const;
  inline void set_global_publish_date(const ::std::string& value);
  inline void set_global_publish_date(const char* value);
  inline void set_global_publish_date(const char* value, size_t size);
  inline ::std::string* mutable_global_publish_date();
  inline ::std::string* release_global_publish_date();
  inline void set_allocated_global_publish_date(::std::string* global_publish_date);

  // optional string prompt_description = 10;
  inline bool has_prompt_description() const;
  inline void clear_prompt_description();
  static const int kPromptDescriptionFieldNumber = 10;
  inline const ::std::string& prompt_description() const;
  inline void set_prompt_description(const ::std::string& value);
  inline void set_prompt_description(const char* value);
  inline void set_prompt_description(const char* value, size_t size);
  inline ::std::string* mutable_prompt_description();
  inline ::std::string* release_prompt_description();
  inline void set_allocated_prompt_description(::std::string* prompt_description);

  // optional int32 is_member_only = 11;
  inline bool has_is_member_only() const;
  inline void clear_is_member_only();
  static const int kIsMemberOnlyFieldNumber = 11;
  inline ::google::protobuf::int32 is_member_only() const;
  inline void set_is_member_only(::google::protobuf::int32 value);

  // optional int32 is_download_allowed = 12;
  inline bool has_is_download_allowed() const;
  inline void clear_is_download_allowed();
  static const int kIsDownloadAllowedFieldNumber = 12;
  inline ::google::protobuf::int32 is_download_allowed() const;
  inline void set_is_download_allowed(::google::protobuf::int32 value);

  // optional int32 is_exclusive = 13;
  inline bool has_is_exclusive() const;
  inline void clear_is_exclusive();
  static const int kIsExclusiveFieldNumber = 13;
  inline ::google::protobuf::int32 is_exclusive() const;
  inline void set_is_exclusive(::google::protobuf::int32 value);

  // optional string sub_title = 14;
  inline bool has_sub_title() const;
  inline void clear_sub_title();
  static const int kSubTitleFieldNumber = 14;
  inline const ::std::string& sub_title() const;
  inline void set_sub_title(const ::std::string& value);
  inline void set_sub_title(const char* value);
  inline void set_sub_title(const char* value, size_t size);
  inline ::std::string* mutable_sub_title();
  inline ::std::string* release_sub_title();
  inline void set_allocated_sub_title(::std::string* sub_title);

  // repeated string type = 15;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 15;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();

  // optional int32 episode_order = 16;
  inline bool has_episode_order() const;
  inline void clear_episode_order();
  static const int kEpisodeOrderFieldNumber = 16;
  inline ::google::protobuf::int32 episode_order() const;
  inline void set_episode_order(::google::protobuf::int32 value);

  // optional int32 format_property = 17;
  inline bool has_format_property() const;
  inline void clear_format_property();
  static const int kFormatPropertyFieldNumber = 17;
  inline ::google::protobuf::int32 format_property() const;
  inline void set_format_property(::google::protobuf::int32 value);

  // optional int64 qipu_id = 18;
  inline bool has_qipu_id() const;
  inline void clear_qipu_id();
  static const int kQipuIdFieldNumber = 18;
  inline ::google::protobuf::int64 qipu_id() const;
  inline void set_qipu_id(::google::protobuf::int64 value);

  // optional int64 display_play_count = 19;
  inline bool has_display_play_count() const;
  inline void clear_display_play_count();
  static const int kDisplayPlayCountFieldNumber = 19;
  inline ::google::protobuf::int64 display_play_count() const;
  inline void set_display_play_count(::google::protobuf::int64 value);

  // optional int64 play_count = 20;
  inline bool has_play_count() const;
  inline void clear_play_count();
  static const int kPlayCountFieldNumber = 20;
  inline ::google::protobuf::int64 play_count() const;
  inline void set_play_count(::google::protobuf::int64 value);

  // optional int64 comments_count = 21;
  inline bool has_comments_count() const;
  inline void clear_comments_count();
  static const int kCommentsCountFieldNumber = 21;
  inline ::google::protobuf::int64 comments_count() const;
  inline void set_comments_count(::google::protobuf::int64 value);

  // optional int64 up_count = 22;
  inline bool has_up_count() const;
  inline void clear_up_count();
  static const int kUpCountFieldNumber = 22;
  inline ::google::protobuf::int64 up_count() const;
  inline void set_up_count(::google::protobuf::int64 value);

  // optional int64 down_count = 23;
  inline bool has_down_count() const;
  inline void clear_down_count();
  static const int kDownCountFieldNumber = 23;
  inline ::google::protobuf::int64 down_count() const;
  inline void set_down_count(::google::protobuf::int64 value);

  // optional string latest_episode = 24;
  inline bool has_latest_episode() const;
  inline void clear_latest_episode();
  static const int kLatestEpisodeFieldNumber = 24;
  inline const ::std::string& latest_episode() const;
  inline void set_latest_episode(const ::std::string& value);
  inline void set_latest_episode(const char* value);
  inline void set_latest_episode(const char* value, size_t size);
  inline ::std::string* mutable_latest_episode();
  inline ::std::string* release_latest_episode();
  inline void set_allocated_latest_episode(::std::string* latest_episode);

  // optional string pps_p2p_url = 25;
  inline bool has_pps_p2p_url() const;
  inline void clear_pps_p2p_url();
  static const int kPpsP2PUrlFieldNumber = 25;
  inline const ::std::string& pps_p2p_url() const;
  inline void set_pps_p2p_url(const ::std::string& value);
  inline void set_pps_p2p_url(const char* value);
  inline void set_pps_p2p_url(const char* value, size_t size);
  inline ::std::string* mutable_pps_p2p_url();
  inline ::std::string* release_pps_p2p_url();
  inline void set_allocated_pps_p2p_url(::std::string* pps_p2p_url);

  // optional string poster_url = 26;
  inline bool has_poster_url() const;
  inline void clear_poster_url();
  static const int kPosterUrlFieldNumber = 26;
  inline const ::std::string& poster_url() const;
  inline void set_poster_url(const ::std::string& value);
  inline void set_poster_url(const char* value);
  inline void set_poster_url(const char* value, size_t size);
  inline ::std::string* mutable_poster_url();
  inline ::std::string* release_poster_url();
  inline void set_allocated_poster_url(::std::string* poster_url);

  // optional int32 purchase_type = 27;
  inline bool has_purchase_type() const;
  inline void clear_purchase_type();
  static const int kPurchaseTypeFieldNumber = 27;
  inline ::google::protobuf::int32 purchase_type() const;
  inline void set_purchase_type(::google::protobuf::int32 value);

  // optional string id_url_hashcode = 28;
  inline bool has_id_url_hashcode() const;
  inline void clear_id_url_hashcode();
  static const int kIdUrlHashcodeFieldNumber = 28;
  inline const ::std::string& id_url_hashcode() const;
  inline void set_id_url_hashcode(const ::std::string& value);
  inline void set_id_url_hashcode(const char* value);
  inline void set_id_url_hashcode(const char* value, size_t size);
  inline ::std::string* mutable_id_url_hashcode();
  inline ::std::string* release_id_url_hashcode();
  inline void set_allocated_id_url_hashcode(::std::string* id_url_hashcode);

  // optional int32 season = 29;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 29;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);

  // optional int32 phase = 30;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 30;
  inline ::google::protobuf::int32 phase() const;
  inline void set_phase(::google::protobuf::int32 value);

  // optional int64 latest_episode_id = 31;
  inline bool has_latest_episode_id() const;
  inline void clear_latest_episode_id();
  static const int kLatestEpisodeIdFieldNumber = 31;
  inline ::google::protobuf::int64 latest_episode_id() const;
  inline void set_latest_episode_id(::google::protobuf::int64 value);

  // optional int32 is_boss_mixer = 32;
  inline bool has_is_boss_mixer() const;
  inline void clear_is_boss_mixer();
  static const int kIsBossMixerFieldNumber = 32;
  inline ::google::protobuf::int32 is_boss_mixer() const;
  inline void set_is_boss_mixer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:json.DisplayFields)
 private:
  inline void set_has_album_id();
  inline void clear_has_album_id();
  inline void set_has_tv_id();
  inline void clear_has_tv_id();
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_short_title();
  inline void clear_has_short_title();
  inline void set_has_source_name();
  inline void clear_has_source_name();
  inline void set_has_page_url();
  inline void clear_has_page_url();
  inline void set_has_picture_url();
  inline void clear_has_picture_url();
  inline void set_has_total_episode_num();
  inline void clear_has_total_episode_num();
  inline void set_has_global_publish_date();
  inline void clear_has_global_publish_date();
  inline void set_has_prompt_description();
  inline void clear_has_prompt_description();
  inline void set_has_is_member_only();
  inline void clear_has_is_member_only();
  inline void set_has_is_download_allowed();
  inline void clear_has_is_download_allowed();
  inline void set_has_is_exclusive();
  inline void clear_has_is_exclusive();
  inline void set_has_sub_title();
  inline void clear_has_sub_title();
  inline void set_has_episode_order();
  inline void clear_has_episode_order();
  inline void set_has_format_property();
  inline void clear_has_format_property();
  inline void set_has_qipu_id();
  inline void clear_has_qipu_id();
  inline void set_has_display_play_count();
  inline void clear_has_display_play_count();
  inline void set_has_play_count();
  inline void clear_has_play_count();
  inline void set_has_comments_count();
  inline void clear_has_comments_count();
  inline void set_has_up_count();
  inline void clear_has_up_count();
  inline void set_has_down_count();
  inline void clear_has_down_count();
  inline void set_has_latest_episode();
  inline void clear_has_latest_episode();
  inline void set_has_pps_p2p_url();
  inline void clear_has_pps_p2p_url();
  inline void set_has_poster_url();
  inline void clear_has_poster_url();
  inline void set_has_purchase_type();
  inline void clear_has_purchase_type();
  inline void set_has_id_url_hashcode();
  inline void clear_has_id_url_hashcode();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_latest_episode_id();
  inline void clear_has_latest_episode_id();
  inline void set_has_is_boss_mixer();
  inline void clear_has_is_boss_mixer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 album_id_;
  ::google::protobuf::int64 tv_id_;
  ::std::string* vid_;
  ::std::string* short_title_;
  ::std::string* source_name_;
  ::std::string* page_url_;
  ::std::string* picture_url_;
  ::std::string* global_publish_date_;
  ::google::protobuf::int32 total_episode_num_;
  ::google::protobuf::int32 is_member_only_;
  ::std::string* prompt_description_;
  ::google::protobuf::int32 is_download_allowed_;
  ::google::protobuf::int32 is_exclusive_;
  ::std::string* sub_title_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::protobuf::int32 episode_order_;
  ::google::protobuf::int32 format_property_;
  ::google::protobuf::int64 qipu_id_;
  ::google::protobuf::int64 display_play_count_;
  ::google::protobuf::int64 play_count_;
  ::google::protobuf::int64 comments_count_;
  ::google::protobuf::int64 up_count_;
  ::google::protobuf::int64 down_count_;
  ::std::string* latest_episode_;
  ::std::string* pps_p2p_url_;
  ::std::string* poster_url_;
  ::std::string* id_url_hashcode_;
  ::google::protobuf::int32 purchase_type_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int64 latest_episode_id_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 is_boss_mixer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static DisplayFields* default_instance_;
};
// -------------------------------------------------------------------

class Video : public ::google::protobuf::Message {
 public:
  Video();
  virtual ~Video();

  Video(const Video& from);

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Video& default_instance();

  void Swap(Video* other);

  // implements Message ----------------------------------------------

  Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Video_RatingType RatingType;
  static const RatingType GENERAL = Video_RatingType_GENERAL;
  static const RatingType CHILD_PROTECTED = Video_RatingType_CHILD_PROTECTED;
  static const RatingType PARENT_GUIDED = Video_RatingType_PARENT_GUIDED;
  static const RatingType MATURE = Video_RatingType_MATURE;
  static inline bool RatingType_IsValid(int value) {
    return Video_RatingType_IsValid(value);
  }
  static const RatingType RatingType_MIN =
    Video_RatingType_RatingType_MIN;
  static const RatingType RatingType_MAX =
    Video_RatingType_RatingType_MAX;
  static const int RatingType_ARRAYSIZE =
    Video_RatingType_RatingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RatingType_descriptor() {
    return Video_RatingType_descriptor();
  }
  static inline const ::std::string& RatingType_Name(RatingType value) {
    return Video_RatingType_Name(value);
  }
  static inline bool RatingType_Parse(const ::std::string& name,
      RatingType* value) {
    return Video_RatingType_Parse(name, value);
  }

  typedef Video_DangerLevel DangerLevel;
  static const DangerLevel SAFE = Video_DangerLevel_SAFE;
  static const DangerLevel DANGEROUS_HIGH = Video_DangerLevel_DANGEROUS_HIGH;
  static const DangerLevel DANGEROUS_MIDDLE = Video_DangerLevel_DANGEROUS_MIDDLE;
  static const DangerLevel DANGEROUS_LOW = Video_DangerLevel_DANGEROUS_LOW;
  static inline bool DangerLevel_IsValid(int value) {
    return Video_DangerLevel_IsValid(value);
  }
  static const DangerLevel DangerLevel_MIN =
    Video_DangerLevel_DangerLevel_MIN;
  static const DangerLevel DangerLevel_MAX =
    Video_DangerLevel_DangerLevel_MAX;
  static const int DangerLevel_ARRAYSIZE =
    Video_DangerLevel_DangerLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DangerLevel_descriptor() {
    return Video_DangerLevel_descriptor();
  }
  static inline const ::std::string& DangerLevel_Name(DangerLevel value) {
    return Video_DangerLevel_Name(value);
  }
  static inline bool DangerLevel_Parse(const ::std::string& name,
      DangerLevel* value) {
    return Video_DangerLevel_Parse(name, value);
  }

  typedef Video_EditorRecommendLevel EditorRecommendLevel;
  static const EditorRecommendLevel NONE = Video_EditorRecommendLevel_NONE;
  static const EditorRecommendLevel GENERAL_REC = Video_EditorRecommendLevel_GENERAL_REC;
  static const EditorRecommendLevel KEY = Video_EditorRecommendLevel_KEY;
  static const EditorRecommendLevel STRONG = Video_EditorRecommendLevel_STRONG;
  static inline bool EditorRecommendLevel_IsValid(int value) {
    return Video_EditorRecommendLevel_IsValid(value);
  }
  static const EditorRecommendLevel EditorRecommendLevel_MIN =
    Video_EditorRecommendLevel_EditorRecommendLevel_MIN;
  static const EditorRecommendLevel EditorRecommendLevel_MAX =
    Video_EditorRecommendLevel_EditorRecommendLevel_MAX;
  static const int EditorRecommendLevel_ARRAYSIZE =
    Video_EditorRecommendLevel_EditorRecommendLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EditorRecommendLevel_descriptor() {
    return Video_EditorRecommendLevel_descriptor();
  }
  static inline const ::std::string& EditorRecommendLevel_Name(EditorRecommendLevel value) {
    return Video_EditorRecommendLevel_Name(value);
  }
  static inline bool EditorRecommendLevel_Parse(const ::std::string& name,
      EditorRecommendLevel* value) {
    return Video_EditorRecommendLevel_Parse(name, value);
  }

  typedef Video_ContentType ContentType;
  static const ContentType FEATURE_FILM = Video_ContentType_FEATURE_FILM;
  static const ContentType PREVUE = Video_ContentType_PREVUE;
  static const ContentType TRAILER = Video_ContentType_TRAILER;
  static const ContentType CLIP = Video_ContentType_CLIP;
  static const ContentType OTHER = Video_ContentType_OTHER;
  static inline bool ContentType_IsValid(int value) {
    return Video_ContentType_IsValid(value);
  }
  static const ContentType ContentType_MIN =
    Video_ContentType_ContentType_MIN;
  static const ContentType ContentType_MAX =
    Video_ContentType_ContentType_MAX;
  static const int ContentType_ARRAYSIZE =
    Video_ContentType_ContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentType_descriptor() {
    return Video_ContentType_descriptor();
  }
  static inline const ::std::string& ContentType_Name(ContentType value) {
    return Video_ContentType_Name(value);
  }
  static inline bool ContentType_Parse(const ::std::string& name,
      ContentType* value) {
    return Video_ContentType_Parse(name, value);
  }

  typedef Video_FeatureFilmType FeatureFilmType;
  static const FeatureFilmType MOVIE = Video_FeatureFilmType_MOVIE;
  static const FeatureFilmType TV = Video_FeatureFilmType_TV;
  static inline bool FeatureFilmType_IsValid(int value) {
    return Video_FeatureFilmType_IsValid(value);
  }
  static const FeatureFilmType FeatureFilmType_MIN =
    Video_FeatureFilmType_FeatureFilmType_MIN;
  static const FeatureFilmType FeatureFilmType_MAX =
    Video_FeatureFilmType_FeatureFilmType_MAX;
  static const int FeatureFilmType_ARRAYSIZE =
    Video_FeatureFilmType_FeatureFilmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FeatureFilmType_descriptor() {
    return Video_FeatureFilmType_descriptor();
  }
  static inline const ::std::string& FeatureFilmType_Name(FeatureFilmType value) {
    return Video_FeatureFilmType_Name(value);
  }
  static inline bool FeatureFilmType_Parse(const ::std::string& name,
      FeatureFilmType* value) {
    return Video_FeatureFilmType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional int64 pps_id = 4;
  inline bool has_pps_id() const;
  inline void clear_pps_id();
  static const int kPpsIdFieldNumber = 4;
  inline ::google::protobuf::int64 pps_id() const;
  inline void set_pps_id(::google::protobuf::int64 value);

  // optional int32 channel_id = 5;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 5;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);

  // repeated int64 multi_publish = 6;
  inline int multi_publish_size() const;
  inline void clear_multi_publish();
  static const int kMultiPublishFieldNumber = 6;
  inline ::google::protobuf::int64 multi_publish(int index) const;
  inline void set_multi_publish(int index, ::google::protobuf::int64 value);
  inline void add_multi_publish(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      multi_publish() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_multi_publish();

  // optional int64 uploader_id = 7;
  inline bool has_uploader_id() const;
  inline void clear_uploader_id();
  static const int kUploaderIdFieldNumber = 7;
  inline ::google::protobuf::int64 uploader_id() const;
  inline void set_uploader_id(::google::protobuf::int64 value);

  // optional int64 final_time = 8;
  inline bool has_final_time() const;
  inline void clear_final_time();
  static const int kFinalTimeFieldNumber = 8;
  inline ::google::protobuf::int64 final_time() const;
  inline void set_final_time(::google::protobuf::int64 value);

  // optional int32 time_duration = 9;
  inline bool has_time_duration() const;
  inline void clear_time_duration();
  static const int kTimeDurationFieldNumber = 9;
  inline ::google::protobuf::int32 time_duration() const;
  inline void set_time_duration(::google::protobuf::int32 value);

  // optional int32 allowed_platform = 10;
  inline bool has_allowed_platform() const;
  inline void clear_allowed_platform();
  static const int kAllowedPlatformFieldNumber = 10;
  inline ::google::protobuf::int32 allowed_platform() const;
  inline void set_allowed_platform(::google::protobuf::int32 value);

  // optional bool is_domestic_only = 11;
  inline bool has_is_domestic_only() const;
  inline void clear_is_domestic_only();
  static const int kIsDomesticOnlyFieldNumber = 11;
  inline bool is_domestic_only() const;
  inline void set_is_domestic_only(bool value);

  // optional string signature = 12;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 12;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional float quality_score = 13;
  inline bool has_quality_score() const;
  inline void clear_quality_score();
  static const int kQualityScoreFieldNumber = 13;
  inline float quality_score() const;
  inline void set_quality_score(float value);

  // optional bool is_valid = 14;
  inline bool has_is_valid() const;
  inline void clear_is_valid();
  static const int kIsValidFieldNumber = 14;
  inline bool is_valid() const;
  inline void set_is_valid(bool value);

  // optional .json.Video.RatingType rating = 15;
  inline bool has_rating() const;
  inline void clear_rating();
  static const int kRatingFieldNumber = 15;
  inline ::json::Video_RatingType rating() const;
  inline void set_rating(::json::Video_RatingType value);

  // optional .json.Video.DangerLevel danger_level = 16;
  inline bool has_danger_level() const;
  inline void clear_danger_level();
  static const int kDangerLevelFieldNumber = 16;
  inline ::json::Video_DangerLevel danger_level() const;
  inline void set_danger_level(::json::Video_DangerLevel value);

  // optional .json.Video.EditorRecommendLevel editor_recommend_level = 17;
  inline bool has_editor_recommend_level() const;
  inline void clear_editor_recommend_level();
  static const int kEditorRecommendLevelFieldNumber = 17;
  inline ::json::Video_EditorRecommendLevel editor_recommend_level() const;
  inline void set_editor_recommend_level(::json::Video_EditorRecommendLevel value);

  // repeated string tags = 18;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 18;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated string canonical_keyword = 19;
  inline int canonical_keyword_size() const;
  inline void clear_canonical_keyword();
  static const int kCanonicalKeywordFieldNumber = 19;
  inline const ::std::string& canonical_keyword(int index) const;
  inline ::std::string* mutable_canonical_keyword(int index);
  inline void set_canonical_keyword(int index, const ::std::string& value);
  inline void set_canonical_keyword(int index, const char* value);
  inline void set_canonical_keyword(int index, const char* value, size_t size);
  inline ::std::string* add_canonical_keyword();
  inline void add_canonical_keyword(const ::std::string& value);
  inline void add_canonical_keyword(const char* value);
  inline void add_canonical_keyword(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& canonical_keyword() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_canonical_keyword();

  // repeated string keyword = 20;
  inline int keyword_size() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 20;
  inline const ::std::string& keyword(int index) const;
  inline ::std::string* mutable_keyword(int index);
  inline void set_keyword(int index, const ::std::string& value);
  inline void set_keyword(int index, const char* value);
  inline void set_keyword(int index, const char* value, size_t size);
  inline ::std::string* add_keyword();
  inline void add_keyword(const ::std::string& value);
  inline void add_keyword(const char* value);
  inline void add_keyword(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keyword() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keyword();

  // optional .json.Video.ContentType content_type = 21;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 21;
  inline ::json::Video_ContentType content_type() const;
  inline void set_content_type(::json::Video_ContentType value);

  // optional .json.Video.FeatureFilmType feature_film_type = 22;
  inline bool has_feature_film_type() const;
  inline void clear_feature_film_type();
  static const int kFeatureFilmTypeFieldNumber = 22;
  inline ::json::Video_FeatureFilmType feature_film_type() const;
  inline void set_feature_film_type(::json::Video_FeatureFilmType value);

  // repeated string location = 23;
  inline int location_size() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 23;
  inline const ::std::string& location(int index) const;
  inline ::std::string* mutable_location(int index);
  inline void set_location(int index, const ::std::string& value);
  inline void set_location(int index, const char* value);
  inline void set_location(int index, const char* value, size_t size);
  inline ::std::string* add_location();
  inline void add_location(const ::std::string& value);
  inline void add_location(const char* value);
  inline void add_location(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& location() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_location();

  // repeated .json.People creator = 24;
  inline int creator_size() const;
  inline void clear_creator();
  static const int kCreatorFieldNumber = 24;
  inline const ::json::People& creator(int index) const;
  inline ::json::People* mutable_creator(int index);
  inline ::json::People* add_creator();
  inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
      creator() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::People >*
      mutable_creator();

  // repeated .json.People main_contributor = 25;
  inline int main_contributor_size() const;
  inline void clear_main_contributor();
  static const int kMainContributorFieldNumber = 25;
  inline const ::json::People& main_contributor(int index) const;
  inline ::json::People* mutable_main_contributor(int index);
  inline ::json::People* add_main_contributor();
  inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
      main_contributor() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::People >*
      mutable_main_contributor();

  // repeated .json.People support_contributor = 26;
  inline int support_contributor_size() const;
  inline void clear_support_contributor();
  static const int kSupportContributorFieldNumber = 26;
  inline const ::json::People& support_contributor(int index) const;
  inline ::json::People* mutable_support_contributor(int index);
  inline ::json::People* add_support_contributor();
  inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
      support_contributor() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::People >*
      mutable_support_contributor();

  // repeated .json.ParentInfo parent_video_group = 27;
  inline int parent_video_group_size() const;
  inline void clear_parent_video_group();
  static const int kParentVideoGroupFieldNumber = 27;
  inline const ::json::ParentInfo& parent_video_group(int index) const;
  inline ::json::ParentInfo* mutable_parent_video_group(int index);
  inline ::json::ParentInfo* add_parent_video_group();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >&
      parent_video_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >*
      mutable_parent_video_group();

  // optional .json.ParentInfo parent_album = 28;
  inline bool has_parent_album() const;
  inline void clear_parent_album();
  static const int kParentAlbumFieldNumber = 28;
  inline const ::json::ParentInfo& parent_album() const;
  inline ::json::ParentInfo* mutable_parent_album();
  inline ::json::ParentInfo* release_parent_album();
  inline void set_allocated_parent_album(::json::ParentInfo* parent_album);

  // repeated .json.ParentInfo parent_collection = 29;
  inline int parent_collection_size() const;
  inline void clear_parent_collection();
  static const int kParentCollectionFieldNumber = 29;
  inline const ::json::ParentInfo& parent_collection(int index) const;
  inline ::json::ParentInfo* mutable_parent_collection(int index);
  inline ::json::ParentInfo* add_parent_collection();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >&
      parent_collection() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >*
      mutable_parent_collection();

  // repeated .json.ParentInfo parent_official_episode = 30;
  inline int parent_official_episode_size() const;
  inline void clear_parent_official_episode();
  static const int kParentOfficialEpisodeFieldNumber = 30;
  inline const ::json::ParentInfo& parent_official_episode(int index) const;
  inline ::json::ParentInfo* mutable_parent_official_episode(int index);
  inline ::json::ParentInfo* add_parent_official_episode();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >&
      parent_official_episode() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >*
      mutable_parent_official_episode();

  // repeated .json.ChildInfo children_episode = 31;
  inline int children_episode_size() const;
  inline void clear_children_episode();
  static const int kChildrenEpisodeFieldNumber = 31;
  inline const ::json::ChildInfo& children_episode(int index) const;
  inline ::json::ChildInfo* mutable_children_episode(int index);
  inline ::json::ChildInfo* add_children_episode();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
      children_episode() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
      mutable_children_episode();

  // repeated .json.ChildInfo children_prevue = 32;
  inline int children_prevue_size() const;
  inline void clear_children_prevue();
  static const int kChildrenPrevueFieldNumber = 32;
  inline const ::json::ChildInfo& children_prevue(int index) const;
  inline ::json::ChildInfo* mutable_children_prevue(int index);
  inline ::json::ChildInfo* add_children_prevue();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
      children_prevue() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
      mutable_children_prevue();

  // repeated .json.ChildInfo children_trailer = 33;
  inline int children_trailer_size() const;
  inline void clear_children_trailer();
  static const int kChildrenTrailerFieldNumber = 33;
  inline const ::json::ChildInfo& children_trailer(int index) const;
  inline ::json::ChildInfo* mutable_children_trailer(int index);
  inline ::json::ChildInfo* add_children_trailer();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
      children_trailer() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
      mutable_children_trailer();

  // repeated .json.ChildInfo children_titbit = 34;
  inline int children_titbit_size() const;
  inline void clear_children_titbit();
  static const int kChildrenTitbitFieldNumber = 34;
  inline const ::json::ChildInfo& children_titbit(int index) const;
  inline ::json::ChildInfo* mutable_children_titbit(int index);
  inline ::json::ChildInfo* add_children_titbit();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
      children_titbit() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
      mutable_children_titbit();

  // optional .json.DisplayFields display_fields = 35;
  inline bool has_display_fields() const;
  inline void clear_display_fields();
  static const int kDisplayFieldsFieldNumber = 35;
  inline const ::json::DisplayFields& display_fields() const;
  inline ::json::DisplayFields* mutable_display_fields();
  inline ::json::DisplayFields* release_display_fields();
  inline void set_allocated_display_fields(::json::DisplayFields* display_fields);

  // optional int64 douban_id = 36;
  inline bool has_douban_id() const;
  inline void clear_douban_id();
  static const int kDoubanIdFieldNumber = 36;
  inline ::google::protobuf::int64 douban_id() const;
  inline void set_douban_id(::google::protobuf::int64 value);

  // optional int32 allowed_platform_1 = 37;
  inline bool has_allowed_platform_1() const;
  inline void clear_allowed_platform_1();
  static const int kAllowedPlatform1FieldNumber = 37;
  inline ::google::protobuf::int32 allowed_platform_1() const;
  inline void set_allowed_platform_1(::google::protobuf::int32 value);

  // repeated .json.Slide slides = 38;
  inline int slides_size() const;
  inline void clear_slides();
  static const int kSlidesFieldNumber = 38;
  inline const ::json::Slide& slides(int index) const;
  inline ::json::Slide* mutable_slides(int index);
  inline ::json::Slide* add_slides();
  inline const ::google::protobuf::RepeatedPtrField< ::json::Slide >&
      slides() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::Slide >*
      mutable_slides();

  // repeated string user_tags = 39;
  inline int user_tags_size() const;
  inline void clear_user_tags();
  static const int kUserTagsFieldNumber = 39;
  inline const ::std::string& user_tags(int index) const;
  inline ::std::string* mutable_user_tags(int index);
  inline void set_user_tags(int index, const ::std::string& value);
  inline void set_user_tags(int index, const char* value);
  inline void set_user_tags(int index, const char* value, size_t size);
  inline ::std::string* add_user_tags();
  inline void add_user_tags(const ::std::string& value);
  inline void add_user_tags(const char* value);
  inline void add_user_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_tags();

  // repeated string political_sensitive_words = 40;
  inline int political_sensitive_words_size() const;
  inline void clear_political_sensitive_words();
  static const int kPoliticalSensitiveWordsFieldNumber = 40;
  inline const ::std::string& political_sensitive_words(int index) const;
  inline ::std::string* mutable_political_sensitive_words(int index);
  inline void set_political_sensitive_words(int index, const ::std::string& value);
  inline void set_political_sensitive_words(int index, const char* value);
  inline void set_political_sensitive_words(int index, const char* value, size_t size);
  inline ::std::string* add_political_sensitive_words();
  inline void add_political_sensitive_words(const ::std::string& value);
  inline void add_political_sensitive_words(const char* value);
  inline void add_political_sensitive_words(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& political_sensitive_words() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_political_sensitive_words();

  // repeated string custom_tags = 41;
  inline int custom_tags_size() const;
  inline void clear_custom_tags();
  static const int kCustomTagsFieldNumber = 41;
  inline const ::std::string& custom_tags(int index) const;
  inline ::std::string* mutable_custom_tags(int index);
  inline void set_custom_tags(int index, const ::std::string& value);
  inline void set_custom_tags(int index, const char* value);
  inline void set_custom_tags(int index, const char* value, size_t size);
  inline ::std::string* add_custom_tags();
  inline void add_custom_tags(const ::std::string& value);
  inline void add_custom_tags(const char* value);
  inline void add_custom_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& custom_tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_custom_tags();

  // optional bool is_available_for_qiyihomepage = 42;
  inline bool has_is_available_for_qiyihomepage() const;
  inline void clear_is_available_for_qiyihomepage();
  static const int kIsAvailableForQiyihomepageFieldNumber = 42;
  inline bool is_available_for_qiyihomepage() const;
  inline void set_is_available_for_qiyihomepage(bool value);

  // repeated string site_name = 43;
  inline int site_name_size() const;
  inline void clear_site_name();
  static const int kSiteNameFieldNumber = 43;
  inline const ::std::string& site_name(int index) const;
  inline ::std::string* mutable_site_name(int index);
  inline void set_site_name(int index, const ::std::string& value);
  inline void set_site_name(int index, const char* value);
  inline void set_site_name(int index, const char* value, size_t size);
  inline ::std::string* add_site_name();
  inline void add_site_name(const ::std::string& value);
  inline void add_site_name(const char* value);
  inline void add_site_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& site_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_site_name();

  // optional bool is_latest_episode = 44;
  inline bool has_is_latest_episode() const;
  inline void clear_is_latest_episode();
  static const int kIsLatestEpisodeFieldNumber = 44;
  inline bool is_latest_episode() const;
  inline void set_is_latest_episode(bool value);

  // optional bool is_qiyi_produced = 45;
  inline bool has_is_qiyi_produced() const;
  inline void clear_is_qiyi_produced();
  static const int kIsQiyiProducedFieldNumber = 45;
  inline bool is_qiyi_produced() const;
  inline void set_is_qiyi_produced(bool value);

  // repeated .json.DetailedTag detailed_tags = 46;
  inline int detailed_tags_size() const;
  inline void clear_detailed_tags();
  static const int kDetailedTagsFieldNumber = 46;
  inline const ::json::DetailedTag& detailed_tags(int index) const;
  inline ::json::DetailedTag* mutable_detailed_tags(int index);
  inline ::json::DetailedTag* add_detailed_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::json::DetailedTag >&
      detailed_tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::DetailedTag >*
      mutable_detailed_tags();

  // optional string song_name = 47;
  inline bool has_song_name() const;
  inline void clear_song_name();
  static const int kSongNameFieldNumber = 47;
  inline const ::std::string& song_name() const;
  inline void set_song_name(const ::std::string& value);
  inline void set_song_name(const char* value);
  inline void set_song_name(const char* value, size_t size);
  inline ::std::string* mutable_song_name();
  inline ::std::string* release_song_name();
  inline void set_allocated_song_name(::std::string* song_name);

  // optional double douban_score = 48;
  inline bool has_douban_score() const;
  inline void clear_douban_score();
  static const int kDoubanScoreFieldNumber = 48;
  inline double douban_score() const;
  inline void set_douban_score(double value);

  // repeated .json.ChildInfo children_clip = 49;
  inline int children_clip_size() const;
  inline void clear_children_clip();
  static const int kChildrenClipFieldNumber = 49;
  inline const ::json::ChildInfo& children_clip(int index) const;
  inline ::json::ChildInfo* mutable_children_clip(int index);
  inline ::json::ChildInfo* add_children_clip();
  inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
      children_clip() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
      mutable_children_clip();

  // repeated .json.People screen_writer = 50;
  inline int screen_writer_size() const;
  inline void clear_screen_writer();
  static const int kScreenWriterFieldNumber = 50;
  inline const ::json::People& screen_writer(int index) const;
  inline ::json::People* mutable_screen_writer(int index);
  inline ::json::People* add_screen_writer();
  inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
      screen_writer() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::People >*
      mutable_screen_writer();

  // optional bool is_available_for_channel_homepage = 51;
  inline bool has_is_available_for_channel_homepage() const;
  inline void clear_is_available_for_channel_homepage();
  static const int kIsAvailableForChannelHomepageFieldNumber = 51;
  inline bool is_available_for_channel_homepage() const;
  inline void set_is_available_for_channel_homepage(bool value);

  // repeated .json.Topic topics = 52;
  inline int topics_size() const;
  inline void clear_topics();
  static const int kTopicsFieldNumber = 52;
  inline const ::json::Topic& topics(int index) const;
  inline ::json::Topic* mutable_topics(int index);
  inline ::json::Topic* add_topics();
  inline const ::google::protobuf::RepeatedPtrField< ::json::Topic >&
      topics() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::Topic >*
      mutable_topics();

  // optional bool is_online = 53;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 53;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // optional int64 play_platform = 54;
  inline bool has_play_platform() const;
  inline void clear_play_platform();
  static const int kPlayPlatformFieldNumber = 54;
  inline ::google::protobuf::int64 play_platform() const;
  inline void set_play_platform(::google::protobuf::int64 value);

  // repeated .json.PlayLocation play_location = 55;
  inline int play_location_size() const;
  inline void clear_play_location();
  static const int kPlayLocationFieldNumber = 55;
  inline const ::json::PlayLocation& play_location(int index) const;
  inline ::json::PlayLocation* mutable_play_location(int index);
  inline ::json::PlayLocation* add_play_location();
  inline const ::google::protobuf::RepeatedPtrField< ::json::PlayLocation >&
      play_location() const;
  inline ::google::protobuf::RepeatedPtrField< ::json::PlayLocation >*
      mutable_play_location();

  // optional int32 rc_order = 56;
  inline bool has_rc_order() const;
  inline void clear_rc_order();
  static const int kRcOrderFieldNumber = 56;
  inline ::google::protobuf::int32 rc_order() const;
  inline void set_rc_order(::google::protobuf::int32 value);

  // repeated string operating_tags = 57;
  inline int operating_tags_size() const;
  inline void clear_operating_tags();
  static const int kOperatingTagsFieldNumber = 57;
  inline const ::std::string& operating_tags(int index) const;
  inline ::std::string* mutable_operating_tags(int index);
  inline void set_operating_tags(int index, const ::std::string& value);
  inline void set_operating_tags(int index, const char* value);
  inline void set_operating_tags(int index, const char* value, size_t size);
  inline ::std::string* add_operating_tags();
  inline void add_operating_tags(const ::std::string& value);
  inline void add_operating_tags(const char* value);
  inline void add_operating_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& operating_tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_operating_tags();

  // optional string play_source_id = 58;
  inline bool has_play_source_id() const;
  inline void clear_play_source_id();
  static const int kPlaySourceIdFieldNumber = 58;
  inline const ::std::string& play_source_id() const;
  inline void set_play_source_id(const ::std::string& value);
  inline void set_play_source_id(const char* value);
  inline void set_play_source_id(const char* value, size_t size);
  inline ::std::string* mutable_play_source_id();
  inline ::std::string* release_play_source_id();
  inline void set_allocated_play_source_id(::std::string* play_source_id);

  // optional .json.FilmVarietyType film_variety_type = 59;
  inline bool has_film_variety_type() const;
  inline void clear_film_variety_type();
  static const int kFilmVarietyTypeFieldNumber = 59;
  inline ::json::FilmVarietyType film_variety_type() const;
  inline void set_film_variety_type(::json::FilmVarietyType value);

  // optional double sns_score = 60;
  inline bool has_sns_score() const;
  inline void clear_sns_score();
  static const int kSnsScoreFieldNumber = 60;
  inline double sns_score() const;
  inline void set_sns_score(double value);

  // optional double pps_wiki_score = 61;
  inline bool has_pps_wiki_score() const;
  inline void clear_pps_wiki_score();
  static const int kPpsWikiScoreFieldNumber = 61;
  inline double pps_wiki_score() const;
  inline void set_pps_wiki_score(double value);

  // optional int64 original_id = 62;
  inline bool has_original_id() const;
  inline void clear_original_id();
  static const int kOriginalIdFieldNumber = 62;
  inline ::google::protobuf::int64 original_id() const;
  inline void set_original_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:json.Video)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_pps_id();
  inline void clear_has_pps_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_uploader_id();
  inline void clear_has_uploader_id();
  inline void set_has_final_time();
  inline void clear_has_final_time();
  inline void set_has_time_duration();
  inline void clear_has_time_duration();
  inline void set_has_allowed_platform();
  inline void clear_has_allowed_platform();
  inline void set_has_is_domestic_only();
  inline void clear_has_is_domestic_only();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_quality_score();
  inline void clear_has_quality_score();
  inline void set_has_is_valid();
  inline void clear_has_is_valid();
  inline void set_has_rating();
  inline void clear_has_rating();
  inline void set_has_danger_level();
  inline void clear_has_danger_level();
  inline void set_has_editor_recommend_level();
  inline void clear_has_editor_recommend_level();
  inline void set_has_content_type();
  inline void clear_has_content_type();
  inline void set_has_feature_film_type();
  inline void clear_has_feature_film_type();
  inline void set_has_parent_album();
  inline void clear_has_parent_album();
  inline void set_has_display_fields();
  inline void clear_has_display_fields();
  inline void set_has_douban_id();
  inline void clear_has_douban_id();
  inline void set_has_allowed_platform_1();
  inline void clear_has_allowed_platform_1();
  inline void set_has_is_available_for_qiyihomepage();
  inline void clear_has_is_available_for_qiyihomepage();
  inline void set_has_is_latest_episode();
  inline void clear_has_is_latest_episode();
  inline void set_has_is_qiyi_produced();
  inline void clear_has_is_qiyi_produced();
  inline void set_has_song_name();
  inline void clear_has_song_name();
  inline void set_has_douban_score();
  inline void clear_has_douban_score();
  inline void set_has_is_available_for_channel_homepage();
  inline void clear_has_is_available_for_channel_homepage();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_play_platform();
  inline void clear_has_play_platform();
  inline void set_has_rc_order();
  inline void clear_has_rc_order();
  inline void set_has_play_source_id();
  inline void clear_has_play_source_id();
  inline void set_has_film_variety_type();
  inline void clear_has_film_variety_type();
  inline void set_has_sns_score();
  inline void clear_has_sns_score();
  inline void set_has_pps_wiki_score();
  inline void clear_has_pps_wiki_score();
  inline void set_has_original_id();
  inline void clear_has_original_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* description_;
  ::google::protobuf::int64 pps_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > multi_publish_;
  ::google::protobuf::int32 channel_id_;
  ::google::protobuf::int32 time_duration_;
  ::google::protobuf::int64 uploader_id_;
  ::google::protobuf::int64 final_time_;
  ::google::protobuf::int32 allowed_platform_;
  float quality_score_;
  ::std::string* signature_;
  int rating_;
  int danger_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> canonical_keyword_;
  int editor_recommend_level_;
  int content_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keyword_;
  ::google::protobuf::RepeatedPtrField< ::std::string> location_;
  ::google::protobuf::RepeatedPtrField< ::json::People > creator_;
  ::google::protobuf::RepeatedPtrField< ::json::People > main_contributor_;
  ::google::protobuf::RepeatedPtrField< ::json::People > support_contributor_;
  int feature_film_type_;
  bool is_domestic_only_;
  bool is_valid_;
  bool is_available_for_qiyihomepage_;
  bool is_latest_episode_;
  ::google::protobuf::RepeatedPtrField< ::json::ParentInfo > parent_video_group_;
  ::json::ParentInfo* parent_album_;
  ::google::protobuf::RepeatedPtrField< ::json::ParentInfo > parent_collection_;
  ::google::protobuf::RepeatedPtrField< ::json::ParentInfo > parent_official_episode_;
  ::google::protobuf::RepeatedPtrField< ::json::ChildInfo > children_episode_;
  ::google::protobuf::RepeatedPtrField< ::json::ChildInfo > children_prevue_;
  ::google::protobuf::RepeatedPtrField< ::json::ChildInfo > children_trailer_;
  ::google::protobuf::RepeatedPtrField< ::json::ChildInfo > children_titbit_;
  ::json::DisplayFields* display_fields_;
  ::google::protobuf::int64 douban_id_;
  ::google::protobuf::RepeatedPtrField< ::json::Slide > slides_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> political_sensitive_words_;
  ::google::protobuf::RepeatedPtrField< ::std::string> custom_tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> site_name_;
  ::google::protobuf::RepeatedPtrField< ::json::DetailedTag > detailed_tags_;
  ::google::protobuf::int32 allowed_platform_1_;
  bool is_qiyi_produced_;
  bool is_available_for_channel_homepage_;
  bool is_online_;
  ::std::string* song_name_;
  double douban_score_;
  ::google::protobuf::RepeatedPtrField< ::json::ChildInfo > children_clip_;
  ::google::protobuf::RepeatedPtrField< ::json::People > screen_writer_;
  ::google::protobuf::RepeatedPtrField< ::json::Topic > topics_;
  ::google::protobuf::int64 play_platform_;
  ::google::protobuf::RepeatedPtrField< ::json::PlayLocation > play_location_;
  ::google::protobuf::RepeatedPtrField< ::std::string> operating_tags_;
  ::google::protobuf::int32 rc_order_;
  int film_variety_type_;
  ::std::string* play_source_id_;
  double sns_score_;
  double pps_wiki_score_;
  ::google::protobuf::int64 original_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(62 + 31) / 32];

  friend void  protobuf_AddDesc_video_2eproto();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
  static Video* default_instance_;
};
// ===================================================================


// ===================================================================

// People

// optional int64 id = 1;
inline bool People::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void People::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void People::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void People::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 People::id() const {
  return id_;
}
inline void People::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool People::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void People::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void People::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void People::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& People::name() const {
  return *name_;
}
inline void People::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void People::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void People::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* People::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* People::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void People::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string character = 3;
inline int People::character_size() const {
  return character_.size();
}
inline void People::clear_character() {
  character_.Clear();
}
inline const ::std::string& People::character(int index) const {
  return character_.Get(index);
}
inline ::std::string* People::mutable_character(int index) {
  return character_.Mutable(index);
}
inline void People::set_character(int index, const ::std::string& value) {
  character_.Mutable(index)->assign(value);
}
inline void People::set_character(int index, const char* value) {
  character_.Mutable(index)->assign(value);
}
inline void People::set_character(int index, const char* value, size_t size) {
  character_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* People::add_character() {
  return character_.Add();
}
inline void People::add_character(const ::std::string& value) {
  character_.Add()->assign(value);
}
inline void People::add_character(const char* value) {
  character_.Add()->assign(value);
}
inline void People::add_character(const char* value, size_t size) {
  character_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
People::character() const {
  return character_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
People::mutable_character() {
  return &character_;
}

// -------------------------------------------------------------------

// ParentInfo

// optional int64 id = 1;
inline bool ParentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParentInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ParentInfo::id() const {
  return id_;
}
inline void ParentInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool ParentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParentInfo::name() const {
  return *name_;
}
inline void ParentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ParentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParentInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string picture_url = 3;
inline bool ParentInfo::has_picture_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParentInfo::set_has_picture_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParentInfo::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParentInfo::clear_picture_url() {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    picture_url_->clear();
  }
  clear_has_picture_url();
}
inline const ::std::string& ParentInfo::picture_url() const {
  return *picture_url_;
}
inline void ParentInfo::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void ParentInfo::set_picture_url(const char* value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void ParentInfo::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParentInfo::mutable_picture_url() {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  return picture_url_;
}
inline ::std::string* ParentInfo::release_picture_url() {
  clear_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_url_;
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParentInfo::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (picture_url) {
    set_has_picture_url();
    picture_url_ = picture_url;
  } else {
    clear_has_picture_url();
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string page_url = 4;
inline bool ParentInfo::has_page_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParentInfo::set_has_page_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParentInfo::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParentInfo::clear_page_url() {
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    page_url_->clear();
  }
  clear_has_page_url();
}
inline const ::std::string& ParentInfo::page_url() const {
  return *page_url_;
}
inline void ParentInfo::set_page_url(const ::std::string& value) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(value);
}
inline void ParentInfo::set_page_url(const char* value) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(value);
}
inline void ParentInfo::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParentInfo::mutable_page_url() {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  return page_url_;
}
inline ::std::string* ParentInfo::release_page_url() {
  clear_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_url_;
    page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParentInfo::set_allocated_page_url(::std::string* page_url) {
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    delete page_url_;
  }
  if (page_url) {
    set_has_page_url();
    page_url_ = page_url;
  } else {
    clear_has_page_url();
    page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double sns_score = 5;
inline bool ParentInfo::has_sns_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParentInfo::set_has_sns_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParentInfo::clear_has_sns_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParentInfo::clear_sns_score() {
  sns_score_ = 0;
  clear_has_sns_score();
}
inline double ParentInfo::sns_score() const {
  return sns_score_;
}
inline void ParentInfo::set_sns_score(double value) {
  set_has_sns_score();
  sns_score_ = value;
}

// optional double pps_wiki_score = 6;
inline bool ParentInfo::has_pps_wiki_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParentInfo::set_has_pps_wiki_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParentInfo::clear_has_pps_wiki_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParentInfo::clear_pps_wiki_score() {
  pps_wiki_score_ = 0;
  clear_has_pps_wiki_score();
}
inline double ParentInfo::pps_wiki_score() const {
  return pps_wiki_score_;
}
inline void ParentInfo::set_pps_wiki_score(double value) {
  set_has_pps_wiki_score();
  pps_wiki_score_ = value;
}

// -------------------------------------------------------------------

// ChildInfo

// optional int64 id = 1;
inline bool ChildInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChildInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChildInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChildInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ChildInfo::id() const {
  return id_;
}
inline void ChildInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 is_member_only = 2;
inline bool ChildInfo::has_is_member_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChildInfo::set_has_is_member_only() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChildInfo::clear_has_is_member_only() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChildInfo::clear_is_member_only() {
  is_member_only_ = 0;
  clear_has_is_member_only();
}
inline ::google::protobuf::int32 ChildInfo::is_member_only() const {
  return is_member_only_;
}
inline void ChildInfo::set_is_member_only(::google::protobuf::int32 value) {
  set_has_is_member_only();
  is_member_only_ = value;
}

// optional int32 purchase_type = 3;
inline bool ChildInfo::has_purchase_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChildInfo::set_has_purchase_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChildInfo::clear_has_purchase_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChildInfo::clear_purchase_type() {
  purchase_type_ = 0;
  clear_has_purchase_type();
}
inline ::google::protobuf::int32 ChildInfo::purchase_type() const {
  return purchase_type_;
}
inline void ChildInfo::set_purchase_type(::google::protobuf::int32 value) {
  set_has_purchase_type();
  purchase_type_ = value;
}

// -------------------------------------------------------------------

// Topic

// optional int64 id = 1;
inline bool Topic::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Topic::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Topic::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Topic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Topic::id() const {
  return id_;
}
inline void Topic::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// TagFeature

// optional string tag_value = 1;
inline bool TagFeature::has_tag_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagFeature::set_has_tag_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagFeature::clear_has_tag_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagFeature::clear_tag_value() {
  if (tag_value_ != &::google::protobuf::internal::kEmptyString) {
    tag_value_->clear();
  }
  clear_has_tag_value();
}
inline const ::std::string& TagFeature::tag_value() const {
  return *tag_value_;
}
inline void TagFeature::set_tag_value(const ::std::string& value) {
  set_has_tag_value();
  if (tag_value_ == &::google::protobuf::internal::kEmptyString) {
    tag_value_ = new ::std::string;
  }
  tag_value_->assign(value);
}
inline void TagFeature::set_tag_value(const char* value) {
  set_has_tag_value();
  if (tag_value_ == &::google::protobuf::internal::kEmptyString) {
    tag_value_ = new ::std::string;
  }
  tag_value_->assign(value);
}
inline void TagFeature::set_tag_value(const char* value, size_t size) {
  set_has_tag_value();
  if (tag_value_ == &::google::protobuf::internal::kEmptyString) {
    tag_value_ = new ::std::string;
  }
  tag_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagFeature::mutable_tag_value() {
  set_has_tag_value();
  if (tag_value_ == &::google::protobuf::internal::kEmptyString) {
    tag_value_ = new ::std::string;
  }
  return tag_value_;
}
inline ::std::string* TagFeature::release_tag_value() {
  clear_has_tag_value();
  if (tag_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_value_;
    tag_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagFeature::set_allocated_tag_value(::std::string* tag_value) {
  if (tag_value_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_value_;
  }
  if (tag_value) {
    set_has_tag_value();
    tag_value_ = tag_value;
  } else {
    clear_has_tag_value();
    tag_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 weight = 2;
inline bool TagFeature::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagFeature::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagFeature::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagFeature::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 TagFeature::weight() const {
  return weight_;
}
inline void TagFeature::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
}

// optional int32 level = 3;
inline bool TagFeature::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TagFeature::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TagFeature::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TagFeature::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TagFeature::level() const {
  return level_;
}
inline void TagFeature::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// DetailedTag

// optional string tag_type = 1;
inline bool DetailedTag::has_tag_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetailedTag::set_has_tag_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetailedTag::clear_has_tag_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetailedTag::clear_tag_type() {
  if (tag_type_ != &::google::protobuf::internal::kEmptyString) {
    tag_type_->clear();
  }
  clear_has_tag_type();
}
inline const ::std::string& DetailedTag::tag_type() const {
  return *tag_type_;
}
inline void DetailedTag::set_tag_type(const ::std::string& value) {
  set_has_tag_type();
  if (tag_type_ == &::google::protobuf::internal::kEmptyString) {
    tag_type_ = new ::std::string;
  }
  tag_type_->assign(value);
}
inline void DetailedTag::set_tag_type(const char* value) {
  set_has_tag_type();
  if (tag_type_ == &::google::protobuf::internal::kEmptyString) {
    tag_type_ = new ::std::string;
  }
  tag_type_->assign(value);
}
inline void DetailedTag::set_tag_type(const char* value, size_t size) {
  set_has_tag_type();
  if (tag_type_ == &::google::protobuf::internal::kEmptyString) {
    tag_type_ = new ::std::string;
  }
  tag_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedTag::mutable_tag_type() {
  set_has_tag_type();
  if (tag_type_ == &::google::protobuf::internal::kEmptyString) {
    tag_type_ = new ::std::string;
  }
  return tag_type_;
}
inline ::std::string* DetailedTag::release_tag_type() {
  clear_has_tag_type();
  if (tag_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_type_;
    tag_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailedTag::set_allocated_tag_type(::std::string* tag_type) {
  if (tag_type_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_type_;
  }
  if (tag_type) {
    set_has_tag_type();
    tag_type_ = tag_type;
  } else {
    clear_has_tag_type();
    tag_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string tag_values = 2;
inline int DetailedTag::tag_values_size() const {
  return tag_values_.size();
}
inline void DetailedTag::clear_tag_values() {
  tag_values_.Clear();
}
inline const ::std::string& DetailedTag::tag_values(int index) const {
  return tag_values_.Get(index);
}
inline ::std::string* DetailedTag::mutable_tag_values(int index) {
  return tag_values_.Mutable(index);
}
inline void DetailedTag::set_tag_values(int index, const ::std::string& value) {
  tag_values_.Mutable(index)->assign(value);
}
inline void DetailedTag::set_tag_values(int index, const char* value) {
  tag_values_.Mutable(index)->assign(value);
}
inline void DetailedTag::set_tag_values(int index, const char* value, size_t size) {
  tag_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedTag::add_tag_values() {
  return tag_values_.Add();
}
inline void DetailedTag::add_tag_values(const ::std::string& value) {
  tag_values_.Add()->assign(value);
}
inline void DetailedTag::add_tag_values(const char* value) {
  tag_values_.Add()->assign(value);
}
inline void DetailedTag::add_tag_values(const char* value, size_t size) {
  tag_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DetailedTag::tag_values() const {
  return tag_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DetailedTag::mutable_tag_values() {
  return &tag_values_;
}

// repeated .json.TagFeature tag_features = 3;
inline int DetailedTag::tag_features_size() const {
  return tag_features_.size();
}
inline void DetailedTag::clear_tag_features() {
  tag_features_.Clear();
}
inline const ::json::TagFeature& DetailedTag::tag_features(int index) const {
  return tag_features_.Get(index);
}
inline ::json::TagFeature* DetailedTag::mutable_tag_features(int index) {
  return tag_features_.Mutable(index);
}
inline ::json::TagFeature* DetailedTag::add_tag_features() {
  return tag_features_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::TagFeature >&
DetailedTag::tag_features() const {
  return tag_features_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::TagFeature >*
DetailedTag::mutable_tag_features() {
  return &tag_features_;
}

// -------------------------------------------------------------------

// Slide

// optional string slide_url = 1;
inline bool Slide::has_slide_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Slide::set_has_slide_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Slide::clear_has_slide_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Slide::clear_slide_url() {
  if (slide_url_ != &::google::protobuf::internal::kEmptyString) {
    slide_url_->clear();
  }
  clear_has_slide_url();
}
inline const ::std::string& Slide::slide_url() const {
  return *slide_url_;
}
inline void Slide::set_slide_url(const ::std::string& value) {
  set_has_slide_url();
  if (slide_url_ == &::google::protobuf::internal::kEmptyString) {
    slide_url_ = new ::std::string;
  }
  slide_url_->assign(value);
}
inline void Slide::set_slide_url(const char* value) {
  set_has_slide_url();
  if (slide_url_ == &::google::protobuf::internal::kEmptyString) {
    slide_url_ = new ::std::string;
  }
  slide_url_->assign(value);
}
inline void Slide::set_slide_url(const char* value, size_t size) {
  set_has_slide_url();
  if (slide_url_ == &::google::protobuf::internal::kEmptyString) {
    slide_url_ = new ::std::string;
  }
  slide_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Slide::mutable_slide_url() {
  set_has_slide_url();
  if (slide_url_ == &::google::protobuf::internal::kEmptyString) {
    slide_url_ = new ::std::string;
  }
  return slide_url_;
}
inline ::std::string* Slide::release_slide_url() {
  clear_has_slide_url();
  if (slide_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = slide_url_;
    slide_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Slide::set_allocated_slide_url(::std::string* slide_url) {
  if (slide_url_ != &::google::protobuf::internal::kEmptyString) {
    delete slide_url_;
  }
  if (slide_url) {
    set_has_slide_url();
    slide_url_ = slide_url;
  } else {
    clear_has_slide_url();
    slide_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 2;
inline bool Slide::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Slide::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Slide::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Slide::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& Slide::platform() const {
  return *platform_;
}
inline void Slide::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void Slide::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void Slide::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Slide::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* Slide::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Slide::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 order = 3;
inline bool Slide::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Slide::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Slide::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Slide::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 Slide::order() const {
  return order_;
}
inline void Slide::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional string page_url = 4;
inline bool Slide::has_page_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Slide::set_has_page_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Slide::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Slide::clear_page_url() {
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    page_url_->clear();
  }
  clear_has_page_url();
}
inline const ::std::string& Slide::page_url() const {
  return *page_url_;
}
inline void Slide::set_page_url(const ::std::string& value) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(value);
}
inline void Slide::set_page_url(const char* value) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(value);
}
inline void Slide::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Slide::mutable_page_url() {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  return page_url_;
}
inline ::std::string* Slide::release_page_url() {
  clear_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_url_;
    page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Slide::set_allocated_page_url(::std::string* page_url) {
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    delete page_url_;
  }
  if (page_url) {
    set_has_page_url();
    page_url_ = page_url;
  } else {
    clear_has_page_url();
    page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 slide_final_time = 5;
inline bool Slide::has_slide_final_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Slide::set_has_slide_final_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Slide::clear_has_slide_final_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Slide::clear_slide_final_time() {
  slide_final_time_ = GOOGLE_LONGLONG(0);
  clear_has_slide_final_time();
}
inline ::google::protobuf::int64 Slide::slide_final_time() const {
  return slide_final_time_;
}
inline void Slide::set_slide_final_time(::google::protobuf::int64 value) {
  set_has_slide_final_time();
  slide_final_time_ = value;
}

// -------------------------------------------------------------------

// PlayLocation

// optional int32 play_platform = 1;
inline bool PlayLocation::has_play_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayLocation::set_has_play_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayLocation::clear_has_play_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayLocation::clear_play_platform() {
  play_platform_ = 0;
  clear_has_play_platform();
}
inline ::google::protobuf::int32 PlayLocation::play_platform() const {
  return play_platform_;
}
inline void PlayLocation::set_play_platform(::google::protobuf::int32 value) {
  set_has_play_platform();
  play_platform_ = value;
}

// optional bool is_whitelist = 2;
inline bool PlayLocation::has_is_whitelist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayLocation::set_has_is_whitelist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayLocation::clear_has_is_whitelist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayLocation::clear_is_whitelist() {
  is_whitelist_ = false;
  clear_has_is_whitelist();
}
inline bool PlayLocation::is_whitelist() const {
  return is_whitelist_;
}
inline void PlayLocation::set_is_whitelist(bool value) {
  set_has_is_whitelist();
  is_whitelist_ = value;
}

// repeated int32 continent = 3;
inline int PlayLocation::continent_size() const {
  return continent_.size();
}
inline void PlayLocation::clear_continent() {
  continent_.Clear();
}
inline ::google::protobuf::int32 PlayLocation::continent(int index) const {
  return continent_.Get(index);
}
inline void PlayLocation::set_continent(int index, ::google::protobuf::int32 value) {
  continent_.Set(index, value);
}
inline void PlayLocation::add_continent(::google::protobuf::int32 value) {
  continent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayLocation::continent() const {
  return continent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayLocation::mutable_continent() {
  return &continent_;
}

// repeated int32 country = 4;
inline int PlayLocation::country_size() const {
  return country_.size();
}
inline void PlayLocation::clear_country() {
  country_.Clear();
}
inline ::google::protobuf::int32 PlayLocation::country(int index) const {
  return country_.Get(index);
}
inline void PlayLocation::set_country(int index, ::google::protobuf::int32 value) {
  country_.Set(index, value);
}
inline void PlayLocation::add_country(::google::protobuf::int32 value) {
  country_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayLocation::country() const {
  return country_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayLocation::mutable_country() {
  return &country_;
}

// repeated int32 province = 5;
inline int PlayLocation::province_size() const {
  return province_.size();
}
inline void PlayLocation::clear_province() {
  province_.Clear();
}
inline ::google::protobuf::int32 PlayLocation::province(int index) const {
  return province_.Get(index);
}
inline void PlayLocation::set_province(int index, ::google::protobuf::int32 value) {
  province_.Set(index, value);
}
inline void PlayLocation::add_province(::google::protobuf::int32 value) {
  province_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayLocation::province() const {
  return province_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayLocation::mutable_province() {
  return &province_;
}

// repeated int32 city = 6;
inline int PlayLocation::city_size() const {
  return city_.size();
}
inline void PlayLocation::clear_city() {
  city_.Clear();
}
inline ::google::protobuf::int32 PlayLocation::city(int index) const {
  return city_.Get(index);
}
inline void PlayLocation::set_city(int index, ::google::protobuf::int32 value) {
  city_.Set(index, value);
}
inline void PlayLocation::add_city(::google::protobuf::int32 value) {
  city_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayLocation::city() const {
  return city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayLocation::mutable_city() {
  return &city_;
}

// repeated int32 county = 7;
inline int PlayLocation::county_size() const {
  return county_.size();
}
inline void PlayLocation::clear_county() {
  county_.Clear();
}
inline ::google::protobuf::int32 PlayLocation::county(int index) const {
  return county_.Get(index);
}
inline void PlayLocation::set_county(int index, ::google::protobuf::int32 value) {
  county_.Set(index, value);
}
inline void PlayLocation::add_county(::google::protobuf::int32 value) {
  county_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayLocation::county() const {
  return county_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayLocation::mutable_county() {
  return &county_;
}

// repeated int32 area = 8;
inline int PlayLocation::area_size() const {
  return area_.size();
}
inline void PlayLocation::clear_area() {
  area_.Clear();
}
inline ::google::protobuf::int32 PlayLocation::area(int index) const {
  return area_.Get(index);
}
inline void PlayLocation::set_area(int index, ::google::protobuf::int32 value) {
  area_.Set(index, value);
}
inline void PlayLocation::add_area(::google::protobuf::int32 value) {
  area_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayLocation::area() const {
  return area_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayLocation::mutable_area() {
  return &area_;
}

// -------------------------------------------------------------------

// DisplayFields

// optional int64 album_id = 1;
inline bool DisplayFields::has_album_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayFields::set_has_album_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisplayFields::clear_has_album_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisplayFields::clear_album_id() {
  album_id_ = GOOGLE_LONGLONG(0);
  clear_has_album_id();
}
inline ::google::protobuf::int64 DisplayFields::album_id() const {
  return album_id_;
}
inline void DisplayFields::set_album_id(::google::protobuf::int64 value) {
  set_has_album_id();
  album_id_ = value;
}

// optional int64 tv_id = 2;
inline bool DisplayFields::has_tv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayFields::set_has_tv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisplayFields::clear_has_tv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisplayFields::clear_tv_id() {
  tv_id_ = GOOGLE_LONGLONG(0);
  clear_has_tv_id();
}
inline ::google::protobuf::int64 DisplayFields::tv_id() const {
  return tv_id_;
}
inline void DisplayFields::set_tv_id(::google::protobuf::int64 value) {
  set_has_tv_id();
  tv_id_ = value;
}

// optional string vid = 3;
inline bool DisplayFields::has_vid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisplayFields::set_has_vid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DisplayFields::clear_has_vid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DisplayFields::clear_vid() {
  if (vid_ != &::google::protobuf::internal::kEmptyString) {
    vid_->clear();
  }
  clear_has_vid();
}
inline const ::std::string& DisplayFields::vid() const {
  return *vid_;
}
inline void DisplayFields::set_vid(const ::std::string& value) {
  set_has_vid();
  if (vid_ == &::google::protobuf::internal::kEmptyString) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void DisplayFields::set_vid(const char* value) {
  set_has_vid();
  if (vid_ == &::google::protobuf::internal::kEmptyString) {
    vid_ = new ::std::string;
  }
  vid_->assign(value);
}
inline void DisplayFields::set_vid(const char* value, size_t size) {
  set_has_vid();
  if (vid_ == &::google::protobuf::internal::kEmptyString) {
    vid_ = new ::std::string;
  }
  vid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_vid() {
  set_has_vid();
  if (vid_ == &::google::protobuf::internal::kEmptyString) {
    vid_ = new ::std::string;
  }
  return vid_;
}
inline ::std::string* DisplayFields::release_vid() {
  clear_has_vid();
  if (vid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vid_;
    vid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_vid(::std::string* vid) {
  if (vid_ != &::google::protobuf::internal::kEmptyString) {
    delete vid_;
  }
  if (vid) {
    set_has_vid();
    vid_ = vid;
  } else {
    clear_has_vid();
    vid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string short_title = 4;
inline bool DisplayFields::has_short_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisplayFields::set_has_short_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DisplayFields::clear_has_short_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DisplayFields::clear_short_title() {
  if (short_title_ != &::google::protobuf::internal::kEmptyString) {
    short_title_->clear();
  }
  clear_has_short_title();
}
inline const ::std::string& DisplayFields::short_title() const {
  return *short_title_;
}
inline void DisplayFields::set_short_title(const ::std::string& value) {
  set_has_short_title();
  if (short_title_ == &::google::protobuf::internal::kEmptyString) {
    short_title_ = new ::std::string;
  }
  short_title_->assign(value);
}
inline void DisplayFields::set_short_title(const char* value) {
  set_has_short_title();
  if (short_title_ == &::google::protobuf::internal::kEmptyString) {
    short_title_ = new ::std::string;
  }
  short_title_->assign(value);
}
inline void DisplayFields::set_short_title(const char* value, size_t size) {
  set_has_short_title();
  if (short_title_ == &::google::protobuf::internal::kEmptyString) {
    short_title_ = new ::std::string;
  }
  short_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_short_title() {
  set_has_short_title();
  if (short_title_ == &::google::protobuf::internal::kEmptyString) {
    short_title_ = new ::std::string;
  }
  return short_title_;
}
inline ::std::string* DisplayFields::release_short_title() {
  clear_has_short_title();
  if (short_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = short_title_;
    short_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_short_title(::std::string* short_title) {
  if (short_title_ != &::google::protobuf::internal::kEmptyString) {
    delete short_title_;
  }
  if (short_title) {
    set_has_short_title();
    short_title_ = short_title;
  } else {
    clear_has_short_title();
    short_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source_name = 5;
inline bool DisplayFields::has_source_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DisplayFields::set_has_source_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DisplayFields::clear_has_source_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DisplayFields::clear_source_name() {
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    source_name_->clear();
  }
  clear_has_source_name();
}
inline const ::std::string& DisplayFields::source_name() const {
  return *source_name_;
}
inline void DisplayFields::set_source_name(const ::std::string& value) {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(value);
}
inline void DisplayFields::set_source_name(const char* value) {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(value);
}
inline void DisplayFields::set_source_name(const char* value, size_t size) {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_source_name() {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  return source_name_;
}
inline ::std::string* DisplayFields::release_source_name() {
  clear_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_name_;
    source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_source_name(::std::string* source_name) {
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    delete source_name_;
  }
  if (source_name) {
    set_has_source_name();
    source_name_ = source_name;
  } else {
    clear_has_source_name();
    source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string page_url = 6;
inline bool DisplayFields::has_page_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DisplayFields::set_has_page_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DisplayFields::clear_has_page_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DisplayFields::clear_page_url() {
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    page_url_->clear();
  }
  clear_has_page_url();
}
inline const ::std::string& DisplayFields::page_url() const {
  return *page_url_;
}
inline void DisplayFields::set_page_url(const ::std::string& value) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(value);
}
inline void DisplayFields::set_page_url(const char* value) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(value);
}
inline void DisplayFields::set_page_url(const char* value, size_t size) {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  page_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_page_url() {
  set_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    page_url_ = new ::std::string;
  }
  return page_url_;
}
inline ::std::string* DisplayFields::release_page_url() {
  clear_has_page_url();
  if (page_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_url_;
    page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_page_url(::std::string* page_url) {
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    delete page_url_;
  }
  if (page_url) {
    set_has_page_url();
    page_url_ = page_url;
  } else {
    clear_has_page_url();
    page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string picture_url = 7;
inline bool DisplayFields::has_picture_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DisplayFields::set_has_picture_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DisplayFields::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DisplayFields::clear_picture_url() {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    picture_url_->clear();
  }
  clear_has_picture_url();
}
inline const ::std::string& DisplayFields::picture_url() const {
  return *picture_url_;
}
inline void DisplayFields::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void DisplayFields::set_picture_url(const char* value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void DisplayFields::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_picture_url() {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  return picture_url_;
}
inline ::std::string* DisplayFields::release_picture_url() {
  clear_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_url_;
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (picture_url) {
    set_has_picture_url();
    picture_url_ = picture_url;
  } else {
    clear_has_picture_url();
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 total_episode_num = 8;
inline bool DisplayFields::has_total_episode_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DisplayFields::set_has_total_episode_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DisplayFields::clear_has_total_episode_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DisplayFields::clear_total_episode_num() {
  total_episode_num_ = 0;
  clear_has_total_episode_num();
}
inline ::google::protobuf::int32 DisplayFields::total_episode_num() const {
  return total_episode_num_;
}
inline void DisplayFields::set_total_episode_num(::google::protobuf::int32 value) {
  set_has_total_episode_num();
  total_episode_num_ = value;
}

// optional string global_publish_date = 9;
inline bool DisplayFields::has_global_publish_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DisplayFields::set_has_global_publish_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DisplayFields::clear_has_global_publish_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DisplayFields::clear_global_publish_date() {
  if (global_publish_date_ != &::google::protobuf::internal::kEmptyString) {
    global_publish_date_->clear();
  }
  clear_has_global_publish_date();
}
inline const ::std::string& DisplayFields::global_publish_date() const {
  return *global_publish_date_;
}
inline void DisplayFields::set_global_publish_date(const ::std::string& value) {
  set_has_global_publish_date();
  if (global_publish_date_ == &::google::protobuf::internal::kEmptyString) {
    global_publish_date_ = new ::std::string;
  }
  global_publish_date_->assign(value);
}
inline void DisplayFields::set_global_publish_date(const char* value) {
  set_has_global_publish_date();
  if (global_publish_date_ == &::google::protobuf::internal::kEmptyString) {
    global_publish_date_ = new ::std::string;
  }
  global_publish_date_->assign(value);
}
inline void DisplayFields::set_global_publish_date(const char* value, size_t size) {
  set_has_global_publish_date();
  if (global_publish_date_ == &::google::protobuf::internal::kEmptyString) {
    global_publish_date_ = new ::std::string;
  }
  global_publish_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_global_publish_date() {
  set_has_global_publish_date();
  if (global_publish_date_ == &::google::protobuf::internal::kEmptyString) {
    global_publish_date_ = new ::std::string;
  }
  return global_publish_date_;
}
inline ::std::string* DisplayFields::release_global_publish_date() {
  clear_has_global_publish_date();
  if (global_publish_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = global_publish_date_;
    global_publish_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_global_publish_date(::std::string* global_publish_date) {
  if (global_publish_date_ != &::google::protobuf::internal::kEmptyString) {
    delete global_publish_date_;
  }
  if (global_publish_date) {
    set_has_global_publish_date();
    global_publish_date_ = global_publish_date;
  } else {
    clear_has_global_publish_date();
    global_publish_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string prompt_description = 10;
inline bool DisplayFields::has_prompt_description() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DisplayFields::set_has_prompt_description() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DisplayFields::clear_has_prompt_description() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DisplayFields::clear_prompt_description() {
  if (prompt_description_ != &::google::protobuf::internal::kEmptyString) {
    prompt_description_->clear();
  }
  clear_has_prompt_description();
}
inline const ::std::string& DisplayFields::prompt_description() const {
  return *prompt_description_;
}
inline void DisplayFields::set_prompt_description(const ::std::string& value) {
  set_has_prompt_description();
  if (prompt_description_ == &::google::protobuf::internal::kEmptyString) {
    prompt_description_ = new ::std::string;
  }
  prompt_description_->assign(value);
}
inline void DisplayFields::set_prompt_description(const char* value) {
  set_has_prompt_description();
  if (prompt_description_ == &::google::protobuf::internal::kEmptyString) {
    prompt_description_ = new ::std::string;
  }
  prompt_description_->assign(value);
}
inline void DisplayFields::set_prompt_description(const char* value, size_t size) {
  set_has_prompt_description();
  if (prompt_description_ == &::google::protobuf::internal::kEmptyString) {
    prompt_description_ = new ::std::string;
  }
  prompt_description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_prompt_description() {
  set_has_prompt_description();
  if (prompt_description_ == &::google::protobuf::internal::kEmptyString) {
    prompt_description_ = new ::std::string;
  }
  return prompt_description_;
}
inline ::std::string* DisplayFields::release_prompt_description() {
  clear_has_prompt_description();
  if (prompt_description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prompt_description_;
    prompt_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_prompt_description(::std::string* prompt_description) {
  if (prompt_description_ != &::google::protobuf::internal::kEmptyString) {
    delete prompt_description_;
  }
  if (prompt_description) {
    set_has_prompt_description();
    prompt_description_ = prompt_description;
  } else {
    clear_has_prompt_description();
    prompt_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 is_member_only = 11;
inline bool DisplayFields::has_is_member_only() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DisplayFields::set_has_is_member_only() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DisplayFields::clear_has_is_member_only() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DisplayFields::clear_is_member_only() {
  is_member_only_ = 0;
  clear_has_is_member_only();
}
inline ::google::protobuf::int32 DisplayFields::is_member_only() const {
  return is_member_only_;
}
inline void DisplayFields::set_is_member_only(::google::protobuf::int32 value) {
  set_has_is_member_only();
  is_member_only_ = value;
}

// optional int32 is_download_allowed = 12;
inline bool DisplayFields::has_is_download_allowed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DisplayFields::set_has_is_download_allowed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DisplayFields::clear_has_is_download_allowed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DisplayFields::clear_is_download_allowed() {
  is_download_allowed_ = 0;
  clear_has_is_download_allowed();
}
inline ::google::protobuf::int32 DisplayFields::is_download_allowed() const {
  return is_download_allowed_;
}
inline void DisplayFields::set_is_download_allowed(::google::protobuf::int32 value) {
  set_has_is_download_allowed();
  is_download_allowed_ = value;
}

// optional int32 is_exclusive = 13;
inline bool DisplayFields::has_is_exclusive() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DisplayFields::set_has_is_exclusive() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DisplayFields::clear_has_is_exclusive() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DisplayFields::clear_is_exclusive() {
  is_exclusive_ = 0;
  clear_has_is_exclusive();
}
inline ::google::protobuf::int32 DisplayFields::is_exclusive() const {
  return is_exclusive_;
}
inline void DisplayFields::set_is_exclusive(::google::protobuf::int32 value) {
  set_has_is_exclusive();
  is_exclusive_ = value;
}

// optional string sub_title = 14;
inline bool DisplayFields::has_sub_title() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DisplayFields::set_has_sub_title() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DisplayFields::clear_has_sub_title() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DisplayFields::clear_sub_title() {
  if (sub_title_ != &::google::protobuf::internal::kEmptyString) {
    sub_title_->clear();
  }
  clear_has_sub_title();
}
inline const ::std::string& DisplayFields::sub_title() const {
  return *sub_title_;
}
inline void DisplayFields::set_sub_title(const ::std::string& value) {
  set_has_sub_title();
  if (sub_title_ == &::google::protobuf::internal::kEmptyString) {
    sub_title_ = new ::std::string;
  }
  sub_title_->assign(value);
}
inline void DisplayFields::set_sub_title(const char* value) {
  set_has_sub_title();
  if (sub_title_ == &::google::protobuf::internal::kEmptyString) {
    sub_title_ = new ::std::string;
  }
  sub_title_->assign(value);
}
inline void DisplayFields::set_sub_title(const char* value, size_t size) {
  set_has_sub_title();
  if (sub_title_ == &::google::protobuf::internal::kEmptyString) {
    sub_title_ = new ::std::string;
  }
  sub_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_sub_title() {
  set_has_sub_title();
  if (sub_title_ == &::google::protobuf::internal::kEmptyString) {
    sub_title_ = new ::std::string;
  }
  return sub_title_;
}
inline ::std::string* DisplayFields::release_sub_title() {
  clear_has_sub_title();
  if (sub_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sub_title_;
    sub_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_sub_title(::std::string* sub_title) {
  if (sub_title_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_title_;
  }
  if (sub_title) {
    set_has_sub_title();
    sub_title_ = sub_title;
  } else {
    clear_has_sub_title();
    sub_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string type = 15;
inline int DisplayFields::type_size() const {
  return type_.size();
}
inline void DisplayFields::clear_type() {
  type_.Clear();
}
inline const ::std::string& DisplayFields::type(int index) const {
  return type_.Get(index);
}
inline ::std::string* DisplayFields::mutable_type(int index) {
  return type_.Mutable(index);
}
inline void DisplayFields::set_type(int index, const ::std::string& value) {
  type_.Mutable(index)->assign(value);
}
inline void DisplayFields::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
}
inline void DisplayFields::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::add_type() {
  return type_.Add();
}
inline void DisplayFields::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
}
inline void DisplayFields::add_type(const char* value) {
  type_.Add()->assign(value);
}
inline void DisplayFields::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DisplayFields::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DisplayFields::mutable_type() {
  return &type_;
}

// optional int32 episode_order = 16;
inline bool DisplayFields::has_episode_order() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DisplayFields::set_has_episode_order() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DisplayFields::clear_has_episode_order() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DisplayFields::clear_episode_order() {
  episode_order_ = 0;
  clear_has_episode_order();
}
inline ::google::protobuf::int32 DisplayFields::episode_order() const {
  return episode_order_;
}
inline void DisplayFields::set_episode_order(::google::protobuf::int32 value) {
  set_has_episode_order();
  episode_order_ = value;
}

// optional int32 format_property = 17;
inline bool DisplayFields::has_format_property() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DisplayFields::set_has_format_property() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DisplayFields::clear_has_format_property() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DisplayFields::clear_format_property() {
  format_property_ = 0;
  clear_has_format_property();
}
inline ::google::protobuf::int32 DisplayFields::format_property() const {
  return format_property_;
}
inline void DisplayFields::set_format_property(::google::protobuf::int32 value) {
  set_has_format_property();
  format_property_ = value;
}

// optional int64 qipu_id = 18;
inline bool DisplayFields::has_qipu_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DisplayFields::set_has_qipu_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DisplayFields::clear_has_qipu_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DisplayFields::clear_qipu_id() {
  qipu_id_ = GOOGLE_LONGLONG(0);
  clear_has_qipu_id();
}
inline ::google::protobuf::int64 DisplayFields::qipu_id() const {
  return qipu_id_;
}
inline void DisplayFields::set_qipu_id(::google::protobuf::int64 value) {
  set_has_qipu_id();
  qipu_id_ = value;
}

// optional int64 display_play_count = 19;
inline bool DisplayFields::has_display_play_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DisplayFields::set_has_display_play_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DisplayFields::clear_has_display_play_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DisplayFields::clear_display_play_count() {
  display_play_count_ = GOOGLE_LONGLONG(0);
  clear_has_display_play_count();
}
inline ::google::protobuf::int64 DisplayFields::display_play_count() const {
  return display_play_count_;
}
inline void DisplayFields::set_display_play_count(::google::protobuf::int64 value) {
  set_has_display_play_count();
  display_play_count_ = value;
}

// optional int64 play_count = 20;
inline bool DisplayFields::has_play_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DisplayFields::set_has_play_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DisplayFields::clear_has_play_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DisplayFields::clear_play_count() {
  play_count_ = GOOGLE_LONGLONG(0);
  clear_has_play_count();
}
inline ::google::protobuf::int64 DisplayFields::play_count() const {
  return play_count_;
}
inline void DisplayFields::set_play_count(::google::protobuf::int64 value) {
  set_has_play_count();
  play_count_ = value;
}

// optional int64 comments_count = 21;
inline bool DisplayFields::has_comments_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DisplayFields::set_has_comments_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DisplayFields::clear_has_comments_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DisplayFields::clear_comments_count() {
  comments_count_ = GOOGLE_LONGLONG(0);
  clear_has_comments_count();
}
inline ::google::protobuf::int64 DisplayFields::comments_count() const {
  return comments_count_;
}
inline void DisplayFields::set_comments_count(::google::protobuf::int64 value) {
  set_has_comments_count();
  comments_count_ = value;
}

// optional int64 up_count = 22;
inline bool DisplayFields::has_up_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DisplayFields::set_has_up_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DisplayFields::clear_has_up_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DisplayFields::clear_up_count() {
  up_count_ = GOOGLE_LONGLONG(0);
  clear_has_up_count();
}
inline ::google::protobuf::int64 DisplayFields::up_count() const {
  return up_count_;
}
inline void DisplayFields::set_up_count(::google::protobuf::int64 value) {
  set_has_up_count();
  up_count_ = value;
}

// optional int64 down_count = 23;
inline bool DisplayFields::has_down_count() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DisplayFields::set_has_down_count() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DisplayFields::clear_has_down_count() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DisplayFields::clear_down_count() {
  down_count_ = GOOGLE_LONGLONG(0);
  clear_has_down_count();
}
inline ::google::protobuf::int64 DisplayFields::down_count() const {
  return down_count_;
}
inline void DisplayFields::set_down_count(::google::protobuf::int64 value) {
  set_has_down_count();
  down_count_ = value;
}

// optional string latest_episode = 24;
inline bool DisplayFields::has_latest_episode() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DisplayFields::set_has_latest_episode() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DisplayFields::clear_has_latest_episode() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DisplayFields::clear_latest_episode() {
  if (latest_episode_ != &::google::protobuf::internal::kEmptyString) {
    latest_episode_->clear();
  }
  clear_has_latest_episode();
}
inline const ::std::string& DisplayFields::latest_episode() const {
  return *latest_episode_;
}
inline void DisplayFields::set_latest_episode(const ::std::string& value) {
  set_has_latest_episode();
  if (latest_episode_ == &::google::protobuf::internal::kEmptyString) {
    latest_episode_ = new ::std::string;
  }
  latest_episode_->assign(value);
}
inline void DisplayFields::set_latest_episode(const char* value) {
  set_has_latest_episode();
  if (latest_episode_ == &::google::protobuf::internal::kEmptyString) {
    latest_episode_ = new ::std::string;
  }
  latest_episode_->assign(value);
}
inline void DisplayFields::set_latest_episode(const char* value, size_t size) {
  set_has_latest_episode();
  if (latest_episode_ == &::google::protobuf::internal::kEmptyString) {
    latest_episode_ = new ::std::string;
  }
  latest_episode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_latest_episode() {
  set_has_latest_episode();
  if (latest_episode_ == &::google::protobuf::internal::kEmptyString) {
    latest_episode_ = new ::std::string;
  }
  return latest_episode_;
}
inline ::std::string* DisplayFields::release_latest_episode() {
  clear_has_latest_episode();
  if (latest_episode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latest_episode_;
    latest_episode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_latest_episode(::std::string* latest_episode) {
  if (latest_episode_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_episode_;
  }
  if (latest_episode) {
    set_has_latest_episode();
    latest_episode_ = latest_episode;
  } else {
    clear_has_latest_episode();
    latest_episode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pps_p2p_url = 25;
inline bool DisplayFields::has_pps_p2p_url() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DisplayFields::set_has_pps_p2p_url() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DisplayFields::clear_has_pps_p2p_url() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DisplayFields::clear_pps_p2p_url() {
  if (pps_p2p_url_ != &::google::protobuf::internal::kEmptyString) {
    pps_p2p_url_->clear();
  }
  clear_has_pps_p2p_url();
}
inline const ::std::string& DisplayFields::pps_p2p_url() const {
  return *pps_p2p_url_;
}
inline void DisplayFields::set_pps_p2p_url(const ::std::string& value) {
  set_has_pps_p2p_url();
  if (pps_p2p_url_ == &::google::protobuf::internal::kEmptyString) {
    pps_p2p_url_ = new ::std::string;
  }
  pps_p2p_url_->assign(value);
}
inline void DisplayFields::set_pps_p2p_url(const char* value) {
  set_has_pps_p2p_url();
  if (pps_p2p_url_ == &::google::protobuf::internal::kEmptyString) {
    pps_p2p_url_ = new ::std::string;
  }
  pps_p2p_url_->assign(value);
}
inline void DisplayFields::set_pps_p2p_url(const char* value, size_t size) {
  set_has_pps_p2p_url();
  if (pps_p2p_url_ == &::google::protobuf::internal::kEmptyString) {
    pps_p2p_url_ = new ::std::string;
  }
  pps_p2p_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_pps_p2p_url() {
  set_has_pps_p2p_url();
  if (pps_p2p_url_ == &::google::protobuf::internal::kEmptyString) {
    pps_p2p_url_ = new ::std::string;
  }
  return pps_p2p_url_;
}
inline ::std::string* DisplayFields::release_pps_p2p_url() {
  clear_has_pps_p2p_url();
  if (pps_p2p_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pps_p2p_url_;
    pps_p2p_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_pps_p2p_url(::std::string* pps_p2p_url) {
  if (pps_p2p_url_ != &::google::protobuf::internal::kEmptyString) {
    delete pps_p2p_url_;
  }
  if (pps_p2p_url) {
    set_has_pps_p2p_url();
    pps_p2p_url_ = pps_p2p_url;
  } else {
    clear_has_pps_p2p_url();
    pps_p2p_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string poster_url = 26;
inline bool DisplayFields::has_poster_url() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DisplayFields::set_has_poster_url() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DisplayFields::clear_has_poster_url() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DisplayFields::clear_poster_url() {
  if (poster_url_ != &::google::protobuf::internal::kEmptyString) {
    poster_url_->clear();
  }
  clear_has_poster_url();
}
inline const ::std::string& DisplayFields::poster_url() const {
  return *poster_url_;
}
inline void DisplayFields::set_poster_url(const ::std::string& value) {
  set_has_poster_url();
  if (poster_url_ == &::google::protobuf::internal::kEmptyString) {
    poster_url_ = new ::std::string;
  }
  poster_url_->assign(value);
}
inline void DisplayFields::set_poster_url(const char* value) {
  set_has_poster_url();
  if (poster_url_ == &::google::protobuf::internal::kEmptyString) {
    poster_url_ = new ::std::string;
  }
  poster_url_->assign(value);
}
inline void DisplayFields::set_poster_url(const char* value, size_t size) {
  set_has_poster_url();
  if (poster_url_ == &::google::protobuf::internal::kEmptyString) {
    poster_url_ = new ::std::string;
  }
  poster_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_poster_url() {
  set_has_poster_url();
  if (poster_url_ == &::google::protobuf::internal::kEmptyString) {
    poster_url_ = new ::std::string;
  }
  return poster_url_;
}
inline ::std::string* DisplayFields::release_poster_url() {
  clear_has_poster_url();
  if (poster_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poster_url_;
    poster_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_poster_url(::std::string* poster_url) {
  if (poster_url_ != &::google::protobuf::internal::kEmptyString) {
    delete poster_url_;
  }
  if (poster_url) {
    set_has_poster_url();
    poster_url_ = poster_url;
  } else {
    clear_has_poster_url();
    poster_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 purchase_type = 27;
inline bool DisplayFields::has_purchase_type() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DisplayFields::set_has_purchase_type() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DisplayFields::clear_has_purchase_type() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DisplayFields::clear_purchase_type() {
  purchase_type_ = 0;
  clear_has_purchase_type();
}
inline ::google::protobuf::int32 DisplayFields::purchase_type() const {
  return purchase_type_;
}
inline void DisplayFields::set_purchase_type(::google::protobuf::int32 value) {
  set_has_purchase_type();
  purchase_type_ = value;
}

// optional string id_url_hashcode = 28;
inline bool DisplayFields::has_id_url_hashcode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DisplayFields::set_has_id_url_hashcode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DisplayFields::clear_has_id_url_hashcode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DisplayFields::clear_id_url_hashcode() {
  if (id_url_hashcode_ != &::google::protobuf::internal::kEmptyString) {
    id_url_hashcode_->clear();
  }
  clear_has_id_url_hashcode();
}
inline const ::std::string& DisplayFields::id_url_hashcode() const {
  return *id_url_hashcode_;
}
inline void DisplayFields::set_id_url_hashcode(const ::std::string& value) {
  set_has_id_url_hashcode();
  if (id_url_hashcode_ == &::google::protobuf::internal::kEmptyString) {
    id_url_hashcode_ = new ::std::string;
  }
  id_url_hashcode_->assign(value);
}
inline void DisplayFields::set_id_url_hashcode(const char* value) {
  set_has_id_url_hashcode();
  if (id_url_hashcode_ == &::google::protobuf::internal::kEmptyString) {
    id_url_hashcode_ = new ::std::string;
  }
  id_url_hashcode_->assign(value);
}
inline void DisplayFields::set_id_url_hashcode(const char* value, size_t size) {
  set_has_id_url_hashcode();
  if (id_url_hashcode_ == &::google::protobuf::internal::kEmptyString) {
    id_url_hashcode_ = new ::std::string;
  }
  id_url_hashcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisplayFields::mutable_id_url_hashcode() {
  set_has_id_url_hashcode();
  if (id_url_hashcode_ == &::google::protobuf::internal::kEmptyString) {
    id_url_hashcode_ = new ::std::string;
  }
  return id_url_hashcode_;
}
inline ::std::string* DisplayFields::release_id_url_hashcode() {
  clear_has_id_url_hashcode();
  if (id_url_hashcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_url_hashcode_;
    id_url_hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisplayFields::set_allocated_id_url_hashcode(::std::string* id_url_hashcode) {
  if (id_url_hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete id_url_hashcode_;
  }
  if (id_url_hashcode) {
    set_has_id_url_hashcode();
    id_url_hashcode_ = id_url_hashcode;
  } else {
    clear_has_id_url_hashcode();
    id_url_hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 season = 29;
inline bool DisplayFields::has_season() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DisplayFields::set_has_season() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DisplayFields::clear_has_season() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DisplayFields::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 DisplayFields::season() const {
  return season_;
}
inline void DisplayFields::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// optional int32 phase = 30;
inline bool DisplayFields::has_phase() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DisplayFields::set_has_phase() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DisplayFields::clear_has_phase() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DisplayFields::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 DisplayFields::phase() const {
  return phase_;
}
inline void DisplayFields::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
}

// optional int64 latest_episode_id = 31;
inline bool DisplayFields::has_latest_episode_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void DisplayFields::set_has_latest_episode_id() {
  _has_bits_[0] |= 0x40000000u;
}
inline void DisplayFields::clear_has_latest_episode_id() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void DisplayFields::clear_latest_episode_id() {
  latest_episode_id_ = GOOGLE_LONGLONG(0);
  clear_has_latest_episode_id();
}
inline ::google::protobuf::int64 DisplayFields::latest_episode_id() const {
  return latest_episode_id_;
}
inline void DisplayFields::set_latest_episode_id(::google::protobuf::int64 value) {
  set_has_latest_episode_id();
  latest_episode_id_ = value;
}

// optional int32 is_boss_mixer = 32;
inline bool DisplayFields::has_is_boss_mixer() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void DisplayFields::set_has_is_boss_mixer() {
  _has_bits_[0] |= 0x80000000u;
}
inline void DisplayFields::clear_has_is_boss_mixer() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void DisplayFields::clear_is_boss_mixer() {
  is_boss_mixer_ = 0;
  clear_has_is_boss_mixer();
}
inline ::google::protobuf::int32 DisplayFields::is_boss_mixer() const {
  return is_boss_mixer_;
}
inline void DisplayFields::set_is_boss_mixer(::google::protobuf::int32 value) {
  set_has_is_boss_mixer();
  is_boss_mixer_ = value;
}

// -------------------------------------------------------------------

// Video

// optional int64 id = 1;
inline bool Video::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Video::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Video::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Video::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Video::id() const {
  return id_;
}
inline void Video::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Video::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Video::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Video::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Video::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Video::name() const {
  return *name_;
}
inline void Video::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Video::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Video::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Video::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Video::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 3;
inline bool Video::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Video::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Video::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Video::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Video::description() const {
  return *description_;
}
inline void Video::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Video::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Video::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Video::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Video::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 pps_id = 4;
inline bool Video::has_pps_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Video::set_has_pps_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Video::clear_has_pps_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Video::clear_pps_id() {
  pps_id_ = GOOGLE_LONGLONG(0);
  clear_has_pps_id();
}
inline ::google::protobuf::int64 Video::pps_id() const {
  return pps_id_;
}
inline void Video::set_pps_id(::google::protobuf::int64 value) {
  set_has_pps_id();
  pps_id_ = value;
}

// optional int32 channel_id = 5;
inline bool Video::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Video::set_has_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Video::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Video::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 Video::channel_id() const {
  return channel_id_;
}
inline void Video::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// repeated int64 multi_publish = 6;
inline int Video::multi_publish_size() const {
  return multi_publish_.size();
}
inline void Video::clear_multi_publish() {
  multi_publish_.Clear();
}
inline ::google::protobuf::int64 Video::multi_publish(int index) const {
  return multi_publish_.Get(index);
}
inline void Video::set_multi_publish(int index, ::google::protobuf::int64 value) {
  multi_publish_.Set(index, value);
}
inline void Video::add_multi_publish(::google::protobuf::int64 value) {
  multi_publish_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Video::multi_publish() const {
  return multi_publish_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Video::mutable_multi_publish() {
  return &multi_publish_;
}

// optional int64 uploader_id = 7;
inline bool Video::has_uploader_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Video::set_has_uploader_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Video::clear_has_uploader_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Video::clear_uploader_id() {
  uploader_id_ = GOOGLE_LONGLONG(0);
  clear_has_uploader_id();
}
inline ::google::protobuf::int64 Video::uploader_id() const {
  return uploader_id_;
}
inline void Video::set_uploader_id(::google::protobuf::int64 value) {
  set_has_uploader_id();
  uploader_id_ = value;
}

// optional int64 final_time = 8;
inline bool Video::has_final_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Video::set_has_final_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Video::clear_has_final_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Video::clear_final_time() {
  final_time_ = GOOGLE_LONGLONG(0);
  clear_has_final_time();
}
inline ::google::protobuf::int64 Video::final_time() const {
  return final_time_;
}
inline void Video::set_final_time(::google::protobuf::int64 value) {
  set_has_final_time();
  final_time_ = value;
}

// optional int32 time_duration = 9;
inline bool Video::has_time_duration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Video::set_has_time_duration() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Video::clear_has_time_duration() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Video::clear_time_duration() {
  time_duration_ = 0;
  clear_has_time_duration();
}
inline ::google::protobuf::int32 Video::time_duration() const {
  return time_duration_;
}
inline void Video::set_time_duration(::google::protobuf::int32 value) {
  set_has_time_duration();
  time_duration_ = value;
}

// optional int32 allowed_platform = 10;
inline bool Video::has_allowed_platform() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Video::set_has_allowed_platform() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Video::clear_has_allowed_platform() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Video::clear_allowed_platform() {
  allowed_platform_ = 0;
  clear_has_allowed_platform();
}
inline ::google::protobuf::int32 Video::allowed_platform() const {
  return allowed_platform_;
}
inline void Video::set_allowed_platform(::google::protobuf::int32 value) {
  set_has_allowed_platform();
  allowed_platform_ = value;
}

// optional bool is_domestic_only = 11;
inline bool Video::has_is_domestic_only() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Video::set_has_is_domestic_only() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Video::clear_has_is_domestic_only() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Video::clear_is_domestic_only() {
  is_domestic_only_ = false;
  clear_has_is_domestic_only();
}
inline bool Video::is_domestic_only() const {
  return is_domestic_only_;
}
inline void Video::set_is_domestic_only(bool value) {
  set_has_is_domestic_only();
  is_domestic_only_ = value;
}

// optional string signature = 12;
inline bool Video::has_signature() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Video::set_has_signature() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Video::clear_has_signature() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Video::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Video::signature() const {
  return *signature_;
}
inline void Video::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Video::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Video::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Video::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Video::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float quality_score = 13;
inline bool Video::has_quality_score() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Video::set_has_quality_score() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Video::clear_has_quality_score() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Video::clear_quality_score() {
  quality_score_ = 0;
  clear_has_quality_score();
}
inline float Video::quality_score() const {
  return quality_score_;
}
inline void Video::set_quality_score(float value) {
  set_has_quality_score();
  quality_score_ = value;
}

// optional bool is_valid = 14;
inline bool Video::has_is_valid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Video::set_has_is_valid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Video::clear_has_is_valid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Video::clear_is_valid() {
  is_valid_ = false;
  clear_has_is_valid();
}
inline bool Video::is_valid() const {
  return is_valid_;
}
inline void Video::set_is_valid(bool value) {
  set_has_is_valid();
  is_valid_ = value;
}

// optional .json.Video.RatingType rating = 15;
inline bool Video::has_rating() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Video::set_has_rating() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Video::clear_has_rating() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Video::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
inline ::json::Video_RatingType Video::rating() const {
  return static_cast< ::json::Video_RatingType >(rating_);
}
inline void Video::set_rating(::json::Video_RatingType value) {
  assert(::json::Video_RatingType_IsValid(value));
  set_has_rating();
  rating_ = value;
}

// optional .json.Video.DangerLevel danger_level = 16;
inline bool Video::has_danger_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Video::set_has_danger_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Video::clear_has_danger_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Video::clear_danger_level() {
  danger_level_ = 0;
  clear_has_danger_level();
}
inline ::json::Video_DangerLevel Video::danger_level() const {
  return static_cast< ::json::Video_DangerLevel >(danger_level_);
}
inline void Video::set_danger_level(::json::Video_DangerLevel value) {
  assert(::json::Video_DangerLevel_IsValid(value));
  set_has_danger_level();
  danger_level_ = value;
}

// optional .json.Video.EditorRecommendLevel editor_recommend_level = 17;
inline bool Video::has_editor_recommend_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Video::set_has_editor_recommend_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Video::clear_has_editor_recommend_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Video::clear_editor_recommend_level() {
  editor_recommend_level_ = 0;
  clear_has_editor_recommend_level();
}
inline ::json::Video_EditorRecommendLevel Video::editor_recommend_level() const {
  return static_cast< ::json::Video_EditorRecommendLevel >(editor_recommend_level_);
}
inline void Video::set_editor_recommend_level(::json::Video_EditorRecommendLevel value) {
  assert(::json::Video_EditorRecommendLevel_IsValid(value));
  set_has_editor_recommend_level();
  editor_recommend_level_ = value;
}

// repeated string tags = 18;
inline int Video::tags_size() const {
  return tags_.size();
}
inline void Video::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Video::tags(int index) const {
  return tags_.Get(index);
}
inline ::std::string* Video::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline void Video::set_tags(int index, const ::std::string& value) {
  tags_.Mutable(index)->assign(value);
}
inline void Video::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
}
inline void Video::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_tags() {
  return tags_.Add();
}
inline void Video::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
}
inline void Video::add_tags(const char* value) {
  tags_.Add()->assign(value);
}
inline void Video::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_tags() {
  return &tags_;
}

// repeated string canonical_keyword = 19;
inline int Video::canonical_keyword_size() const {
  return canonical_keyword_.size();
}
inline void Video::clear_canonical_keyword() {
  canonical_keyword_.Clear();
}
inline const ::std::string& Video::canonical_keyword(int index) const {
  return canonical_keyword_.Get(index);
}
inline ::std::string* Video::mutable_canonical_keyword(int index) {
  return canonical_keyword_.Mutable(index);
}
inline void Video::set_canonical_keyword(int index, const ::std::string& value) {
  canonical_keyword_.Mutable(index)->assign(value);
}
inline void Video::set_canonical_keyword(int index, const char* value) {
  canonical_keyword_.Mutable(index)->assign(value);
}
inline void Video::set_canonical_keyword(int index, const char* value, size_t size) {
  canonical_keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_canonical_keyword() {
  return canonical_keyword_.Add();
}
inline void Video::add_canonical_keyword(const ::std::string& value) {
  canonical_keyword_.Add()->assign(value);
}
inline void Video::add_canonical_keyword(const char* value) {
  canonical_keyword_.Add()->assign(value);
}
inline void Video::add_canonical_keyword(const char* value, size_t size) {
  canonical_keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::canonical_keyword() const {
  return canonical_keyword_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_canonical_keyword() {
  return &canonical_keyword_;
}

// repeated string keyword = 20;
inline int Video::keyword_size() const {
  return keyword_.size();
}
inline void Video::clear_keyword() {
  keyword_.Clear();
}
inline const ::std::string& Video::keyword(int index) const {
  return keyword_.Get(index);
}
inline ::std::string* Video::mutable_keyword(int index) {
  return keyword_.Mutable(index);
}
inline void Video::set_keyword(int index, const ::std::string& value) {
  keyword_.Mutable(index)->assign(value);
}
inline void Video::set_keyword(int index, const char* value) {
  keyword_.Mutable(index)->assign(value);
}
inline void Video::set_keyword(int index, const char* value, size_t size) {
  keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_keyword() {
  return keyword_.Add();
}
inline void Video::add_keyword(const ::std::string& value) {
  keyword_.Add()->assign(value);
}
inline void Video::add_keyword(const char* value) {
  keyword_.Add()->assign(value);
}
inline void Video::add_keyword(const char* value, size_t size) {
  keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::keyword() const {
  return keyword_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_keyword() {
  return &keyword_;
}

// optional .json.Video.ContentType content_type = 21;
inline bool Video::has_content_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Video::set_has_content_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Video::clear_has_content_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Video::clear_content_type() {
  content_type_ = 1;
  clear_has_content_type();
}
inline ::json::Video_ContentType Video::content_type() const {
  return static_cast< ::json::Video_ContentType >(content_type_);
}
inline void Video::set_content_type(::json::Video_ContentType value) {
  assert(::json::Video_ContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
}

// optional .json.Video.FeatureFilmType feature_film_type = 22;
inline bool Video::has_feature_film_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Video::set_has_feature_film_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Video::clear_has_feature_film_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Video::clear_feature_film_type() {
  feature_film_type_ = 0;
  clear_has_feature_film_type();
}
inline ::json::Video_FeatureFilmType Video::feature_film_type() const {
  return static_cast< ::json::Video_FeatureFilmType >(feature_film_type_);
}
inline void Video::set_feature_film_type(::json::Video_FeatureFilmType value) {
  assert(::json::Video_FeatureFilmType_IsValid(value));
  set_has_feature_film_type();
  feature_film_type_ = value;
}

// repeated string location = 23;
inline int Video::location_size() const {
  return location_.size();
}
inline void Video::clear_location() {
  location_.Clear();
}
inline const ::std::string& Video::location(int index) const {
  return location_.Get(index);
}
inline ::std::string* Video::mutable_location(int index) {
  return location_.Mutable(index);
}
inline void Video::set_location(int index, const ::std::string& value) {
  location_.Mutable(index)->assign(value);
}
inline void Video::set_location(int index, const char* value) {
  location_.Mutable(index)->assign(value);
}
inline void Video::set_location(int index, const char* value, size_t size) {
  location_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_location() {
  return location_.Add();
}
inline void Video::add_location(const ::std::string& value) {
  location_.Add()->assign(value);
}
inline void Video::add_location(const char* value) {
  location_.Add()->assign(value);
}
inline void Video::add_location(const char* value, size_t size) {
  location_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::location() const {
  return location_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_location() {
  return &location_;
}

// repeated .json.People creator = 24;
inline int Video::creator_size() const {
  return creator_.size();
}
inline void Video::clear_creator() {
  creator_.Clear();
}
inline const ::json::People& Video::creator(int index) const {
  return creator_.Get(index);
}
inline ::json::People* Video::mutable_creator(int index) {
  return creator_.Mutable(index);
}
inline ::json::People* Video::add_creator() {
  return creator_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
Video::creator() const {
  return creator_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::People >*
Video::mutable_creator() {
  return &creator_;
}

// repeated .json.People main_contributor = 25;
inline int Video::main_contributor_size() const {
  return main_contributor_.size();
}
inline void Video::clear_main_contributor() {
  main_contributor_.Clear();
}
inline const ::json::People& Video::main_contributor(int index) const {
  return main_contributor_.Get(index);
}
inline ::json::People* Video::mutable_main_contributor(int index) {
  return main_contributor_.Mutable(index);
}
inline ::json::People* Video::add_main_contributor() {
  return main_contributor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
Video::main_contributor() const {
  return main_contributor_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::People >*
Video::mutable_main_contributor() {
  return &main_contributor_;
}

// repeated .json.People support_contributor = 26;
inline int Video::support_contributor_size() const {
  return support_contributor_.size();
}
inline void Video::clear_support_contributor() {
  support_contributor_.Clear();
}
inline const ::json::People& Video::support_contributor(int index) const {
  return support_contributor_.Get(index);
}
inline ::json::People* Video::mutable_support_contributor(int index) {
  return support_contributor_.Mutable(index);
}
inline ::json::People* Video::add_support_contributor() {
  return support_contributor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
Video::support_contributor() const {
  return support_contributor_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::People >*
Video::mutable_support_contributor() {
  return &support_contributor_;
}

// repeated .json.ParentInfo parent_video_group = 27;
inline int Video::parent_video_group_size() const {
  return parent_video_group_.size();
}
inline void Video::clear_parent_video_group() {
  parent_video_group_.Clear();
}
inline const ::json::ParentInfo& Video::parent_video_group(int index) const {
  return parent_video_group_.Get(index);
}
inline ::json::ParentInfo* Video::mutable_parent_video_group(int index) {
  return parent_video_group_.Mutable(index);
}
inline ::json::ParentInfo* Video::add_parent_video_group() {
  return parent_video_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >&
Video::parent_video_group() const {
  return parent_video_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >*
Video::mutable_parent_video_group() {
  return &parent_video_group_;
}

// optional .json.ParentInfo parent_album = 28;
inline bool Video::has_parent_album() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Video::set_has_parent_album() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Video::clear_has_parent_album() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Video::clear_parent_album() {
  if (parent_album_ != NULL) parent_album_->::json::ParentInfo::Clear();
  clear_has_parent_album();
}
inline const ::json::ParentInfo& Video::parent_album() const {
  return parent_album_ != NULL ? *parent_album_ : *default_instance_->parent_album_;
}
inline ::json::ParentInfo* Video::mutable_parent_album() {
  set_has_parent_album();
  if (parent_album_ == NULL) parent_album_ = new ::json::ParentInfo;
  return parent_album_;
}
inline ::json::ParentInfo* Video::release_parent_album() {
  clear_has_parent_album();
  ::json::ParentInfo* temp = parent_album_;
  parent_album_ = NULL;
  return temp;
}
inline void Video::set_allocated_parent_album(::json::ParentInfo* parent_album) {
  delete parent_album_;
  parent_album_ = parent_album;
  if (parent_album) {
    set_has_parent_album();
  } else {
    clear_has_parent_album();
  }
}

// repeated .json.ParentInfo parent_collection = 29;
inline int Video::parent_collection_size() const {
  return parent_collection_.size();
}
inline void Video::clear_parent_collection() {
  parent_collection_.Clear();
}
inline const ::json::ParentInfo& Video::parent_collection(int index) const {
  return parent_collection_.Get(index);
}
inline ::json::ParentInfo* Video::mutable_parent_collection(int index) {
  return parent_collection_.Mutable(index);
}
inline ::json::ParentInfo* Video::add_parent_collection() {
  return parent_collection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >&
Video::parent_collection() const {
  return parent_collection_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >*
Video::mutable_parent_collection() {
  return &parent_collection_;
}

// repeated .json.ParentInfo parent_official_episode = 30;
inline int Video::parent_official_episode_size() const {
  return parent_official_episode_.size();
}
inline void Video::clear_parent_official_episode() {
  parent_official_episode_.Clear();
}
inline const ::json::ParentInfo& Video::parent_official_episode(int index) const {
  return parent_official_episode_.Get(index);
}
inline ::json::ParentInfo* Video::mutable_parent_official_episode(int index) {
  return parent_official_episode_.Mutable(index);
}
inline ::json::ParentInfo* Video::add_parent_official_episode() {
  return parent_official_episode_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >&
Video::parent_official_episode() const {
  return parent_official_episode_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ParentInfo >*
Video::mutable_parent_official_episode() {
  return &parent_official_episode_;
}

// repeated .json.ChildInfo children_episode = 31;
inline int Video::children_episode_size() const {
  return children_episode_.size();
}
inline void Video::clear_children_episode() {
  children_episode_.Clear();
}
inline const ::json::ChildInfo& Video::children_episode(int index) const {
  return children_episode_.Get(index);
}
inline ::json::ChildInfo* Video::mutable_children_episode(int index) {
  return children_episode_.Mutable(index);
}
inline ::json::ChildInfo* Video::add_children_episode() {
  return children_episode_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
Video::children_episode() const {
  return children_episode_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
Video::mutable_children_episode() {
  return &children_episode_;
}

// repeated .json.ChildInfo children_prevue = 32;
inline int Video::children_prevue_size() const {
  return children_prevue_.size();
}
inline void Video::clear_children_prevue() {
  children_prevue_.Clear();
}
inline const ::json::ChildInfo& Video::children_prevue(int index) const {
  return children_prevue_.Get(index);
}
inline ::json::ChildInfo* Video::mutable_children_prevue(int index) {
  return children_prevue_.Mutable(index);
}
inline ::json::ChildInfo* Video::add_children_prevue() {
  return children_prevue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
Video::children_prevue() const {
  return children_prevue_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
Video::mutable_children_prevue() {
  return &children_prevue_;
}

// repeated .json.ChildInfo children_trailer = 33;
inline int Video::children_trailer_size() const {
  return children_trailer_.size();
}
inline void Video::clear_children_trailer() {
  children_trailer_.Clear();
}
inline const ::json::ChildInfo& Video::children_trailer(int index) const {
  return children_trailer_.Get(index);
}
inline ::json::ChildInfo* Video::mutable_children_trailer(int index) {
  return children_trailer_.Mutable(index);
}
inline ::json::ChildInfo* Video::add_children_trailer() {
  return children_trailer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
Video::children_trailer() const {
  return children_trailer_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
Video::mutable_children_trailer() {
  return &children_trailer_;
}

// repeated .json.ChildInfo children_titbit = 34;
inline int Video::children_titbit_size() const {
  return children_titbit_.size();
}
inline void Video::clear_children_titbit() {
  children_titbit_.Clear();
}
inline const ::json::ChildInfo& Video::children_titbit(int index) const {
  return children_titbit_.Get(index);
}
inline ::json::ChildInfo* Video::mutable_children_titbit(int index) {
  return children_titbit_.Mutable(index);
}
inline ::json::ChildInfo* Video::add_children_titbit() {
  return children_titbit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
Video::children_titbit() const {
  return children_titbit_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
Video::mutable_children_titbit() {
  return &children_titbit_;
}

// optional .json.DisplayFields display_fields = 35;
inline bool Video::has_display_fields() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Video::set_has_display_fields() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Video::clear_has_display_fields() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Video::clear_display_fields() {
  if (display_fields_ != NULL) display_fields_->::json::DisplayFields::Clear();
  clear_has_display_fields();
}
inline const ::json::DisplayFields& Video::display_fields() const {
  return display_fields_ != NULL ? *display_fields_ : *default_instance_->display_fields_;
}
inline ::json::DisplayFields* Video::mutable_display_fields() {
  set_has_display_fields();
  if (display_fields_ == NULL) display_fields_ = new ::json::DisplayFields;
  return display_fields_;
}
inline ::json::DisplayFields* Video::release_display_fields() {
  clear_has_display_fields();
  ::json::DisplayFields* temp = display_fields_;
  display_fields_ = NULL;
  return temp;
}
inline void Video::set_allocated_display_fields(::json::DisplayFields* display_fields) {
  delete display_fields_;
  display_fields_ = display_fields;
  if (display_fields) {
    set_has_display_fields();
  } else {
    clear_has_display_fields();
  }
}

// optional int64 douban_id = 36;
inline bool Video::has_douban_id() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Video::set_has_douban_id() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Video::clear_has_douban_id() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Video::clear_douban_id() {
  douban_id_ = GOOGLE_LONGLONG(0);
  clear_has_douban_id();
}
inline ::google::protobuf::int64 Video::douban_id() const {
  return douban_id_;
}
inline void Video::set_douban_id(::google::protobuf::int64 value) {
  set_has_douban_id();
  douban_id_ = value;
}

// optional int32 allowed_platform_1 = 37;
inline bool Video::has_allowed_platform_1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Video::set_has_allowed_platform_1() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Video::clear_has_allowed_platform_1() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Video::clear_allowed_platform_1() {
  allowed_platform_1_ = 0;
  clear_has_allowed_platform_1();
}
inline ::google::protobuf::int32 Video::allowed_platform_1() const {
  return allowed_platform_1_;
}
inline void Video::set_allowed_platform_1(::google::protobuf::int32 value) {
  set_has_allowed_platform_1();
  allowed_platform_1_ = value;
}

// repeated .json.Slide slides = 38;
inline int Video::slides_size() const {
  return slides_.size();
}
inline void Video::clear_slides() {
  slides_.Clear();
}
inline const ::json::Slide& Video::slides(int index) const {
  return slides_.Get(index);
}
inline ::json::Slide* Video::mutable_slides(int index) {
  return slides_.Mutable(index);
}
inline ::json::Slide* Video::add_slides() {
  return slides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::Slide >&
Video::slides() const {
  return slides_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::Slide >*
Video::mutable_slides() {
  return &slides_;
}

// repeated string user_tags = 39;
inline int Video::user_tags_size() const {
  return user_tags_.size();
}
inline void Video::clear_user_tags() {
  user_tags_.Clear();
}
inline const ::std::string& Video::user_tags(int index) const {
  return user_tags_.Get(index);
}
inline ::std::string* Video::mutable_user_tags(int index) {
  return user_tags_.Mutable(index);
}
inline void Video::set_user_tags(int index, const ::std::string& value) {
  user_tags_.Mutable(index)->assign(value);
}
inline void Video::set_user_tags(int index, const char* value) {
  user_tags_.Mutable(index)->assign(value);
}
inline void Video::set_user_tags(int index, const char* value, size_t size) {
  user_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_user_tags() {
  return user_tags_.Add();
}
inline void Video::add_user_tags(const ::std::string& value) {
  user_tags_.Add()->assign(value);
}
inline void Video::add_user_tags(const char* value) {
  user_tags_.Add()->assign(value);
}
inline void Video::add_user_tags(const char* value, size_t size) {
  user_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::user_tags() const {
  return user_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_user_tags() {
  return &user_tags_;
}

// repeated string political_sensitive_words = 40;
inline int Video::political_sensitive_words_size() const {
  return political_sensitive_words_.size();
}
inline void Video::clear_political_sensitive_words() {
  political_sensitive_words_.Clear();
}
inline const ::std::string& Video::political_sensitive_words(int index) const {
  return political_sensitive_words_.Get(index);
}
inline ::std::string* Video::mutable_political_sensitive_words(int index) {
  return political_sensitive_words_.Mutable(index);
}
inline void Video::set_political_sensitive_words(int index, const ::std::string& value) {
  political_sensitive_words_.Mutable(index)->assign(value);
}
inline void Video::set_political_sensitive_words(int index, const char* value) {
  political_sensitive_words_.Mutable(index)->assign(value);
}
inline void Video::set_political_sensitive_words(int index, const char* value, size_t size) {
  political_sensitive_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_political_sensitive_words() {
  return political_sensitive_words_.Add();
}
inline void Video::add_political_sensitive_words(const ::std::string& value) {
  political_sensitive_words_.Add()->assign(value);
}
inline void Video::add_political_sensitive_words(const char* value) {
  political_sensitive_words_.Add()->assign(value);
}
inline void Video::add_political_sensitive_words(const char* value, size_t size) {
  political_sensitive_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::political_sensitive_words() const {
  return political_sensitive_words_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_political_sensitive_words() {
  return &political_sensitive_words_;
}

// repeated string custom_tags = 41;
inline int Video::custom_tags_size() const {
  return custom_tags_.size();
}
inline void Video::clear_custom_tags() {
  custom_tags_.Clear();
}
inline const ::std::string& Video::custom_tags(int index) const {
  return custom_tags_.Get(index);
}
inline ::std::string* Video::mutable_custom_tags(int index) {
  return custom_tags_.Mutable(index);
}
inline void Video::set_custom_tags(int index, const ::std::string& value) {
  custom_tags_.Mutable(index)->assign(value);
}
inline void Video::set_custom_tags(int index, const char* value) {
  custom_tags_.Mutable(index)->assign(value);
}
inline void Video::set_custom_tags(int index, const char* value, size_t size) {
  custom_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_custom_tags() {
  return custom_tags_.Add();
}
inline void Video::add_custom_tags(const ::std::string& value) {
  custom_tags_.Add()->assign(value);
}
inline void Video::add_custom_tags(const char* value) {
  custom_tags_.Add()->assign(value);
}
inline void Video::add_custom_tags(const char* value, size_t size) {
  custom_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::custom_tags() const {
  return custom_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_custom_tags() {
  return &custom_tags_;
}

// optional bool is_available_for_qiyihomepage = 42;
inline bool Video::has_is_available_for_qiyihomepage() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Video::set_has_is_available_for_qiyihomepage() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Video::clear_has_is_available_for_qiyihomepage() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Video::clear_is_available_for_qiyihomepage() {
  is_available_for_qiyihomepage_ = false;
  clear_has_is_available_for_qiyihomepage();
}
inline bool Video::is_available_for_qiyihomepage() const {
  return is_available_for_qiyihomepage_;
}
inline void Video::set_is_available_for_qiyihomepage(bool value) {
  set_has_is_available_for_qiyihomepage();
  is_available_for_qiyihomepage_ = value;
}

// repeated string site_name = 43;
inline int Video::site_name_size() const {
  return site_name_.size();
}
inline void Video::clear_site_name() {
  site_name_.Clear();
}
inline const ::std::string& Video::site_name(int index) const {
  return site_name_.Get(index);
}
inline ::std::string* Video::mutable_site_name(int index) {
  return site_name_.Mutable(index);
}
inline void Video::set_site_name(int index, const ::std::string& value) {
  site_name_.Mutable(index)->assign(value);
}
inline void Video::set_site_name(int index, const char* value) {
  site_name_.Mutable(index)->assign(value);
}
inline void Video::set_site_name(int index, const char* value, size_t size) {
  site_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_site_name() {
  return site_name_.Add();
}
inline void Video::add_site_name(const ::std::string& value) {
  site_name_.Add()->assign(value);
}
inline void Video::add_site_name(const char* value) {
  site_name_.Add()->assign(value);
}
inline void Video::add_site_name(const char* value, size_t size) {
  site_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::site_name() const {
  return site_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_site_name() {
  return &site_name_;
}

// optional bool is_latest_episode = 44;
inline bool Video::has_is_latest_episode() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Video::set_has_is_latest_episode() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Video::clear_has_is_latest_episode() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Video::clear_is_latest_episode() {
  is_latest_episode_ = false;
  clear_has_is_latest_episode();
}
inline bool Video::is_latest_episode() const {
  return is_latest_episode_;
}
inline void Video::set_is_latest_episode(bool value) {
  set_has_is_latest_episode();
  is_latest_episode_ = value;
}

// optional bool is_qiyi_produced = 45;
inline bool Video::has_is_qiyi_produced() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Video::set_has_is_qiyi_produced() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Video::clear_has_is_qiyi_produced() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Video::clear_is_qiyi_produced() {
  is_qiyi_produced_ = false;
  clear_has_is_qiyi_produced();
}
inline bool Video::is_qiyi_produced() const {
  return is_qiyi_produced_;
}
inline void Video::set_is_qiyi_produced(bool value) {
  set_has_is_qiyi_produced();
  is_qiyi_produced_ = value;
}

// repeated .json.DetailedTag detailed_tags = 46;
inline int Video::detailed_tags_size() const {
  return detailed_tags_.size();
}
inline void Video::clear_detailed_tags() {
  detailed_tags_.Clear();
}
inline const ::json::DetailedTag& Video::detailed_tags(int index) const {
  return detailed_tags_.Get(index);
}
inline ::json::DetailedTag* Video::mutable_detailed_tags(int index) {
  return detailed_tags_.Mutable(index);
}
inline ::json::DetailedTag* Video::add_detailed_tags() {
  return detailed_tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::DetailedTag >&
Video::detailed_tags() const {
  return detailed_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::DetailedTag >*
Video::mutable_detailed_tags() {
  return &detailed_tags_;
}

// optional string song_name = 47;
inline bool Video::has_song_name() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Video::set_has_song_name() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Video::clear_has_song_name() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Video::clear_song_name() {
  if (song_name_ != &::google::protobuf::internal::kEmptyString) {
    song_name_->clear();
  }
  clear_has_song_name();
}
inline const ::std::string& Video::song_name() const {
  return *song_name_;
}
inline void Video::set_song_name(const ::std::string& value) {
  set_has_song_name();
  if (song_name_ == &::google::protobuf::internal::kEmptyString) {
    song_name_ = new ::std::string;
  }
  song_name_->assign(value);
}
inline void Video::set_song_name(const char* value) {
  set_has_song_name();
  if (song_name_ == &::google::protobuf::internal::kEmptyString) {
    song_name_ = new ::std::string;
  }
  song_name_->assign(value);
}
inline void Video::set_song_name(const char* value, size_t size) {
  set_has_song_name();
  if (song_name_ == &::google::protobuf::internal::kEmptyString) {
    song_name_ = new ::std::string;
  }
  song_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::mutable_song_name() {
  set_has_song_name();
  if (song_name_ == &::google::protobuf::internal::kEmptyString) {
    song_name_ = new ::std::string;
  }
  return song_name_;
}
inline ::std::string* Video::release_song_name() {
  clear_has_song_name();
  if (song_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = song_name_;
    song_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Video::set_allocated_song_name(::std::string* song_name) {
  if (song_name_ != &::google::protobuf::internal::kEmptyString) {
    delete song_name_;
  }
  if (song_name) {
    set_has_song_name();
    song_name_ = song_name;
  } else {
    clear_has_song_name();
    song_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double douban_score = 48;
inline bool Video::has_douban_score() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Video::set_has_douban_score() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Video::clear_has_douban_score() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Video::clear_douban_score() {
  douban_score_ = 0;
  clear_has_douban_score();
}
inline double Video::douban_score() const {
  return douban_score_;
}
inline void Video::set_douban_score(double value) {
  set_has_douban_score();
  douban_score_ = value;
}

// repeated .json.ChildInfo children_clip = 49;
inline int Video::children_clip_size() const {
  return children_clip_.size();
}
inline void Video::clear_children_clip() {
  children_clip_.Clear();
}
inline const ::json::ChildInfo& Video::children_clip(int index) const {
  return children_clip_.Get(index);
}
inline ::json::ChildInfo* Video::mutable_children_clip(int index) {
  return children_clip_.Mutable(index);
}
inline ::json::ChildInfo* Video::add_children_clip() {
  return children_clip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >&
Video::children_clip() const {
  return children_clip_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::ChildInfo >*
Video::mutable_children_clip() {
  return &children_clip_;
}

// repeated .json.People screen_writer = 50;
inline int Video::screen_writer_size() const {
  return screen_writer_.size();
}
inline void Video::clear_screen_writer() {
  screen_writer_.Clear();
}
inline const ::json::People& Video::screen_writer(int index) const {
  return screen_writer_.Get(index);
}
inline ::json::People* Video::mutable_screen_writer(int index) {
  return screen_writer_.Mutable(index);
}
inline ::json::People* Video::add_screen_writer() {
  return screen_writer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::People >&
Video::screen_writer() const {
  return screen_writer_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::People >*
Video::mutable_screen_writer() {
  return &screen_writer_;
}

// optional bool is_available_for_channel_homepage = 51;
inline bool Video::has_is_available_for_channel_homepage() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Video::set_has_is_available_for_channel_homepage() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Video::clear_has_is_available_for_channel_homepage() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Video::clear_is_available_for_channel_homepage() {
  is_available_for_channel_homepage_ = false;
  clear_has_is_available_for_channel_homepage();
}
inline bool Video::is_available_for_channel_homepage() const {
  return is_available_for_channel_homepage_;
}
inline void Video::set_is_available_for_channel_homepage(bool value) {
  set_has_is_available_for_channel_homepage();
  is_available_for_channel_homepage_ = value;
}

// repeated .json.Topic topics = 52;
inline int Video::topics_size() const {
  return topics_.size();
}
inline void Video::clear_topics() {
  topics_.Clear();
}
inline const ::json::Topic& Video::topics(int index) const {
  return topics_.Get(index);
}
inline ::json::Topic* Video::mutable_topics(int index) {
  return topics_.Mutable(index);
}
inline ::json::Topic* Video::add_topics() {
  return topics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::Topic >&
Video::topics() const {
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::Topic >*
Video::mutable_topics() {
  return &topics_;
}

// optional bool is_online = 53;
inline bool Video::has_is_online() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Video::set_has_is_online() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Video::clear_has_is_online() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Video::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool Video::is_online() const {
  return is_online_;
}
inline void Video::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// optional int64 play_platform = 54;
inline bool Video::has_play_platform() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Video::set_has_play_platform() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Video::clear_has_play_platform() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Video::clear_play_platform() {
  play_platform_ = GOOGLE_LONGLONG(0);
  clear_has_play_platform();
}
inline ::google::protobuf::int64 Video::play_platform() const {
  return play_platform_;
}
inline void Video::set_play_platform(::google::protobuf::int64 value) {
  set_has_play_platform();
  play_platform_ = value;
}

// repeated .json.PlayLocation play_location = 55;
inline int Video::play_location_size() const {
  return play_location_.size();
}
inline void Video::clear_play_location() {
  play_location_.Clear();
}
inline const ::json::PlayLocation& Video::play_location(int index) const {
  return play_location_.Get(index);
}
inline ::json::PlayLocation* Video::mutable_play_location(int index) {
  return play_location_.Mutable(index);
}
inline ::json::PlayLocation* Video::add_play_location() {
  return play_location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::json::PlayLocation >&
Video::play_location() const {
  return play_location_;
}
inline ::google::protobuf::RepeatedPtrField< ::json::PlayLocation >*
Video::mutable_play_location() {
  return &play_location_;
}

// optional int32 rc_order = 56;
inline bool Video::has_rc_order() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Video::set_has_rc_order() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Video::clear_has_rc_order() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Video::clear_rc_order() {
  rc_order_ = 0;
  clear_has_rc_order();
}
inline ::google::protobuf::int32 Video::rc_order() const {
  return rc_order_;
}
inline void Video::set_rc_order(::google::protobuf::int32 value) {
  set_has_rc_order();
  rc_order_ = value;
}

// repeated string operating_tags = 57;
inline int Video::operating_tags_size() const {
  return operating_tags_.size();
}
inline void Video::clear_operating_tags() {
  operating_tags_.Clear();
}
inline const ::std::string& Video::operating_tags(int index) const {
  return operating_tags_.Get(index);
}
inline ::std::string* Video::mutable_operating_tags(int index) {
  return operating_tags_.Mutable(index);
}
inline void Video::set_operating_tags(int index, const ::std::string& value) {
  operating_tags_.Mutable(index)->assign(value);
}
inline void Video::set_operating_tags(int index, const char* value) {
  operating_tags_.Mutable(index)->assign(value);
}
inline void Video::set_operating_tags(int index, const char* value, size_t size) {
  operating_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::add_operating_tags() {
  return operating_tags_.Add();
}
inline void Video::add_operating_tags(const ::std::string& value) {
  operating_tags_.Add()->assign(value);
}
inline void Video::add_operating_tags(const char* value) {
  operating_tags_.Add()->assign(value);
}
inline void Video::add_operating_tags(const char* value, size_t size) {
  operating_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Video::operating_tags() const {
  return operating_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Video::mutable_operating_tags() {
  return &operating_tags_;
}

// optional string play_source_id = 58;
inline bool Video::has_play_source_id() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Video::set_has_play_source_id() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Video::clear_has_play_source_id() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Video::clear_play_source_id() {
  if (play_source_id_ != &::google::protobuf::internal::kEmptyString) {
    play_source_id_->clear();
  }
  clear_has_play_source_id();
}
inline const ::std::string& Video::play_source_id() const {
  return *play_source_id_;
}
inline void Video::set_play_source_id(const ::std::string& value) {
  set_has_play_source_id();
  if (play_source_id_ == &::google::protobuf::internal::kEmptyString) {
    play_source_id_ = new ::std::string;
  }
  play_source_id_->assign(value);
}
inline void Video::set_play_source_id(const char* value) {
  set_has_play_source_id();
  if (play_source_id_ == &::google::protobuf::internal::kEmptyString) {
    play_source_id_ = new ::std::string;
  }
  play_source_id_->assign(value);
}
inline void Video::set_play_source_id(const char* value, size_t size) {
  set_has_play_source_id();
  if (play_source_id_ == &::google::protobuf::internal::kEmptyString) {
    play_source_id_ = new ::std::string;
  }
  play_source_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::mutable_play_source_id() {
  set_has_play_source_id();
  if (play_source_id_ == &::google::protobuf::internal::kEmptyString) {
    play_source_id_ = new ::std::string;
  }
  return play_source_id_;
}
inline ::std::string* Video::release_play_source_id() {
  clear_has_play_source_id();
  if (play_source_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = play_source_id_;
    play_source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Video::set_allocated_play_source_id(::std::string* play_source_id) {
  if (play_source_id_ != &::google::protobuf::internal::kEmptyString) {
    delete play_source_id_;
  }
  if (play_source_id) {
    set_has_play_source_id();
    play_source_id_ = play_source_id;
  } else {
    clear_has_play_source_id();
    play_source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .json.FilmVarietyType film_variety_type = 59;
inline bool Video::has_film_variety_type() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Video::set_has_film_variety_type() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Video::clear_has_film_variety_type() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Video::clear_film_variety_type() {
  film_variety_type_ = 1;
  clear_has_film_variety_type();
}
inline ::json::FilmVarietyType Video::film_variety_type() const {
  return static_cast< ::json::FilmVarietyType >(film_variety_type_);
}
inline void Video::set_film_variety_type(::json::FilmVarietyType value) {
  assert(::json::FilmVarietyType_IsValid(value));
  set_has_film_variety_type();
  film_variety_type_ = value;
}

// optional double sns_score = 60;
inline bool Video::has_sns_score() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Video::set_has_sns_score() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Video::clear_has_sns_score() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Video::clear_sns_score() {
  sns_score_ = 0;
  clear_has_sns_score();
}
inline double Video::sns_score() const {
  return sns_score_;
}
inline void Video::set_sns_score(double value) {
  set_has_sns_score();
  sns_score_ = value;
}

// optional double pps_wiki_score = 61;
inline bool Video::has_pps_wiki_score() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Video::set_has_pps_wiki_score() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Video::clear_has_pps_wiki_score() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Video::clear_pps_wiki_score() {
  pps_wiki_score_ = 0;
  clear_has_pps_wiki_score();
}
inline double Video::pps_wiki_score() const {
  return pps_wiki_score_;
}
inline void Video::set_pps_wiki_score(double value) {
  set_has_pps_wiki_score();
  pps_wiki_score_ = value;
}

// optional int64 original_id = 62;
inline bool Video::has_original_id() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Video::set_has_original_id() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Video::clear_has_original_id() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Video::clear_original_id() {
  original_id_ = GOOGLE_LONGLONG(0);
  clear_has_original_id();
}
inline ::google::protobuf::int64 Video::original_id() const {
  return original_id_;
}
inline void Video::set_original_id(::google::protobuf::int64 value) {
  set_has_original_id();
  original_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace json

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::json::Video_RatingType>() {
  return ::json::Video_RatingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::json::Video_DangerLevel>() {
  return ::json::Video_DangerLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::json::Video_EditorRecommendLevel>() {
  return ::json::Video_EditorRecommendLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::json::Video_ContentType>() {
  return ::json::Video_ContentType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::json::Video_FeatureFilmType>() {
  return ::json::Video_FeatureFilmType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::json::FilmVarietyType>() {
  return ::json::FilmVarietyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_video_2eproto__INCLUDED
