// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "video.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace json {

namespace {

const ::google::protobuf::Descriptor* People_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  People_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topic_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailedTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailedTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Slide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slide_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisplayFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisplayFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Video_RatingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Video_DangerLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Video_EditorRecommendLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Video_ContentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Video_FeatureFilmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FilmVarietyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_video_2eproto() {
  protobuf_AddDesc_video_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "video.proto");
  GOOGLE_CHECK(file != NULL);
  People_descriptor_ = file->message_type(0);
  static const int People_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(People, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(People, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(People, character_),
  };
  People_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      People_descriptor_,
      People::default_instance_,
      People_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(People, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(People, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(People));
  ParentInfo_descriptor_ = file->message_type(1);
  static const int ParentInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, picture_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, page_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, sns_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, pps_wiki_score_),
  };
  ParentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParentInfo_descriptor_,
      ParentInfo::default_instance_,
      ParentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParentInfo));
  ChildInfo_descriptor_ = file->message_type(2);
  static const int ChildInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildInfo, is_member_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildInfo, purchase_type_),
  };
  ChildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChildInfo_descriptor_,
      ChildInfo::default_instance_,
      ChildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChildInfo));
  Topic_descriptor_ = file->message_type(3);
  static const int Topic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, id_),
  };
  Topic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Topic_descriptor_,
      Topic::default_instance_,
      Topic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Topic));
  TagFeature_descriptor_ = file->message_type(4);
  static const int TagFeature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagFeature, tag_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagFeature, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagFeature, level_),
  };
  TagFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagFeature_descriptor_,
      TagFeature::default_instance_,
      TagFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagFeature));
  DetailedTag_descriptor_ = file->message_type(5);
  static const int DetailedTag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedTag, tag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedTag, tag_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedTag, tag_features_),
  };
  DetailedTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailedTag_descriptor_,
      DetailedTag::default_instance_,
      DetailedTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailedTag));
  Slide_descriptor_ = file->message_type(6);
  static const int Slide_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, slide_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, page_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, slide_final_time_),
  };
  Slide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Slide_descriptor_,
      Slide::default_instance_,
      Slide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Slide));
  PlayLocation_descriptor_ = file->message_type(7);
  static const int PlayLocation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, play_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, is_whitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, continent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, county_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, area_),
  };
  PlayLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayLocation_descriptor_,
      PlayLocation::default_instance_,
      PlayLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayLocation));
  DisplayFields_descriptor_ = file->message_type(8);
  static const int DisplayFields_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, album_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, tv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, short_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, page_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, picture_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, total_episode_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, global_publish_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, prompt_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, is_member_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, is_download_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, is_exclusive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, sub_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, episode_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, format_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, qipu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, display_play_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, play_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, comments_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, up_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, down_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, latest_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, pps_p2p_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, poster_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, purchase_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, id_url_hashcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, latest_episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, is_boss_mixer_),
  };
  DisplayFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisplayFields_descriptor_,
      DisplayFields::default_instance_,
      DisplayFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisplayFields));
  Video_descriptor_ = file->message_type(9);
  static const int Video_offsets_[62] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, pps_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, multi_publish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, uploader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, final_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, time_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, allowed_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_domestic_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, quality_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, danger_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, editor_recommend_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, canonical_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, feature_film_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, main_contributor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, support_contributor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, parent_video_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, parent_album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, parent_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, parent_official_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, children_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, children_prevue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, children_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, children_titbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, display_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, douban_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, allowed_platform_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, slides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, user_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, political_sensitive_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, custom_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_available_for_qiyihomepage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, site_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_latest_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_qiyi_produced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, detailed_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, song_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, douban_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, children_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, screen_writer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_available_for_channel_homepage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, play_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, play_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, rc_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, operating_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, play_source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, film_variety_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, sns_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, pps_wiki_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, original_id_),
  };
  Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Video_descriptor_,
      Video::default_instance_,
      Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Video));
  Video_RatingType_descriptor_ = Video_descriptor_->enum_type(0);
  Video_DangerLevel_descriptor_ = Video_descriptor_->enum_type(1);
  Video_EditorRecommendLevel_descriptor_ = Video_descriptor_->enum_type(2);
  Video_ContentType_descriptor_ = Video_descriptor_->enum_type(3);
  Video_FeatureFilmType_descriptor_ = Video_descriptor_->enum_type(4);
  FilmVarietyType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_video_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    People_descriptor_, &People::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParentInfo_descriptor_, &ParentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChildInfo_descriptor_, &ChildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Topic_descriptor_, &Topic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagFeature_descriptor_, &TagFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailedTag_descriptor_, &DetailedTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Slide_descriptor_, &Slide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayLocation_descriptor_, &PlayLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisplayFields_descriptor_, &DisplayFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Video_descriptor_, &Video::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_video_2eproto() {
  delete People::default_instance_;
  delete People_reflection_;
  delete ParentInfo::default_instance_;
  delete ParentInfo_reflection_;
  delete ChildInfo::default_instance_;
  delete ChildInfo_reflection_;
  delete Topic::default_instance_;
  delete Topic_reflection_;
  delete TagFeature::default_instance_;
  delete TagFeature_reflection_;
  delete DetailedTag::default_instance_;
  delete DetailedTag_reflection_;
  delete Slide::default_instance_;
  delete Slide_reflection_;
  delete PlayLocation::default_instance_;
  delete PlayLocation_reflection_;
  delete DisplayFields::default_instance_;
  delete DisplayFields_reflection_;
  delete Video::default_instance_;
  delete Video_reflection_;
}

void protobuf_AddDesc_video_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013video.proto\022\004json\"5\n\006People\022\n\n\002id\030\001 \001("
    "\003\022\014\n\004name\030\002 \001(\t\022\021\n\tcharacter\030\003 \003(\t\"x\n\nPa"
    "rentInfo\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\023\n\013pi"
    "cture_url\030\003 \001(\t\022\020\n\010page_url\030\004 \001(\t\022\021\n\tsns"
    "_score\030\005 \001(\001\022\026\n\016pps_wiki_score\030\006 \001(\001\"F\n\t"
    "ChildInfo\022\n\n\002id\030\001 \001(\003\022\026\n\016is_member_only\030"
    "\002 \001(\005\022\025\n\rpurchase_type\030\003 \001(\005\"\023\n\005Topic\022\n\n"
    "\002id\030\001 \001(\003\">\n\nTagFeature\022\021\n\ttag_value\030\001 \001"
    "(\t\022\016\n\006weight\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\"[\n\013Det"
    "ailedTag\022\020\n\010tag_type\030\001 \001(\t\022\022\n\ntag_values"
    "\030\002 \003(\t\022&\n\014tag_features\030\003 \003(\0132\020.json.TagF"
    "eature\"g\n\005Slide\022\021\n\tslide_url\030\001 \001(\t\022\020\n\010pl"
    "atform\030\002 \001(\t\022\r\n\005order\030\003 \001(\005\022\020\n\010page_url\030"
    "\004 \001(\t\022\030\n\020slide_final_time\030\005 \001(\003\"\235\001\n\014Play"
    "Location\022\025\n\rplay_platform\030\001 \001(\005\022\024\n\014is_wh"
    "itelist\030\002 \001(\010\022\021\n\tcontinent\030\003 \003(\005\022\017\n\007coun"
    "try\030\004 \003(\005\022\020\n\010province\030\005 \003(\005\022\014\n\004city\030\006 \003("
    "\005\022\016\n\006county\030\007 \003(\005\022\014\n\004area\030\010 \003(\005\"\277\005\n\rDisp"
    "layFields\022\020\n\010album_id\030\001 \001(\003\022\r\n\005tv_id\030\002 \001"
    "(\003\022\013\n\003vid\030\003 \001(\t\022\023\n\013short_title\030\004 \001(\t\022\023\n\013"
    "source_name\030\005 \001(\t\022\020\n\010page_url\030\006 \001(\t\022\023\n\013p"
    "icture_url\030\007 \001(\t\022\031\n\021total_episode_num\030\010 "
    "\001(\005\022\033\n\023global_publish_date\030\t \001(\t\022\032\n\022prom"
    "pt_description\030\n \001(\t\022\026\n\016is_member_only\030\013"
    " \001(\005\022\033\n\023is_download_allowed\030\014 \001(\005\022\024\n\014is_"
    "exclusive\030\r \001(\005\022\021\n\tsub_title\030\016 \001(\t\022\014\n\004ty"
    "pe\030\017 \003(\t\022\025\n\repisode_order\030\020 \001(\005\022\027\n\017forma"
    "t_property\030\021 \001(\005\022\017\n\007qipu_id\030\022 \001(\003\022\032\n\022dis"
    "play_play_count\030\023 \001(\003\022\022\n\nplay_count\030\024 \001("
    "\003\022\026\n\016comments_count\030\025 \001(\003\022\020\n\010up_count\030\026 "
    "\001(\003\022\022\n\ndown_count\030\027 \001(\003\022\026\n\016latest_episod"
    "e\030\030 \001(\t\022\023\n\013pps_p2p_url\030\031 \001(\t\022\022\n\nposter_u"
    "rl\030\032 \001(\t\022\025\n\rpurchase_type\030\033 \001(\005\022\027\n\017id_ur"
    "l_hashcode\030\034 \001(\t\022\016\n\006season\030\035 \001(\005\022\r\n\005phas"
    "e\030\036 \001(\005\022\031\n\021latest_episode_id\030\037 \001(\003\022\025\n\ris"
    "_boss_mixer\030  \001(\005\"\305\021\n\005Video\022\n\n\002id\030\001 \001(\003\022"
    "\014\n\004name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\016\n\006pp"
    "s_id\030\004 \001(\003\022\022\n\nchannel_id\030\005 \001(\005\022\025\n\rmulti_"
    "publish\030\006 \003(\003\022\023\n\013uploader_id\030\007 \001(\003\022\022\n\nfi"
    "nal_time\030\010 \001(\003\022\025\n\rtime_duration\030\t \001(\005\022\030\n"
    "\020allowed_platform\030\n \001(\005\022\030\n\020is_domestic_o"
    "nly\030\013 \001(\010\022\021\n\tsignature\030\014 \001(\t\022\025\n\rquality_"
    "score\030\r \001(\002\022\020\n\010is_valid\030\016 \001(\010\022&\n\006rating\030"
    "\017 \001(\0162\026.json.Video.RatingType\022-\n\014danger_"
    "level\030\020 \001(\0162\027.json.Video.DangerLevel\022@\n\026"
    "editor_recommend_level\030\021 \001(\0162 .json.Vide"
    "o.EditorRecommendLevel\022\014\n\004tags\030\022 \003(\t\022\031\n\021"
    "canonical_keyword\030\023 \003(\t\022\017\n\007keyword\030\024 \003(\t"
    "\022-\n\014content_type\030\025 \001(\0162\027.json.Video.Cont"
    "entType\0226\n\021feature_film_type\030\026 \001(\0162\033.jso"
    "n.Video.FeatureFilmType\022\020\n\010location\030\027 \003("
    "\t\022\035\n\007creator\030\030 \003(\0132\014.json.People\022&\n\020main"
    "_contributor\030\031 \003(\0132\014.json.People\022)\n\023supp"
    "ort_contributor\030\032 \003(\0132\014.json.People\022,\n\022p"
    "arent_video_group\030\033 \003(\0132\020.json.ParentInf"
    "o\022&\n\014parent_album\030\034 \001(\0132\020.json.ParentInf"
    "o\022+\n\021parent_collection\030\035 \003(\0132\020.json.Pare"
    "ntInfo\0221\n\027parent_official_episode\030\036 \003(\0132"
    "\020.json.ParentInfo\022)\n\020children_episode\030\037 "
    "\003(\0132\017.json.ChildInfo\022(\n\017children_prevue\030"
    "  \003(\0132\017.json.ChildInfo\022)\n\020children_trail"
    "er\030! \003(\0132\017.json.ChildInfo\022(\n\017children_ti"
    "tbit\030\" \003(\0132\017.json.ChildInfo\022+\n\016display_f"
    "ields\030# \001(\0132\023.json.DisplayFields\022\021\n\tdoub"
    "an_id\030$ \001(\003\022\032\n\022allowed_platform_1\030% \001(\005\022"
    "\033\n\006slides\030& \003(\0132\013.json.Slide\022\021\n\tuser_tag"
    "s\030\' \003(\t\022!\n\031political_sensitive_words\030( \003"
    "(\t\022\023\n\013custom_tags\030) \003(\t\022%\n\035is_available_"
    "for_qiyihomepage\030* \001(\010\022\021\n\tsite_name\030+ \003("
    "\t\022\031\n\021is_latest_episode\030, \001(\010\022\030\n\020is_qiyi_"
    "produced\030- \001(\010\022(\n\rdetailed_tags\030. \003(\0132\021."
    "json.DetailedTag\022\021\n\tsong_name\030/ \001(\t\022\024\n\014d"
    "ouban_score\0300 \001(\001\022&\n\rchildren_clip\0301 \003(\013"
    "2\017.json.ChildInfo\022#\n\rscreen_writer\0302 \003(\013"
    "2\014.json.People\022)\n!is_available_for_chann"
    "el_homepage\0303 \001(\010\022\033\n\006topics\0304 \003(\0132\013.json"
    ".Topic\022\021\n\tis_online\0305 \001(\010\022\025\n\rplay_platfo"
    "rm\0306 \001(\003\022)\n\rplay_location\0307 \003(\0132\022.json.P"
    "layLocation\022\020\n\010rc_order\0308 \001(\005\022\026\n\016operati"
    "ng_tags\0309 \003(\t\022\026\n\016play_source_id\030: \001(\t\0220\n"
    "\021film_variety_type\030; \001(\0162\025.json.FilmVari"
    "etyType\022\021\n\tsns_score\030< \001(\001\022\026\n\016pps_wiki_s"
    "core\030= \001(\001\022\023\n\013original_id\030> \001(\003\"M\n\nRatin"
    "gType\022\013\n\007GENERAL\020\000\022\023\n\017CHILD_PROTECTED\020\001\022"
    "\021\n\rPARENT_GUIDED\020\002\022\n\n\006MATURE\020\003\"T\n\013Danger"
    "Level\022\010\n\004SAFE\020\000\022\022\n\016DANGEROUS_HIGH\020\001\022\024\n\020D"
    "ANGEROUS_MIDDLE\020\002\022\021\n\rDANGEROUS_LOW\020\003\"F\n\024"
    "EditorRecommendLevel\022\010\n\004NONE\020\000\022\017\n\013GENERA"
    "L_REC\020\001\022\007\n\003KEY\020\002\022\n\n\006STRONG\020\003\"M\n\013ContentT"
    "ype\022\020\n\014FEATURE_FILM\020\001\022\n\n\006PREVUE\020\002\022\013\n\007TRA"
    "ILER\020\003\022\010\n\004CLIP\020\004\022\t\n\005OTHER\020\005\"$\n\017FeatureFi"
    "lmType\022\t\n\005MOVIE\020\000\022\006\n\002TV\020\001* \n\017FilmVariety"
    "Type\022\r\n\tINTERVIEW\020\001", 3699);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "video.proto", &protobuf_RegisterTypes);
  People::default_instance_ = new People();
  ParentInfo::default_instance_ = new ParentInfo();
  ChildInfo::default_instance_ = new ChildInfo();
  Topic::default_instance_ = new Topic();
  TagFeature::default_instance_ = new TagFeature();
  DetailedTag::default_instance_ = new DetailedTag();
  Slide::default_instance_ = new Slide();
  PlayLocation::default_instance_ = new PlayLocation();
  DisplayFields::default_instance_ = new DisplayFields();
  Video::default_instance_ = new Video();
  People::default_instance_->InitAsDefaultInstance();
  ParentInfo::default_instance_->InitAsDefaultInstance();
  ChildInfo::default_instance_->InitAsDefaultInstance();
  Topic::default_instance_->InitAsDefaultInstance();
  TagFeature::default_instance_->InitAsDefaultInstance();
  DetailedTag::default_instance_->InitAsDefaultInstance();
  Slide::default_instance_->InitAsDefaultInstance();
  PlayLocation::default_instance_->InitAsDefaultInstance();
  DisplayFields::default_instance_->InitAsDefaultInstance();
  Video::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_video_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_video_2eproto {
  StaticDescriptorInitializer_video_2eproto() {
    protobuf_AddDesc_video_2eproto();
  }
} static_descriptor_initializer_video_2eproto_;
const ::google::protobuf::EnumDescriptor* FilmVarietyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilmVarietyType_descriptor_;
}
bool FilmVarietyType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int People::kIdFieldNumber;
const int People::kNameFieldNumber;
const int People::kCharacterFieldNumber;
#endif  // !_MSC_VER

People::People()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void People::InitAsDefaultInstance() {
}

People::People(const People& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void People::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

People::~People() {
  SharedDtor();
}

void People::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void People::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* People::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return People_descriptor_;
}

const People& People::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

People* People::default_instance_ = NULL;

People* People::New() const {
  return new People;
}

void People::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  character_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool People::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_character;
        break;
      }

      // repeated string character = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_character()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->character(this->character_size() - 1).data(),
            this->character(this->character_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_character;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void People::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated string character = 3;
  for (int i = 0; i < this->character_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->character(i).data(), this->character(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->character(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* People::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string character = 3;
  for (int i = 0; i < this->character_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->character(i).data(), this->character(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->character(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int People::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string character = 3;
  total_size += 1 * this->character_size();
  for (int i = 0; i < this->character_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->character(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void People::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const People* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const People*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void People::MergeFrom(const People& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_.MergeFrom(from.character_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void People::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void People::CopyFrom(const People& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool People::IsInitialized() const {

  return true;
}

void People::Swap(People* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    character_.Swap(&other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata People::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = People_descriptor_;
  metadata.reflection = People_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParentInfo::kIdFieldNumber;
const int ParentInfo::kNameFieldNumber;
const int ParentInfo::kPictureUrlFieldNumber;
const int ParentInfo::kPageUrlFieldNumber;
const int ParentInfo::kSnsScoreFieldNumber;
const int ParentInfo::kPpsWikiScoreFieldNumber;
#endif  // !_MSC_VER

ParentInfo::ParentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParentInfo::InitAsDefaultInstance() {
}

ParentInfo::ParentInfo(const ParentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParentInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sns_score_ = 0;
  pps_wiki_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParentInfo::~ParentInfo() {
  SharedDtor();
}

void ParentInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    delete page_url_;
  }
  if (this != default_instance_) {
  }
}

void ParentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParentInfo_descriptor_;
}

const ParentInfo& ParentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

ParentInfo* ParentInfo::default_instance_ = NULL;

ParentInfo* ParentInfo::New() const {
  return new ParentInfo;
}

void ParentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_picture_url()) {
      if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
        picture_url_->clear();
      }
    }
    if (has_page_url()) {
      if (page_url_ != &::google::protobuf::internal::kEmptyString) {
        page_url_->clear();
      }
    }
    sns_score_ = 0;
    pps_wiki_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_picture_url;
        break;
      }

      // optional string picture_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_url().data(), this->picture_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_page_url;
        break;
      }

      // optional string page_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_url().data(), this->page_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_sns_score;
        break;
      }

      // optional double sns_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sns_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sns_score_)));
          set_has_sns_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_pps_wiki_score;
        break;
      }

      // optional double pps_wiki_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pps_wiki_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pps_wiki_score_)));
          set_has_pps_wiki_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string picture_url = 3;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->picture_url(), output);
  }

  // optional string page_url = 4;
  if (has_page_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_url().data(), this->page_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->page_url(), output);
  }

  // optional double sns_score = 5;
  if (has_sns_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sns_score(), output);
  }

  // optional double pps_wiki_score = 6;
  if (has_pps_wiki_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pps_wiki_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string picture_url = 3;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->picture_url(), target);
  }

  // optional string page_url = 4;
  if (has_page_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_url().data(), this->page_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_url(), target);
  }

  // optional double sns_score = 5;
  if (has_sns_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sns_score(), target);
  }

  // optional double pps_wiki_score = 6;
  if (has_pps_wiki_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pps_wiki_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string picture_url = 3;
    if (has_picture_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_url());
    }

    // optional string page_url = 4;
    if (has_page_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_url());
    }

    // optional double sns_score = 5;
    if (has_sns_score()) {
      total_size += 1 + 8;
    }

    // optional double pps_wiki_score = 6;
    if (has_pps_wiki_score()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParentInfo::MergeFrom(const ParentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_picture_url()) {
      set_picture_url(from.picture_url());
    }
    if (from.has_page_url()) {
      set_page_url(from.page_url());
    }
    if (from.has_sns_score()) {
      set_sns_score(from.sns_score());
    }
    if (from.has_pps_wiki_score()) {
      set_pps_wiki_score(from.pps_wiki_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentInfo::CopyFrom(const ParentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentInfo::IsInitialized() const {

  return true;
}

void ParentInfo::Swap(ParentInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(picture_url_, other->picture_url_);
    std::swap(page_url_, other->page_url_);
    std::swap(sns_score_, other->sns_score_);
    std::swap(pps_wiki_score_, other->pps_wiki_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParentInfo_descriptor_;
  metadata.reflection = ParentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChildInfo::kIdFieldNumber;
const int ChildInfo::kIsMemberOnlyFieldNumber;
const int ChildInfo::kPurchaseTypeFieldNumber;
#endif  // !_MSC_VER

ChildInfo::ChildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChildInfo::InitAsDefaultInstance() {
}

ChildInfo::ChildInfo(const ChildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChildInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  is_member_only_ = 0;
  purchase_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChildInfo::~ChildInfo() {
  SharedDtor();
}

void ChildInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChildInfo_descriptor_;
}

const ChildInfo& ChildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

ChildInfo* ChildInfo::default_instance_ = NULL;

ChildInfo* ChildInfo::New() const {
  return new ChildInfo;
}

void ChildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    is_member_only_ = 0;
    purchase_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_member_only;
        break;
      }

      // optional int32 is_member_only = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_member_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_member_only_)));
          set_has_is_member_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_purchase_type;
        break;
      }

      // optional int32 purchase_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_type_)));
          set_has_purchase_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 is_member_only = 2;
  if (has_is_member_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_member_only(), output);
  }

  // optional int32 purchase_type = 3;
  if (has_purchase_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->purchase_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 is_member_only = 2;
  if (has_is_member_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_member_only(), target);
  }

  // optional int32 purchase_type = 3;
  if (has_purchase_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->purchase_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 is_member_only = 2;
    if (has_is_member_only()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_member_only());
    }

    // optional int32 purchase_type = 3;
    if (has_purchase_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChildInfo::MergeFrom(const ChildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_member_only()) {
      set_is_member_only(from.is_member_only());
    }
    if (from.has_purchase_type()) {
      set_purchase_type(from.purchase_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChildInfo::CopyFrom(const ChildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChildInfo::IsInitialized() const {

  return true;
}

void ChildInfo::Swap(ChildInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_member_only_, other->is_member_only_);
    std::swap(purchase_type_, other->purchase_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChildInfo_descriptor_;
  metadata.reflection = ChildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Topic::kIdFieldNumber;
#endif  // !_MSC_VER

Topic::Topic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Topic::InitAsDefaultInstance() {
}

Topic::Topic(const Topic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Topic::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Topic::~Topic() {
  SharedDtor();
}

void Topic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topic_descriptor_;
}

const Topic& Topic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

Topic* Topic::default_instance_ = NULL;

Topic* Topic::New() const {
  return new Topic;
}

void Topic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Topic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Topic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Topic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Topic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Topic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {

  return true;
}

void Topic::Swap(Topic* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topic_descriptor_;
  metadata.reflection = Topic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagFeature::kTagValueFieldNumber;
const int TagFeature::kWeightFieldNumber;
const int TagFeature::kLevelFieldNumber;
#endif  // !_MSC_VER

TagFeature::TagFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagFeature::InitAsDefaultInstance() {
}

TagFeature::TagFeature(const TagFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagFeature::SharedCtor() {
  _cached_size_ = 0;
  tag_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagFeature::~TagFeature() {
  SharedDtor();
}

void TagFeature::SharedDtor() {
  if (tag_value_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_value_;
  }
  if (this != default_instance_) {
  }
}

void TagFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagFeature_descriptor_;
}

const TagFeature& TagFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

TagFeature* TagFeature::default_instance_ = NULL;

TagFeature* TagFeature::New() const {
  return new TagFeature;
}

void TagFeature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag_value()) {
      if (tag_value_ != &::google::protobuf::internal::kEmptyString) {
        tag_value_->clear();
      }
    }
    weight_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag_value().data(), this->tag_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional int32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tag_value = 1;
  if (has_tag_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_value().data(), this->tag_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag_value(), output);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tag_value = 1;
  if (has_tag_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_value().data(), this->tag_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag_value(), target);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag_value = 1;
    if (has_tag_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_value());
    }

    // optional int32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagFeature::MergeFrom(const TagFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_value()) {
      set_tag_value(from.tag_value());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagFeature::CopyFrom(const TagFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagFeature::IsInitialized() const {

  return true;
}

void TagFeature::Swap(TagFeature* other) {
  if (other != this) {
    std::swap(tag_value_, other->tag_value_);
    std::swap(weight_, other->weight_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagFeature_descriptor_;
  metadata.reflection = TagFeature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailedTag::kTagTypeFieldNumber;
const int DetailedTag::kTagValuesFieldNumber;
const int DetailedTag::kTagFeaturesFieldNumber;
#endif  // !_MSC_VER

DetailedTag::DetailedTag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailedTag::InitAsDefaultInstance() {
}

DetailedTag::DetailedTag(const DetailedTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailedTag::SharedCtor() {
  _cached_size_ = 0;
  tag_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailedTag::~DetailedTag() {
  SharedDtor();
}

void DetailedTag::SharedDtor() {
  if (tag_type_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_type_;
  }
  if (this != default_instance_) {
  }
}

void DetailedTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailedTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailedTag_descriptor_;
}

const DetailedTag& DetailedTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

DetailedTag* DetailedTag::default_instance_ = NULL;

DetailedTag* DetailedTag::New() const {
  return new DetailedTag;
}

void DetailedTag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag_type()) {
      if (tag_type_ != &::google::protobuf::internal::kEmptyString) {
        tag_type_->clear();
      }
    }
  }
  tag_values_.Clear();
  tag_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailedTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag_type().data(), this->tag_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag_values;
        break;
      }

      // repeated string tag_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag_values(this->tag_values_size() - 1).data(),
            this->tag_values(this->tag_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag_values;
        if (input->ExpectTag(26)) goto parse_tag_features;
        break;
      }

      // repeated .json.TagFeature tag_features = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tag_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailedTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tag_type = 1;
  if (has_tag_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_type().data(), this->tag_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag_type(), output);
  }

  // repeated string tag_values = 2;
  for (int i = 0; i < this->tag_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tag_values(i).data(), this->tag_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag_values(i), output);
  }

  // repeated .json.TagFeature tag_features = 3;
  for (int i = 0; i < this->tag_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tag_features(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailedTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tag_type = 1;
  if (has_tag_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_type().data(), this->tag_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag_type(), target);
  }

  // repeated string tag_values = 2;
  for (int i = 0; i < this->tag_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag_values(i).data(), this->tag_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tag_values(i), target);
  }

  // repeated .json.TagFeature tag_features = 3;
  for (int i = 0; i < this->tag_features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tag_features(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailedTag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag_type = 1;
    if (has_tag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_type());
    }

  }
  // repeated string tag_values = 2;
  total_size += 1 * this->tag_values_size();
  for (int i = 0; i < this->tag_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag_values(i));
  }

  // repeated .json.TagFeature tag_features = 3;
  total_size += 1 * this->tag_features_size();
  for (int i = 0; i < this->tag_features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag_features(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailedTag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailedTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailedTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailedTag::MergeFrom(const DetailedTag& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_values_.MergeFrom(from.tag_values_);
  tag_features_.MergeFrom(from.tag_features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_type()) {
      set_tag_type(from.tag_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailedTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedTag::CopyFrom(const DetailedTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedTag::IsInitialized() const {

  return true;
}

void DetailedTag::Swap(DetailedTag* other) {
  if (other != this) {
    std::swap(tag_type_, other->tag_type_);
    tag_values_.Swap(&other->tag_values_);
    tag_features_.Swap(&other->tag_features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailedTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailedTag_descriptor_;
  metadata.reflection = DetailedTag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Slide::kSlideUrlFieldNumber;
const int Slide::kPlatformFieldNumber;
const int Slide::kOrderFieldNumber;
const int Slide::kPageUrlFieldNumber;
const int Slide::kSlideFinalTimeFieldNumber;
#endif  // !_MSC_VER

Slide::Slide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Slide::InitAsDefaultInstance() {
}

Slide::Slide(const Slide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Slide::SharedCtor() {
  _cached_size_ = 0;
  slide_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_ = 0;
  page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slide_final_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Slide::~Slide() {
  SharedDtor();
}

void Slide::SharedDtor() {
  if (slide_url_ != &::google::protobuf::internal::kEmptyString) {
    delete slide_url_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    delete page_url_;
  }
  if (this != default_instance_) {
  }
}

void Slide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slide_descriptor_;
}

const Slide& Slide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

Slide* Slide::default_instance_ = NULL;

Slide* Slide::New() const {
  return new Slide;
}

void Slide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_slide_url()) {
      if (slide_url_ != &::google::protobuf::internal::kEmptyString) {
        slide_url_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    order_ = 0;
    if (has_page_url()) {
      if (page_url_ != &::google::protobuf::internal::kEmptyString) {
        page_url_->clear();
      }
    }
    slide_final_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Slide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string slide_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slide_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slide_url().data(), this->slide_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_page_url;
        break;
      }

      // optional string page_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_url().data(), this->page_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slide_final_time;
        break;
      }

      // optional int64 slide_final_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slide_final_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &slide_final_time_)));
          set_has_slide_final_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Slide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string slide_url = 1;
  if (has_slide_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slide_url().data(), this->slide_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->slide_url(), output);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional string page_url = 4;
  if (has_page_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_url().data(), this->page_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->page_url(), output);
  }

  // optional int64 slide_final_time = 5;
  if (has_slide_final_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->slide_final_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Slide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string slide_url = 1;
  if (has_slide_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slide_url().data(), this->slide_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->slide_url(), target);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  // optional string page_url = 4;
  if (has_page_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_url().data(), this->page_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_url(), target);
  }

  // optional int64 slide_final_time = 5;
  if (has_slide_final_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->slide_final_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Slide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string slide_url = 1;
    if (has_slide_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slide_url());
    }

    // optional string platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional string page_url = 4;
    if (has_page_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_url());
    }

    // optional int64 slide_final_time = 5;
    if (has_slide_final_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->slide_final_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Slide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Slide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Slide::MergeFrom(const Slide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slide_url()) {
      set_slide_url(from.slide_url());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_page_url()) {
      set_page_url(from.page_url());
    }
    if (from.has_slide_final_time()) {
      set_slide_final_time(from.slide_final_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Slide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slide::CopyFrom(const Slide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slide::IsInitialized() const {

  return true;
}

void Slide::Swap(Slide* other) {
  if (other != this) {
    std::swap(slide_url_, other->slide_url_);
    std::swap(platform_, other->platform_);
    std::swap(order_, other->order_);
    std::swap(page_url_, other->page_url_);
    std::swap(slide_final_time_, other->slide_final_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Slide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slide_descriptor_;
  metadata.reflection = Slide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayLocation::kPlayPlatformFieldNumber;
const int PlayLocation::kIsWhitelistFieldNumber;
const int PlayLocation::kContinentFieldNumber;
const int PlayLocation::kCountryFieldNumber;
const int PlayLocation::kProvinceFieldNumber;
const int PlayLocation::kCityFieldNumber;
const int PlayLocation::kCountyFieldNumber;
const int PlayLocation::kAreaFieldNumber;
#endif  // !_MSC_VER

PlayLocation::PlayLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayLocation::InitAsDefaultInstance() {
}

PlayLocation::PlayLocation(const PlayLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayLocation::SharedCtor() {
  _cached_size_ = 0;
  play_platform_ = 0;
  is_whitelist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayLocation::~PlayLocation() {
  SharedDtor();
}

void PlayLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayLocation_descriptor_;
}

const PlayLocation& PlayLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

PlayLocation* PlayLocation::default_instance_ = NULL;

PlayLocation* PlayLocation::New() const {
  return new PlayLocation;
}

void PlayLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    play_platform_ = 0;
    is_whitelist_ = false;
  }
  continent_.Clear();
  country_.Clear();
  province_.Clear();
  city_.Clear();
  county_.Clear();
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_platform_)));
          set_has_play_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_whitelist;
        break;
      }

      // optional bool is_whitelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_whitelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_whitelist_)));
          set_has_is_whitelist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_continent;
        break;
      }

      // repeated int32 continent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_continent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_continent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_continent;
        if (input->ExpectTag(32)) goto parse_country;
        break;
      }

      // repeated int32 country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_country())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_country())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country;
        if (input->ExpectTag(40)) goto parse_province;
        break;
      }

      // repeated int32 province = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_province:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_province())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_province())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_province;
        if (input->ExpectTag(48)) goto parse_city;
        break;
      }

      // repeated int32 city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_city())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_city())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_city;
        if (input->ExpectTag(56)) goto parse_county;
        break;
      }

      // repeated int32 county = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_county:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_county())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_county())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_county;
        if (input->ExpectTag(64)) goto parse_area;
        break;
      }

      // repeated int32 area = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 play_platform = 1;
  if (has_play_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_platform(), output);
  }

  // optional bool is_whitelist = 2;
  if (has_is_whitelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_whitelist(), output);
  }

  // repeated int32 continent = 3;
  for (int i = 0; i < this->continent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->continent(i), output);
  }

  // repeated int32 country = 4;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->country(i), output);
  }

  // repeated int32 province = 5;
  for (int i = 0; i < this->province_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->province(i), output);
  }

  // repeated int32 city = 6;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->city(i), output);
  }

  // repeated int32 county = 7;
  for (int i = 0; i < this->county_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->county(i), output);
  }

  // repeated int32 area = 8;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 play_platform = 1;
  if (has_play_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->play_platform(), target);
  }

  // optional bool is_whitelist = 2;
  if (has_is_whitelist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_whitelist(), target);
  }

  // repeated int32 continent = 3;
  for (int i = 0; i < this->continent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->continent(i), target);
  }

  // repeated int32 country = 4;
  for (int i = 0; i < this->country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->country(i), target);
  }

  // repeated int32 province = 5;
  for (int i = 0; i < this->province_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->province(i), target);
  }

  // repeated int32 city = 6;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->city(i), target);
  }

  // repeated int32 county = 7;
  for (int i = 0; i < this->county_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->county(i), target);
  }

  // repeated int32 area = 8;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 play_platform = 1;
    if (has_play_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_platform());
    }

    // optional bool is_whitelist = 2;
    if (has_is_whitelist()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 continent = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->continent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->continent(i));
    }
    total_size += 1 * this->continent_size() + data_size;
  }

  // repeated int32 country = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->country_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->country(i));
    }
    total_size += 1 * this->country_size() + data_size;
  }

  // repeated int32 province = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->province_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->province(i));
    }
    total_size += 1 * this->province_size() + data_size;
  }

  // repeated int32 city = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->city_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->city(i));
    }
    total_size += 1 * this->city_size() + data_size;
  }

  // repeated int32 county = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->county_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->county(i));
    }
    total_size += 1 * this->county_size() + data_size;
  }

  // repeated int32 area = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayLocation::MergeFrom(const PlayLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  continent_.MergeFrom(from.continent_);
  country_.MergeFrom(from.country_);
  province_.MergeFrom(from.province_);
  city_.MergeFrom(from.city_);
  county_.MergeFrom(from.county_);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_platform()) {
      set_play_platform(from.play_platform());
    }
    if (from.has_is_whitelist()) {
      set_is_whitelist(from.is_whitelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayLocation::CopyFrom(const PlayLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayLocation::IsInitialized() const {

  return true;
}

void PlayLocation::Swap(PlayLocation* other) {
  if (other != this) {
    std::swap(play_platform_, other->play_platform_);
    std::swap(is_whitelist_, other->is_whitelist_);
    continent_.Swap(&other->continent_);
    country_.Swap(&other->country_);
    province_.Swap(&other->province_);
    city_.Swap(&other->city_);
    county_.Swap(&other->county_);
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayLocation_descriptor_;
  metadata.reflection = PlayLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisplayFields::kAlbumIdFieldNumber;
const int DisplayFields::kTvIdFieldNumber;
const int DisplayFields::kVidFieldNumber;
const int DisplayFields::kShortTitleFieldNumber;
const int DisplayFields::kSourceNameFieldNumber;
const int DisplayFields::kPageUrlFieldNumber;
const int DisplayFields::kPictureUrlFieldNumber;
const int DisplayFields::kTotalEpisodeNumFieldNumber;
const int DisplayFields::kGlobalPublishDateFieldNumber;
const int DisplayFields::kPromptDescriptionFieldNumber;
const int DisplayFields::kIsMemberOnlyFieldNumber;
const int DisplayFields::kIsDownloadAllowedFieldNumber;
const int DisplayFields::kIsExclusiveFieldNumber;
const int DisplayFields::kSubTitleFieldNumber;
const int DisplayFields::kTypeFieldNumber;
const int DisplayFields::kEpisodeOrderFieldNumber;
const int DisplayFields::kFormatPropertyFieldNumber;
const int DisplayFields::kQipuIdFieldNumber;
const int DisplayFields::kDisplayPlayCountFieldNumber;
const int DisplayFields::kPlayCountFieldNumber;
const int DisplayFields::kCommentsCountFieldNumber;
const int DisplayFields::kUpCountFieldNumber;
const int DisplayFields::kDownCountFieldNumber;
const int DisplayFields::kLatestEpisodeFieldNumber;
const int DisplayFields::kPpsP2PUrlFieldNumber;
const int DisplayFields::kPosterUrlFieldNumber;
const int DisplayFields::kPurchaseTypeFieldNumber;
const int DisplayFields::kIdUrlHashcodeFieldNumber;
const int DisplayFields::kSeasonFieldNumber;
const int DisplayFields::kPhaseFieldNumber;
const int DisplayFields::kLatestEpisodeIdFieldNumber;
const int DisplayFields::kIsBossMixerFieldNumber;
#endif  // !_MSC_VER

DisplayFields::DisplayFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisplayFields::InitAsDefaultInstance() {
}

DisplayFields::DisplayFields(const DisplayFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisplayFields::SharedCtor() {
  _cached_size_ = 0;
  album_id_ = GOOGLE_LONGLONG(0);
  tv_id_ = GOOGLE_LONGLONG(0);
  vid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  short_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_episode_num_ = 0;
  global_publish_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prompt_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_member_only_ = 0;
  is_download_allowed_ = 0;
  is_exclusive_ = 0;
  sub_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  episode_order_ = 0;
  format_property_ = 0;
  qipu_id_ = GOOGLE_LONGLONG(0);
  display_play_count_ = GOOGLE_LONGLONG(0);
  play_count_ = GOOGLE_LONGLONG(0);
  comments_count_ = GOOGLE_LONGLONG(0);
  up_count_ = GOOGLE_LONGLONG(0);
  down_count_ = GOOGLE_LONGLONG(0);
  latest_episode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pps_p2p_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poster_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  purchase_type_ = 0;
  id_url_hashcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  season_ = 0;
  phase_ = 0;
  latest_episode_id_ = GOOGLE_LONGLONG(0);
  is_boss_mixer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisplayFields::~DisplayFields() {
  SharedDtor();
}

void DisplayFields::SharedDtor() {
  if (vid_ != &::google::protobuf::internal::kEmptyString) {
    delete vid_;
  }
  if (short_title_ != &::google::protobuf::internal::kEmptyString) {
    delete short_title_;
  }
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    delete source_name_;
  }
  if (page_url_ != &::google::protobuf::internal::kEmptyString) {
    delete page_url_;
  }
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (global_publish_date_ != &::google::protobuf::internal::kEmptyString) {
    delete global_publish_date_;
  }
  if (prompt_description_ != &::google::protobuf::internal::kEmptyString) {
    delete prompt_description_;
  }
  if (sub_title_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_title_;
  }
  if (latest_episode_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_episode_;
  }
  if (pps_p2p_url_ != &::google::protobuf::internal::kEmptyString) {
    delete pps_p2p_url_;
  }
  if (poster_url_ != &::google::protobuf::internal::kEmptyString) {
    delete poster_url_;
  }
  if (id_url_hashcode_ != &::google::protobuf::internal::kEmptyString) {
    delete id_url_hashcode_;
  }
  if (this != default_instance_) {
  }
}

void DisplayFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisplayFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayFields_descriptor_;
}

const DisplayFields& DisplayFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

DisplayFields* DisplayFields::default_instance_ = NULL;

DisplayFields* DisplayFields::New() const {
  return new DisplayFields;
}

void DisplayFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    album_id_ = GOOGLE_LONGLONG(0);
    tv_id_ = GOOGLE_LONGLONG(0);
    if (has_vid()) {
      if (vid_ != &::google::protobuf::internal::kEmptyString) {
        vid_->clear();
      }
    }
    if (has_short_title()) {
      if (short_title_ != &::google::protobuf::internal::kEmptyString) {
        short_title_->clear();
      }
    }
    if (has_source_name()) {
      if (source_name_ != &::google::protobuf::internal::kEmptyString) {
        source_name_->clear();
      }
    }
    if (has_page_url()) {
      if (page_url_ != &::google::protobuf::internal::kEmptyString) {
        page_url_->clear();
      }
    }
    if (has_picture_url()) {
      if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
        picture_url_->clear();
      }
    }
    total_episode_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_global_publish_date()) {
      if (global_publish_date_ != &::google::protobuf::internal::kEmptyString) {
        global_publish_date_->clear();
      }
    }
    if (has_prompt_description()) {
      if (prompt_description_ != &::google::protobuf::internal::kEmptyString) {
        prompt_description_->clear();
      }
    }
    is_member_only_ = 0;
    is_download_allowed_ = 0;
    is_exclusive_ = 0;
    if (has_sub_title()) {
      if (sub_title_ != &::google::protobuf::internal::kEmptyString) {
        sub_title_->clear();
      }
    }
    episode_order_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    format_property_ = 0;
    qipu_id_ = GOOGLE_LONGLONG(0);
    display_play_count_ = GOOGLE_LONGLONG(0);
    play_count_ = GOOGLE_LONGLONG(0);
    comments_count_ = GOOGLE_LONGLONG(0);
    up_count_ = GOOGLE_LONGLONG(0);
    down_count_ = GOOGLE_LONGLONG(0);
    if (has_latest_episode()) {
      if (latest_episode_ != &::google::protobuf::internal::kEmptyString) {
        latest_episode_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_pps_p2p_url()) {
      if (pps_p2p_url_ != &::google::protobuf::internal::kEmptyString) {
        pps_p2p_url_->clear();
      }
    }
    if (has_poster_url()) {
      if (poster_url_ != &::google::protobuf::internal::kEmptyString) {
        poster_url_->clear();
      }
    }
    purchase_type_ = 0;
    if (has_id_url_hashcode()) {
      if (id_url_hashcode_ != &::google::protobuf::internal::kEmptyString) {
        id_url_hashcode_->clear();
      }
    }
    season_ = 0;
    phase_ = 0;
    latest_episode_id_ = GOOGLE_LONGLONG(0);
    is_boss_mixer_ = 0;
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisplayFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 album_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &album_id_)));
          set_has_album_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tv_id;
        break;
      }

      // optional int64 tv_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tv_id_)));
          set_has_tv_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vid;
        break;
      }

      // optional string vid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vid().data(), this->vid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_short_title;
        break;
      }

      // optional string short_title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->short_title().data(), this->short_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_source_name;
        break;
      }

      // optional string source_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_page_url;
        break;
      }

      // optional string page_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_url().data(), this->page_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_picture_url;
        break;
      }

      // optional string picture_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_url().data(), this->picture_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_episode_num;
        break;
      }

      // optional int32 total_episode_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_episode_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_episode_num_)));
          set_has_total_episode_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_global_publish_date;
        break;
      }

      // optional string global_publish_date = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_publish_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_publish_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->global_publish_date().data(), this->global_publish_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_prompt_description;
        break;
      }

      // optional string prompt_description = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prompt_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prompt_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prompt_description().data(), this->prompt_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_member_only;
        break;
      }

      // optional int32 is_member_only = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_member_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_member_only_)));
          set_has_is_member_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_download_allowed;
        break;
      }

      // optional int32 is_download_allowed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_download_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_download_allowed_)));
          set_has_is_download_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_exclusive;
        break;
      }

      // optional int32 is_exclusive = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_exclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_exclusive_)));
          set_has_is_exclusive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sub_title;
        break;
      }

      // optional string sub_title = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub_title().data(), this->sub_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_type;
        break;
      }

      // repeated string type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type(this->type_size() - 1).data(),
            this->type(this->type_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_type;
        if (input->ExpectTag(128)) goto parse_episode_order;
        break;
      }

      // optional int32 episode_order = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_episode_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_order_)));
          set_has_episode_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_format_property;
        break;
      }

      // optional int32 format_property = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_property_)));
          set_has_format_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_qipu_id;
        break;
      }

      // optional int64 qipu_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qipu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qipu_id_)));
          set_has_qipu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_display_play_count;
        break;
      }

      // optional int64 display_play_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_play_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &display_play_count_)));
          set_has_display_play_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_play_count;
        break;
      }

      // optional int64 play_count = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &play_count_)));
          set_has_play_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_comments_count;
        break;
      }

      // optional int64 comments_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comments_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comments_count_)));
          set_has_comments_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_up_count;
        break;
      }

      // optional int64 up_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &up_count_)));
          set_has_up_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_down_count;
        break;
      }

      // optional int64 down_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &down_count_)));
          set_has_down_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_latest_episode;
        break;
      }

      // optional string latest_episode = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_episode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_episode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latest_episode().data(), this->latest_episode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_pps_p2p_url;
        break;
      }

      // optional string pps_p2p_url = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pps_p2p_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pps_p2p_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pps_p2p_url().data(), this->pps_p2p_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_poster_url;
        break;
      }

      // optional string poster_url = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poster_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poster_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poster_url().data(), this->poster_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_purchase_type;
        break;
      }

      // optional int32 purchase_type = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_type_)));
          set_has_purchase_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_id_url_hashcode;
        break;
      }

      // optional string id_url_hashcode = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_url_hashcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_url_hashcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id_url_hashcode().data(), this->id_url_hashcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_season;
        break;
      }

      // optional int32 season = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_phase;
        break;
      }

      // optional int32 phase = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
          set_has_phase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_latest_episode_id;
        break;
      }

      // optional int64 latest_episode_id = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latest_episode_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_episode_id_)));
          set_has_latest_episode_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_is_boss_mixer;
        break;
      }

      // optional int32 is_boss_mixer = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_boss_mixer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_boss_mixer_)));
          set_has_is_boss_mixer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisplayFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 album_id = 1;
  if (has_album_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->album_id(), output);
  }

  // optional int64 tv_id = 2;
  if (has_tv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tv_id(), output);
  }

  // optional string vid = 3;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vid(), output);
  }

  // optional string short_title = 4;
  if (has_short_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_title().data(), this->short_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->short_title(), output);
  }

  // optional string source_name = 5;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->source_name(), output);
  }

  // optional string page_url = 6;
  if (has_page_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_url().data(), this->page_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->page_url(), output);
  }

  // optional string picture_url = 7;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->picture_url(), output);
  }

  // optional int32 total_episode_num = 8;
  if (has_total_episode_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_episode_num(), output);
  }

  // optional string global_publish_date = 9;
  if (has_global_publish_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->global_publish_date().data(), this->global_publish_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->global_publish_date(), output);
  }

  // optional string prompt_description = 10;
  if (has_prompt_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prompt_description().data(), this->prompt_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->prompt_description(), output);
  }

  // optional int32 is_member_only = 11;
  if (has_is_member_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_member_only(), output);
  }

  // optional int32 is_download_allowed = 12;
  if (has_is_download_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_download_allowed(), output);
  }

  // optional int32 is_exclusive = 13;
  if (has_is_exclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->is_exclusive(), output);
  }

  // optional string sub_title = 14;
  if (has_sub_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_title().data(), this->sub_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sub_title(), output);
  }

  // repeated string type = 15;
  for (int i = 0; i < this->type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->type(i).data(), this->type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->type(i), output);
  }

  // optional int32 episode_order = 16;
  if (has_episode_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->episode_order(), output);
  }

  // optional int32 format_property = 17;
  if (has_format_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->format_property(), output);
  }

  // optional int64 qipu_id = 18;
  if (has_qipu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->qipu_id(), output);
  }

  // optional int64 display_play_count = 19;
  if (has_display_play_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->display_play_count(), output);
  }

  // optional int64 play_count = 20;
  if (has_play_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->play_count(), output);
  }

  // optional int64 comments_count = 21;
  if (has_comments_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->comments_count(), output);
  }

  // optional int64 up_count = 22;
  if (has_up_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->up_count(), output);
  }

  // optional int64 down_count = 23;
  if (has_down_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->down_count(), output);
  }

  // optional string latest_episode = 24;
  if (has_latest_episode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_episode().data(), this->latest_episode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->latest_episode(), output);
  }

  // optional string pps_p2p_url = 25;
  if (has_pps_p2p_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps_p2p_url().data(), this->pps_p2p_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->pps_p2p_url(), output);
  }

  // optional string poster_url = 26;
  if (has_poster_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poster_url().data(), this->poster_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->poster_url(), output);
  }

  // optional int32 purchase_type = 27;
  if (has_purchase_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->purchase_type(), output);
  }

  // optional string id_url_hashcode = 28;
  if (has_id_url_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_url_hashcode().data(), this->id_url_hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->id_url_hashcode(), output);
  }

  // optional int32 season = 29;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->season(), output);
  }

  // optional int32 phase = 30;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->phase(), output);
  }

  // optional int64 latest_episode_id = 31;
  if (has_latest_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->latest_episode_id(), output);
  }

  // optional int32 is_boss_mixer = 32;
  if (has_is_boss_mixer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->is_boss_mixer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisplayFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 album_id = 1;
  if (has_album_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->album_id(), target);
  }

  // optional int64 tv_id = 2;
  if (has_tv_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tv_id(), target);
  }

  // optional string vid = 3;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vid().data(), this->vid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vid(), target);
  }

  // optional string short_title = 4;
  if (has_short_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_title().data(), this->short_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->short_title(), target);
  }

  // optional string source_name = 5;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_name(), target);
  }

  // optional string page_url = 6;
  if (has_page_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_url().data(), this->page_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->page_url(), target);
  }

  // optional string picture_url = 7;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->picture_url(), target);
  }

  // optional int32 total_episode_num = 8;
  if (has_total_episode_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_episode_num(), target);
  }

  // optional string global_publish_date = 9;
  if (has_global_publish_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->global_publish_date().data(), this->global_publish_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->global_publish_date(), target);
  }

  // optional string prompt_description = 10;
  if (has_prompt_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prompt_description().data(), this->prompt_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->prompt_description(), target);
  }

  // optional int32 is_member_only = 11;
  if (has_is_member_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_member_only(), target);
  }

  // optional int32 is_download_allowed = 12;
  if (has_is_download_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_download_allowed(), target);
  }

  // optional int32 is_exclusive = 13;
  if (has_is_exclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->is_exclusive(), target);
  }

  // optional string sub_title = 14;
  if (has_sub_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub_title().data(), this->sub_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sub_title(), target);
  }

  // repeated string type = 15;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type(i).data(), this->type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->type(i), target);
  }

  // optional int32 episode_order = 16;
  if (has_episode_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->episode_order(), target);
  }

  // optional int32 format_property = 17;
  if (has_format_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->format_property(), target);
  }

  // optional int64 qipu_id = 18;
  if (has_qipu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->qipu_id(), target);
  }

  // optional int64 display_play_count = 19;
  if (has_display_play_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->display_play_count(), target);
  }

  // optional int64 play_count = 20;
  if (has_play_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->play_count(), target);
  }

  // optional int64 comments_count = 21;
  if (has_comments_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->comments_count(), target);
  }

  // optional int64 up_count = 22;
  if (has_up_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->up_count(), target);
  }

  // optional int64 down_count = 23;
  if (has_down_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->down_count(), target);
  }

  // optional string latest_episode = 24;
  if (has_latest_episode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_episode().data(), this->latest_episode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->latest_episode(), target);
  }

  // optional string pps_p2p_url = 25;
  if (has_pps_p2p_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps_p2p_url().data(), this->pps_p2p_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->pps_p2p_url(), target);
  }

  // optional string poster_url = 26;
  if (has_poster_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poster_url().data(), this->poster_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->poster_url(), target);
  }

  // optional int32 purchase_type = 27;
  if (has_purchase_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->purchase_type(), target);
  }

  // optional string id_url_hashcode = 28;
  if (has_id_url_hashcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_url_hashcode().data(), this->id_url_hashcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->id_url_hashcode(), target);
  }

  // optional int32 season = 29;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->season(), target);
  }

  // optional int32 phase = 30;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->phase(), target);
  }

  // optional int64 latest_episode_id = 31;
  if (has_latest_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->latest_episode_id(), target);
  }

  // optional int32 is_boss_mixer = 32;
  if (has_is_boss_mixer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->is_boss_mixer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisplayFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 album_id = 1;
    if (has_album_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->album_id());
    }

    // optional int64 tv_id = 2;
    if (has_tv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tv_id());
    }

    // optional string vid = 3;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }

    // optional string short_title = 4;
    if (has_short_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_title());
    }

    // optional string source_name = 5;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }

    // optional string page_url = 6;
    if (has_page_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_url());
    }

    // optional string picture_url = 7;
    if (has_picture_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_url());
    }

    // optional int32 total_episode_num = 8;
    if (has_total_episode_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_episode_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string global_publish_date = 9;
    if (has_global_publish_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_publish_date());
    }

    // optional string prompt_description = 10;
    if (has_prompt_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prompt_description());
    }

    // optional int32 is_member_only = 11;
    if (has_is_member_only()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_member_only());
    }

    // optional int32 is_download_allowed = 12;
    if (has_is_download_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_download_allowed());
    }

    // optional int32 is_exclusive = 13;
    if (has_is_exclusive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_exclusive());
    }

    // optional string sub_title = 14;
    if (has_sub_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_title());
    }

    // optional int32 episode_order = 16;
    if (has_episode_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode_order());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 format_property = 17;
    if (has_format_property()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->format_property());
    }

    // optional int64 qipu_id = 18;
    if (has_qipu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qipu_id());
    }

    // optional int64 display_play_count = 19;
    if (has_display_play_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->display_play_count());
    }

    // optional int64 play_count = 20;
    if (has_play_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->play_count());
    }

    // optional int64 comments_count = 21;
    if (has_comments_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comments_count());
    }

    // optional int64 up_count = 22;
    if (has_up_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->up_count());
    }

    // optional int64 down_count = 23;
    if (has_down_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->down_count());
    }

    // optional string latest_episode = 24;
    if (has_latest_episode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_episode());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string pps_p2p_url = 25;
    if (has_pps_p2p_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pps_p2p_url());
    }

    // optional string poster_url = 26;
    if (has_poster_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poster_url());
    }

    // optional int32 purchase_type = 27;
    if (has_purchase_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_type());
    }

    // optional string id_url_hashcode = 28;
    if (has_id_url_hashcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_url_hashcode());
    }

    // optional int32 season = 29;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 phase = 30;
    if (has_phase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phase());
    }

    // optional int64 latest_episode_id = 31;
    if (has_latest_episode_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latest_episode_id());
    }

    // optional int32 is_boss_mixer = 32;
    if (has_is_boss_mixer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_boss_mixer());
    }

  }
  // repeated string type = 15;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisplayFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisplayFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisplayFields::MergeFrom(const DisplayFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_album_id()) {
      set_album_id(from.album_id());
    }
    if (from.has_tv_id()) {
      set_tv_id(from.tv_id());
    }
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_short_title()) {
      set_short_title(from.short_title());
    }
    if (from.has_source_name()) {
      set_source_name(from.source_name());
    }
    if (from.has_page_url()) {
      set_page_url(from.page_url());
    }
    if (from.has_picture_url()) {
      set_picture_url(from.picture_url());
    }
    if (from.has_total_episode_num()) {
      set_total_episode_num(from.total_episode_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_global_publish_date()) {
      set_global_publish_date(from.global_publish_date());
    }
    if (from.has_prompt_description()) {
      set_prompt_description(from.prompt_description());
    }
    if (from.has_is_member_only()) {
      set_is_member_only(from.is_member_only());
    }
    if (from.has_is_download_allowed()) {
      set_is_download_allowed(from.is_download_allowed());
    }
    if (from.has_is_exclusive()) {
      set_is_exclusive(from.is_exclusive());
    }
    if (from.has_sub_title()) {
      set_sub_title(from.sub_title());
    }
    if (from.has_episode_order()) {
      set_episode_order(from.episode_order());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_format_property()) {
      set_format_property(from.format_property());
    }
    if (from.has_qipu_id()) {
      set_qipu_id(from.qipu_id());
    }
    if (from.has_display_play_count()) {
      set_display_play_count(from.display_play_count());
    }
    if (from.has_play_count()) {
      set_play_count(from.play_count());
    }
    if (from.has_comments_count()) {
      set_comments_count(from.comments_count());
    }
    if (from.has_up_count()) {
      set_up_count(from.up_count());
    }
    if (from.has_down_count()) {
      set_down_count(from.down_count());
    }
    if (from.has_latest_episode()) {
      set_latest_episode(from.latest_episode());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pps_p2p_url()) {
      set_pps_p2p_url(from.pps_p2p_url());
    }
    if (from.has_poster_url()) {
      set_poster_url(from.poster_url());
    }
    if (from.has_purchase_type()) {
      set_purchase_type(from.purchase_type());
    }
    if (from.has_id_url_hashcode()) {
      set_id_url_hashcode(from.id_url_hashcode());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_latest_episode_id()) {
      set_latest_episode_id(from.latest_episode_id());
    }
    if (from.has_is_boss_mixer()) {
      set_is_boss_mixer(from.is_boss_mixer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisplayFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayFields::CopyFrom(const DisplayFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayFields::IsInitialized() const {

  return true;
}

void DisplayFields::Swap(DisplayFields* other) {
  if (other != this) {
    std::swap(album_id_, other->album_id_);
    std::swap(tv_id_, other->tv_id_);
    std::swap(vid_, other->vid_);
    std::swap(short_title_, other->short_title_);
    std::swap(source_name_, other->source_name_);
    std::swap(page_url_, other->page_url_);
    std::swap(picture_url_, other->picture_url_);
    std::swap(total_episode_num_, other->total_episode_num_);
    std::swap(global_publish_date_, other->global_publish_date_);
    std::swap(prompt_description_, other->prompt_description_);
    std::swap(is_member_only_, other->is_member_only_);
    std::swap(is_download_allowed_, other->is_download_allowed_);
    std::swap(is_exclusive_, other->is_exclusive_);
    std::swap(sub_title_, other->sub_title_);
    type_.Swap(&other->type_);
    std::swap(episode_order_, other->episode_order_);
    std::swap(format_property_, other->format_property_);
    std::swap(qipu_id_, other->qipu_id_);
    std::swap(display_play_count_, other->display_play_count_);
    std::swap(play_count_, other->play_count_);
    std::swap(comments_count_, other->comments_count_);
    std::swap(up_count_, other->up_count_);
    std::swap(down_count_, other->down_count_);
    std::swap(latest_episode_, other->latest_episode_);
    std::swap(pps_p2p_url_, other->pps_p2p_url_);
    std::swap(poster_url_, other->poster_url_);
    std::swap(purchase_type_, other->purchase_type_);
    std::swap(id_url_hashcode_, other->id_url_hashcode_);
    std::swap(season_, other->season_);
    std::swap(phase_, other->phase_);
    std::swap(latest_episode_id_, other->latest_episode_id_);
    std::swap(is_boss_mixer_, other->is_boss_mixer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisplayFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisplayFields_descriptor_;
  metadata.reflection = DisplayFields_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Video_RatingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_RatingType_descriptor_;
}
bool Video_RatingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Video_RatingType Video::GENERAL;
const Video_RatingType Video::CHILD_PROTECTED;
const Video_RatingType Video::PARENT_GUIDED;
const Video_RatingType Video::MATURE;
const Video_RatingType Video::RatingType_MIN;
const Video_RatingType Video::RatingType_MAX;
const int Video::RatingType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Video_DangerLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_DangerLevel_descriptor_;
}
bool Video_DangerLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Video_DangerLevel Video::SAFE;
const Video_DangerLevel Video::DANGEROUS_HIGH;
const Video_DangerLevel Video::DANGEROUS_MIDDLE;
const Video_DangerLevel Video::DANGEROUS_LOW;
const Video_DangerLevel Video::DangerLevel_MIN;
const Video_DangerLevel Video::DangerLevel_MAX;
const int Video::DangerLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Video_EditorRecommendLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_EditorRecommendLevel_descriptor_;
}
bool Video_EditorRecommendLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Video_EditorRecommendLevel Video::NONE;
const Video_EditorRecommendLevel Video::GENERAL_REC;
const Video_EditorRecommendLevel Video::KEY;
const Video_EditorRecommendLevel Video::STRONG;
const Video_EditorRecommendLevel Video::EditorRecommendLevel_MIN;
const Video_EditorRecommendLevel Video::EditorRecommendLevel_MAX;
const int Video::EditorRecommendLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Video_ContentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_ContentType_descriptor_;
}
bool Video_ContentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Video_ContentType Video::FEATURE_FILM;
const Video_ContentType Video::PREVUE;
const Video_ContentType Video::TRAILER;
const Video_ContentType Video::CLIP;
const Video_ContentType Video::OTHER;
const Video_ContentType Video::ContentType_MIN;
const Video_ContentType Video::ContentType_MAX;
const int Video::ContentType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Video_FeatureFilmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_FeatureFilmType_descriptor_;
}
bool Video_FeatureFilmType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Video_FeatureFilmType Video::MOVIE;
const Video_FeatureFilmType Video::TV;
const Video_FeatureFilmType Video::FeatureFilmType_MIN;
const Video_FeatureFilmType Video::FeatureFilmType_MAX;
const int Video::FeatureFilmType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Video::kIdFieldNumber;
const int Video::kNameFieldNumber;
const int Video::kDescriptionFieldNumber;
const int Video::kPpsIdFieldNumber;
const int Video::kChannelIdFieldNumber;
const int Video::kMultiPublishFieldNumber;
const int Video::kUploaderIdFieldNumber;
const int Video::kFinalTimeFieldNumber;
const int Video::kTimeDurationFieldNumber;
const int Video::kAllowedPlatformFieldNumber;
const int Video::kIsDomesticOnlyFieldNumber;
const int Video::kSignatureFieldNumber;
const int Video::kQualityScoreFieldNumber;
const int Video::kIsValidFieldNumber;
const int Video::kRatingFieldNumber;
const int Video::kDangerLevelFieldNumber;
const int Video::kEditorRecommendLevelFieldNumber;
const int Video::kTagsFieldNumber;
const int Video::kCanonicalKeywordFieldNumber;
const int Video::kKeywordFieldNumber;
const int Video::kContentTypeFieldNumber;
const int Video::kFeatureFilmTypeFieldNumber;
const int Video::kLocationFieldNumber;
const int Video::kCreatorFieldNumber;
const int Video::kMainContributorFieldNumber;
const int Video::kSupportContributorFieldNumber;
const int Video::kParentVideoGroupFieldNumber;
const int Video::kParentAlbumFieldNumber;
const int Video::kParentCollectionFieldNumber;
const int Video::kParentOfficialEpisodeFieldNumber;
const int Video::kChildrenEpisodeFieldNumber;
const int Video::kChildrenPrevueFieldNumber;
const int Video::kChildrenTrailerFieldNumber;
const int Video::kChildrenTitbitFieldNumber;
const int Video::kDisplayFieldsFieldNumber;
const int Video::kDoubanIdFieldNumber;
const int Video::kAllowedPlatform1FieldNumber;
const int Video::kSlidesFieldNumber;
const int Video::kUserTagsFieldNumber;
const int Video::kPoliticalSensitiveWordsFieldNumber;
const int Video::kCustomTagsFieldNumber;
const int Video::kIsAvailableForQiyihomepageFieldNumber;
const int Video::kSiteNameFieldNumber;
const int Video::kIsLatestEpisodeFieldNumber;
const int Video::kIsQiyiProducedFieldNumber;
const int Video::kDetailedTagsFieldNumber;
const int Video::kSongNameFieldNumber;
const int Video::kDoubanScoreFieldNumber;
const int Video::kChildrenClipFieldNumber;
const int Video::kScreenWriterFieldNumber;
const int Video::kIsAvailableForChannelHomepageFieldNumber;
const int Video::kTopicsFieldNumber;
const int Video::kIsOnlineFieldNumber;
const int Video::kPlayPlatformFieldNumber;
const int Video::kPlayLocationFieldNumber;
const int Video::kRcOrderFieldNumber;
const int Video::kOperatingTagsFieldNumber;
const int Video::kPlaySourceIdFieldNumber;
const int Video::kFilmVarietyTypeFieldNumber;
const int Video::kSnsScoreFieldNumber;
const int Video::kPpsWikiScoreFieldNumber;
const int Video::kOriginalIdFieldNumber;
#endif  // !_MSC_VER

Video::Video()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Video::InitAsDefaultInstance() {
  parent_album_ = const_cast< ::json::ParentInfo*>(&::json::ParentInfo::default_instance());
  display_fields_ = const_cast< ::json::DisplayFields*>(&::json::DisplayFields::default_instance());
}

Video::Video(const Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Video::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pps_id_ = GOOGLE_LONGLONG(0);
  channel_id_ = 0;
  uploader_id_ = GOOGLE_LONGLONG(0);
  final_time_ = GOOGLE_LONGLONG(0);
  time_duration_ = 0;
  allowed_platform_ = 0;
  is_domestic_only_ = false;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_score_ = 0;
  is_valid_ = false;
  rating_ = 0;
  danger_level_ = 0;
  editor_recommend_level_ = 0;
  content_type_ = 1;
  feature_film_type_ = 0;
  parent_album_ = NULL;
  display_fields_ = NULL;
  douban_id_ = GOOGLE_LONGLONG(0);
  allowed_platform_1_ = 0;
  is_available_for_qiyihomepage_ = false;
  is_latest_episode_ = false;
  is_qiyi_produced_ = false;
  song_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  douban_score_ = 0;
  is_available_for_channel_homepage_ = false;
  is_online_ = false;
  play_platform_ = GOOGLE_LONGLONG(0);
  rc_order_ = 0;
  play_source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  film_variety_type_ = 1;
  sns_score_ = 0;
  pps_wiki_score_ = 0;
  original_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Video::~Video() {
  SharedDtor();
}

void Video::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (song_name_ != &::google::protobuf::internal::kEmptyString) {
    delete song_name_;
  }
  if (play_source_id_ != &::google::protobuf::internal::kEmptyString) {
    delete play_source_id_;
  }
  if (this != default_instance_) {
    delete parent_album_;
    delete display_fields_;
  }
}

void Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_descriptor_;
}

const Video& Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_2eproto();
  return *default_instance_;
}

Video* Video::default_instance_ = NULL;

Video* Video::New() const {
  return new Video;
}

void Video::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    pps_id_ = GOOGLE_LONGLONG(0);
    channel_id_ = 0;
    uploader_id_ = GOOGLE_LONGLONG(0);
    final_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_duration_ = 0;
    allowed_platform_ = 0;
    is_domestic_only_ = false;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    quality_score_ = 0;
    is_valid_ = false;
    rating_ = 0;
    danger_level_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    editor_recommend_level_ = 0;
    content_type_ = 1;
    feature_film_type_ = 0;
  }
  if (_has_bits_[27 / 32] & (0xffu << (27 % 32))) {
    if (has_parent_album()) {
      if (parent_album_ != NULL) parent_album_->::json::ParentInfo::Clear();
    }
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (has_display_fields()) {
      if (display_fields_ != NULL) display_fields_->::json::DisplayFields::Clear();
    }
    douban_id_ = GOOGLE_LONGLONG(0);
    allowed_platform_1_ = 0;
  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    is_available_for_qiyihomepage_ = false;
    is_latest_episode_ = false;
    is_qiyi_produced_ = false;
    if (has_song_name()) {
      if (song_name_ != &::google::protobuf::internal::kEmptyString) {
        song_name_->clear();
      }
    }
    douban_score_ = 0;
  }
  if (_has_bits_[50 / 32] & (0xffu << (50 % 32))) {
    is_available_for_channel_homepage_ = false;
    is_online_ = false;
    play_platform_ = GOOGLE_LONGLONG(0);
    rc_order_ = 0;
  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    if (has_play_source_id()) {
      if (play_source_id_ != &::google::protobuf::internal::kEmptyString) {
        play_source_id_->clear();
      }
    }
    film_variety_type_ = 1;
    sns_score_ = 0;
    pps_wiki_score_ = 0;
    original_id_ = GOOGLE_LONGLONG(0);
  }
  multi_publish_.Clear();
  tags_.Clear();
  canonical_keyword_.Clear();
  keyword_.Clear();
  location_.Clear();
  creator_.Clear();
  main_contributor_.Clear();
  support_contributor_.Clear();
  parent_video_group_.Clear();
  parent_collection_.Clear();
  parent_official_episode_.Clear();
  children_episode_.Clear();
  children_prevue_.Clear();
  children_trailer_.Clear();
  children_titbit_.Clear();
  slides_.Clear();
  user_tags_.Clear();
  political_sensitive_words_.Clear();
  custom_tags_.Clear();
  site_name_.Clear();
  detailed_tags_.Clear();
  children_clip_.Clear();
  screen_writer_.Clear();
  topics_.Clear();
  play_location_.Clear();
  operating_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pps_id;
        break;
      }

      // optional int64 pps_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pps_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pps_id_)));
          set_has_pps_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional int32 channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_multi_publish;
        break;
      }

      // repeated int64 multi_publish = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multi_publish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_multi_publish())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_multi_publish())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_multi_publish;
        if (input->ExpectTag(56)) goto parse_uploader_id;
        break;
      }

      // optional int64 uploader_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uploader_id_)));
          set_has_uploader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_final_time;
        break;
      }

      // optional int64 final_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &final_time_)));
          set_has_final_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time_duration;
        break;
      }

      // optional int32 time_duration = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_duration_)));
          set_has_time_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_allowed_platform;
        break;
      }

      // optional int32 allowed_platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowed_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_platform_)));
          set_has_allowed_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_domestic_only;
        break;
      }

      // optional bool is_domestic_only = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_domestic_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_domestic_only_)));
          set_has_is_domestic_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_signature;
        break;
      }

      // optional string signature = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_quality_score;
        break;
      }

      // optional float quality_score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_quality_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quality_score_)));
          set_has_quality_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_valid;
        break;
      }

      // optional bool is_valid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
          set_has_is_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rating;
        break;
      }

      // optional .json.Video.RatingType rating = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::json::Video_RatingType_IsValid(value)) {
            set_rating(static_cast< ::json::Video_RatingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_danger_level;
        break;
      }

      // optional .json.Video.DangerLevel danger_level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_danger_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::json::Video_DangerLevel_IsValid(value)) {
            set_danger_level(static_cast< ::json::Video_DangerLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_editor_recommend_level;
        break;
      }

      // optional .json.Video.EditorRecommendLevel editor_recommend_level = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_editor_recommend_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::json::Video_EditorRecommendLevel_IsValid(value)) {
            set_editor_recommend_level(static_cast< ::json::Video_EditorRecommendLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tags;
        break;
      }

      // repeated string tags = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tags;
        if (input->ExpectTag(154)) goto parse_canonical_keyword;
        break;
      }

      // repeated string canonical_keyword = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_canonical_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_canonical_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->canonical_keyword(this->canonical_keyword_size() - 1).data(),
            this->canonical_keyword(this->canonical_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_canonical_keyword;
        if (input->ExpectTag(162)) goto parse_keyword;
        break;
      }

      // repeated string keyword = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyword(this->keyword_size() - 1).data(),
            this->keyword(this->keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_keyword;
        if (input->ExpectTag(168)) goto parse_content_type;
        break;
      }

      // optional .json.Video.ContentType content_type = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::json::Video_ContentType_IsValid(value)) {
            set_content_type(static_cast< ::json::Video_ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_feature_film_type;
        break;
      }

      // optional .json.Video.FeatureFilmType feature_film_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_film_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::json::Video_FeatureFilmType_IsValid(value)) {
            set_feature_film_type(static_cast< ::json::Video_FeatureFilmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_location;
        break;
      }

      // repeated string location = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location(this->location_size() - 1).data(),
            this->location(this->location_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_location;
        if (input->ExpectTag(194)) goto parse_creator;
        break;
      }

      // repeated .json.People creator = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_creator;
        if (input->ExpectTag(202)) goto parse_main_contributor;
        break;
      }

      // repeated .json.People main_contributor = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_contributor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_main_contributor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_main_contributor;
        if (input->ExpectTag(210)) goto parse_support_contributor;
        break;
      }

      // repeated .json.People support_contributor = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_support_contributor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_support_contributor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_support_contributor;
        if (input->ExpectTag(218)) goto parse_parent_video_group;
        break;
      }

      // repeated .json.ParentInfo parent_video_group = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_video_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parent_video_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_parent_video_group;
        if (input->ExpectTag(226)) goto parse_parent_album;
        break;
      }

      // optional .json.ParentInfo parent_album = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_parent_collection;
        break;
      }

      // repeated .json.ParentInfo parent_collection = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parent_collection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_parent_collection;
        if (input->ExpectTag(242)) goto parse_parent_official_episode;
        break;
      }

      // repeated .json.ParentInfo parent_official_episode = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_official_episode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parent_official_episode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_parent_official_episode;
        if (input->ExpectTag(250)) goto parse_children_episode;
        break;
      }

      // repeated .json.ChildInfo children_episode = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_episode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children_episode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_children_episode;
        if (input->ExpectTag(258)) goto parse_children_prevue;
        break;
      }

      // repeated .json.ChildInfo children_prevue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_prevue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children_prevue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_children_prevue;
        if (input->ExpectTag(266)) goto parse_children_trailer;
        break;
      }

      // repeated .json.ChildInfo children_trailer = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_children_trailer;
        if (input->ExpectTag(274)) goto parse_children_titbit;
        break;
      }

      // repeated .json.ChildInfo children_titbit = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_titbit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children_titbit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_children_titbit;
        if (input->ExpectTag(282)) goto parse_display_fields;
        break;
      }

      // optional .json.DisplayFields display_fields = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_douban_id;
        break;
      }

      // optional int64 douban_id = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_douban_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &douban_id_)));
          set_has_douban_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_allowed_platform_1;
        break;
      }

      // optional int32 allowed_platform_1 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowed_platform_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_platform_1_)));
          set_has_allowed_platform_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_slides;
        break;
      }

      // repeated .json.Slide slides = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_slides;
        if (input->ExpectTag(314)) goto parse_user_tags;
        break;
      }

      // repeated string user_tags = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_tags(this->user_tags_size() - 1).data(),
            this->user_tags(this->user_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_user_tags;
        if (input->ExpectTag(322)) goto parse_political_sensitive_words;
        break;
      }

      // repeated string political_sensitive_words = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_political_sensitive_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_political_sensitive_words()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->political_sensitive_words(this->political_sensitive_words_size() - 1).data(),
            this->political_sensitive_words(this->political_sensitive_words_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_political_sensitive_words;
        if (input->ExpectTag(330)) goto parse_custom_tags;
        break;
      }

      // repeated string custom_tags = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_custom_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_tags(this->custom_tags_size() - 1).data(),
            this->custom_tags(this->custom_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_custom_tags;
        if (input->ExpectTag(336)) goto parse_is_available_for_qiyihomepage;
        break;
      }

      // optional bool is_available_for_qiyihomepage = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_available_for_qiyihomepage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_available_for_qiyihomepage_)));
          set_has_is_available_for_qiyihomepage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_site_name;
        break;
      }

      // repeated string site_name = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_site_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->site_name(this->site_name_size() - 1).data(),
            this->site_name(this->site_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_site_name;
        if (input->ExpectTag(352)) goto parse_is_latest_episode;
        break;
      }

      // optional bool is_latest_episode = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_latest_episode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_latest_episode_)));
          set_has_is_latest_episode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_is_qiyi_produced;
        break;
      }

      // optional bool is_qiyi_produced = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_qiyi_produced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_qiyi_produced_)));
          set_has_is_qiyi_produced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_detailed_tags;
        break;
      }

      // repeated .json.DetailedTag detailed_tags = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailed_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailed_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_detailed_tags;
        if (input->ExpectTag(378)) goto parse_song_name;
        break;
      }

      // optional string song_name = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_song_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_song_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->song_name().data(), this->song_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(385)) goto parse_douban_score;
        break;
      }

      // optional double douban_score = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_douban_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &douban_score_)));
          set_has_douban_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_children_clip;
        break;
      }

      // repeated .json.ChildInfo children_clip = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_clip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children_clip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_children_clip;
        if (input->ExpectTag(402)) goto parse_screen_writer;
        break;
      }

      // repeated .json.People screen_writer = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screen_writer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screen_writer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_screen_writer;
        if (input->ExpectTag(408)) goto parse_is_available_for_channel_homepage;
        break;
      }

      // optional bool is_available_for_channel_homepage = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_available_for_channel_homepage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_available_for_channel_homepage_)));
          set_has_is_available_for_channel_homepage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_topics;
        break;
      }

      // repeated .json.Topic topics = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_topics;
        if (input->ExpectTag(424)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_play_platform;
        break;
      }

      // optional int64 play_platform = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &play_platform_)));
          set_has_play_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_play_location;
        break;
      }

      // repeated .json.PlayLocation play_location = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_play_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_play_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_play_location;
        if (input->ExpectTag(448)) goto parse_rc_order;
        break;
      }

      // optional int32 rc_order = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rc_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_order_)));
          set_has_rc_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_operating_tags;
        break;
      }

      // repeated string operating_tags = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operating_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_operating_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operating_tags(this->operating_tags_size() - 1).data(),
            this->operating_tags(this->operating_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_operating_tags;
        if (input->ExpectTag(466)) goto parse_play_source_id;
        break;
      }

      // optional string play_source_id = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_play_source_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_play_source_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->play_source_id().data(), this->play_source_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_film_variety_type;
        break;
      }

      // optional .json.FilmVarietyType film_variety_type = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_film_variety_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::json::FilmVarietyType_IsValid(value)) {
            set_film_variety_type(static_cast< ::json::FilmVarietyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(59, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(481)) goto parse_sns_score;
        break;
      }

      // optional double sns_score = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sns_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sns_score_)));
          set_has_sns_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(489)) goto parse_pps_wiki_score;
        break;
      }

      // optional double pps_wiki_score = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pps_wiki_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pps_wiki_score_)));
          set_has_pps_wiki_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_original_id;
        break;
      }

      // optional int64 original_id = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &original_id_)));
          set_has_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // optional int64 pps_id = 4;
  if (has_pps_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pps_id(), output);
  }

  // optional int32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel_id(), output);
  }

  // repeated int64 multi_publish = 6;
  for (int i = 0; i < this->multi_publish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->multi_publish(i), output);
  }

  // optional int64 uploader_id = 7;
  if (has_uploader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->uploader_id(), output);
  }

  // optional int64 final_time = 8;
  if (has_final_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->final_time(), output);
  }

  // optional int32 time_duration = 9;
  if (has_time_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->time_duration(), output);
  }

  // optional int32 allowed_platform = 10;
  if (has_allowed_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->allowed_platform(), output);
  }

  // optional bool is_domestic_only = 11;
  if (has_is_domestic_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_domestic_only(), output);
  }

  // optional string signature = 12;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->signature(), output);
  }

  // optional float quality_score = 13;
  if (has_quality_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->quality_score(), output);
  }

  // optional bool is_valid = 14;
  if (has_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_valid(), output);
  }

  // optional .json.Video.RatingType rating = 15;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->rating(), output);
  }

  // optional .json.Video.DangerLevel danger_level = 16;
  if (has_danger_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->danger_level(), output);
  }

  // optional .json.Video.EditorRecommendLevel editor_recommend_level = 17;
  if (has_editor_recommend_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->editor_recommend_level(), output);
  }

  // repeated string tags = 18;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->tags(i), output);
  }

  // repeated string canonical_keyword = 19;
  for (int i = 0; i < this->canonical_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->canonical_keyword(i).data(), this->canonical_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->canonical_keyword(i), output);
  }

  // repeated string keyword = 20;
  for (int i = 0; i < this->keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyword(i).data(), this->keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->keyword(i), output);
  }

  // optional .json.Video.ContentType content_type = 21;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->content_type(), output);
  }

  // optional .json.Video.FeatureFilmType feature_film_type = 22;
  if (has_feature_film_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->feature_film_type(), output);
  }

  // repeated string location = 23;
  for (int i = 0; i < this->location_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->location(i).data(), this->location(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->location(i), output);
  }

  // repeated .json.People creator = 24;
  for (int i = 0; i < this->creator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->creator(i), output);
  }

  // repeated .json.People main_contributor = 25;
  for (int i = 0; i < this->main_contributor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->main_contributor(i), output);
  }

  // repeated .json.People support_contributor = 26;
  for (int i = 0; i < this->support_contributor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->support_contributor(i), output);
  }

  // repeated .json.ParentInfo parent_video_group = 27;
  for (int i = 0; i < this->parent_video_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->parent_video_group(i), output);
  }

  // optional .json.ParentInfo parent_album = 28;
  if (has_parent_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->parent_album(), output);
  }

  // repeated .json.ParentInfo parent_collection = 29;
  for (int i = 0; i < this->parent_collection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->parent_collection(i), output);
  }

  // repeated .json.ParentInfo parent_official_episode = 30;
  for (int i = 0; i < this->parent_official_episode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->parent_official_episode(i), output);
  }

  // repeated .json.ChildInfo children_episode = 31;
  for (int i = 0; i < this->children_episode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->children_episode(i), output);
  }

  // repeated .json.ChildInfo children_prevue = 32;
  for (int i = 0; i < this->children_prevue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->children_prevue(i), output);
  }

  // repeated .json.ChildInfo children_trailer = 33;
  for (int i = 0; i < this->children_trailer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->children_trailer(i), output);
  }

  // repeated .json.ChildInfo children_titbit = 34;
  for (int i = 0; i < this->children_titbit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->children_titbit(i), output);
  }

  // optional .json.DisplayFields display_fields = 35;
  if (has_display_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->display_fields(), output);
  }

  // optional int64 douban_id = 36;
  if (has_douban_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->douban_id(), output);
  }

  // optional int32 allowed_platform_1 = 37;
  if (has_allowed_platform_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->allowed_platform_1(), output);
  }

  // repeated .json.Slide slides = 38;
  for (int i = 0; i < this->slides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->slides(i), output);
  }

  // repeated string user_tags = 39;
  for (int i = 0; i < this->user_tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_tags(i).data(), this->user_tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->user_tags(i), output);
  }

  // repeated string political_sensitive_words = 40;
  for (int i = 0; i < this->political_sensitive_words_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->political_sensitive_words(i).data(), this->political_sensitive_words(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->political_sensitive_words(i), output);
  }

  // repeated string custom_tags = 41;
  for (int i = 0; i < this->custom_tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->custom_tags(i).data(), this->custom_tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->custom_tags(i), output);
  }

  // optional bool is_available_for_qiyihomepage = 42;
  if (has_is_available_for_qiyihomepage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->is_available_for_qiyihomepage(), output);
  }

  // repeated string site_name = 43;
  for (int i = 0; i < this->site_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->site_name(i).data(), this->site_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->site_name(i), output);
  }

  // optional bool is_latest_episode = 44;
  if (has_is_latest_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->is_latest_episode(), output);
  }

  // optional bool is_qiyi_produced = 45;
  if (has_is_qiyi_produced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->is_qiyi_produced(), output);
  }

  // repeated .json.DetailedTag detailed_tags = 46;
  for (int i = 0; i < this->detailed_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->detailed_tags(i), output);
  }

  // optional string song_name = 47;
  if (has_song_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_name().data(), this->song_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->song_name(), output);
  }

  // optional double douban_score = 48;
  if (has_douban_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->douban_score(), output);
  }

  // repeated .json.ChildInfo children_clip = 49;
  for (int i = 0; i < this->children_clip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->children_clip(i), output);
  }

  // repeated .json.People screen_writer = 50;
  for (int i = 0; i < this->screen_writer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->screen_writer(i), output);
  }

  // optional bool is_available_for_channel_homepage = 51;
  if (has_is_available_for_channel_homepage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->is_available_for_channel_homepage(), output);
  }

  // repeated .json.Topic topics = 52;
  for (int i = 0; i < this->topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->topics(i), output);
  }

  // optional bool is_online = 53;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->is_online(), output);
  }

  // optional int64 play_platform = 54;
  if (has_play_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->play_platform(), output);
  }

  // repeated .json.PlayLocation play_location = 55;
  for (int i = 0; i < this->play_location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->play_location(i), output);
  }

  // optional int32 rc_order = 56;
  if (has_rc_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->rc_order(), output);
  }

  // repeated string operating_tags = 57;
  for (int i = 0; i < this->operating_tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->operating_tags(i).data(), this->operating_tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      57, this->operating_tags(i), output);
  }

  // optional string play_source_id = 58;
  if (has_play_source_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->play_source_id().data(), this->play_source_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      58, this->play_source_id(), output);
  }

  // optional .json.FilmVarietyType film_variety_type = 59;
  if (has_film_variety_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->film_variety_type(), output);
  }

  // optional double sns_score = 60;
  if (has_sns_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->sns_score(), output);
  }

  // optional double pps_wiki_score = 61;
  if (has_pps_wiki_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->pps_wiki_score(), output);
  }

  // optional int64 original_id = 62;
  if (has_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->original_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional int64 pps_id = 4;
  if (has_pps_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->pps_id(), target);
  }

  // optional int32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel_id(), target);
  }

  // repeated int64 multi_publish = 6;
  for (int i = 0; i < this->multi_publish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->multi_publish(i), target);
  }

  // optional int64 uploader_id = 7;
  if (has_uploader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->uploader_id(), target);
  }

  // optional int64 final_time = 8;
  if (has_final_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->final_time(), target);
  }

  // optional int32 time_duration = 9;
  if (has_time_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->time_duration(), target);
  }

  // optional int32 allowed_platform = 10;
  if (has_allowed_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->allowed_platform(), target);
  }

  // optional bool is_domestic_only = 11;
  if (has_is_domestic_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_domestic_only(), target);
  }

  // optional string signature = 12;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->signature(), target);
  }

  // optional float quality_score = 13;
  if (has_quality_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->quality_score(), target);
  }

  // optional bool is_valid = 14;
  if (has_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_valid(), target);
  }

  // optional .json.Video.RatingType rating = 15;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->rating(), target);
  }

  // optional .json.Video.DangerLevel danger_level = 16;
  if (has_danger_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->danger_level(), target);
  }

  // optional .json.Video.EditorRecommendLevel editor_recommend_level = 17;
  if (has_editor_recommend_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->editor_recommend_level(), target);
  }

  // repeated string tags = 18;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->tags(i), target);
  }

  // repeated string canonical_keyword = 19;
  for (int i = 0; i < this->canonical_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canonical_keyword(i).data(), this->canonical_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->canonical_keyword(i), target);
  }

  // repeated string keyword = 20;
  for (int i = 0; i < this->keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyword(i).data(), this->keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->keyword(i), target);
  }

  // optional .json.Video.ContentType content_type = 21;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->content_type(), target);
  }

  // optional .json.Video.FeatureFilmType feature_film_type = 22;
  if (has_feature_film_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->feature_film_type(), target);
  }

  // repeated string location = 23;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location(i).data(), this->location(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->location(i), target);
  }

  // repeated .json.People creator = 24;
  for (int i = 0; i < this->creator_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->creator(i), target);
  }

  // repeated .json.People main_contributor = 25;
  for (int i = 0; i < this->main_contributor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->main_contributor(i), target);
  }

  // repeated .json.People support_contributor = 26;
  for (int i = 0; i < this->support_contributor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->support_contributor(i), target);
  }

  // repeated .json.ParentInfo parent_video_group = 27;
  for (int i = 0; i < this->parent_video_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->parent_video_group(i), target);
  }

  // optional .json.ParentInfo parent_album = 28;
  if (has_parent_album()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->parent_album(), target);
  }

  // repeated .json.ParentInfo parent_collection = 29;
  for (int i = 0; i < this->parent_collection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->parent_collection(i), target);
  }

  // repeated .json.ParentInfo parent_official_episode = 30;
  for (int i = 0; i < this->parent_official_episode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->parent_official_episode(i), target);
  }

  // repeated .json.ChildInfo children_episode = 31;
  for (int i = 0; i < this->children_episode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->children_episode(i), target);
  }

  // repeated .json.ChildInfo children_prevue = 32;
  for (int i = 0; i < this->children_prevue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->children_prevue(i), target);
  }

  // repeated .json.ChildInfo children_trailer = 33;
  for (int i = 0; i < this->children_trailer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->children_trailer(i), target);
  }

  // repeated .json.ChildInfo children_titbit = 34;
  for (int i = 0; i < this->children_titbit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->children_titbit(i), target);
  }

  // optional .json.DisplayFields display_fields = 35;
  if (has_display_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->display_fields(), target);
  }

  // optional int64 douban_id = 36;
  if (has_douban_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->douban_id(), target);
  }

  // optional int32 allowed_platform_1 = 37;
  if (has_allowed_platform_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->allowed_platform_1(), target);
  }

  // repeated .json.Slide slides = 38;
  for (int i = 0; i < this->slides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->slides(i), target);
  }

  // repeated string user_tags = 39;
  for (int i = 0; i < this->user_tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_tags(i).data(), this->user_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(39, this->user_tags(i), target);
  }

  // repeated string political_sensitive_words = 40;
  for (int i = 0; i < this->political_sensitive_words_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->political_sensitive_words(i).data(), this->political_sensitive_words(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(40, this->political_sensitive_words(i), target);
  }

  // repeated string custom_tags = 41;
  for (int i = 0; i < this->custom_tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_tags(i).data(), this->custom_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(41, this->custom_tags(i), target);
  }

  // optional bool is_available_for_qiyihomepage = 42;
  if (has_is_available_for_qiyihomepage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->is_available_for_qiyihomepage(), target);
  }

  // repeated string site_name = 43;
  for (int i = 0; i < this->site_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->site_name(i).data(), this->site_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(43, this->site_name(i), target);
  }

  // optional bool is_latest_episode = 44;
  if (has_is_latest_episode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->is_latest_episode(), target);
  }

  // optional bool is_qiyi_produced = 45;
  if (has_is_qiyi_produced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->is_qiyi_produced(), target);
  }

  // repeated .json.DetailedTag detailed_tags = 46;
  for (int i = 0; i < this->detailed_tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->detailed_tags(i), target);
  }

  // optional string song_name = 47;
  if (has_song_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->song_name().data(), this->song_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->song_name(), target);
  }

  // optional double douban_score = 48;
  if (has_douban_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->douban_score(), target);
  }

  // repeated .json.ChildInfo children_clip = 49;
  for (int i = 0; i < this->children_clip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->children_clip(i), target);
  }

  // repeated .json.People screen_writer = 50;
  for (int i = 0; i < this->screen_writer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->screen_writer(i), target);
  }

  // optional bool is_available_for_channel_homepage = 51;
  if (has_is_available_for_channel_homepage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->is_available_for_channel_homepage(), target);
  }

  // repeated .json.Topic topics = 52;
  for (int i = 0; i < this->topics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->topics(i), target);
  }

  // optional bool is_online = 53;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->is_online(), target);
  }

  // optional int64 play_platform = 54;
  if (has_play_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->play_platform(), target);
  }

  // repeated .json.PlayLocation play_location = 55;
  for (int i = 0; i < this->play_location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->play_location(i), target);
  }

  // optional int32 rc_order = 56;
  if (has_rc_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->rc_order(), target);
  }

  // repeated string operating_tags = 57;
  for (int i = 0; i < this->operating_tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operating_tags(i).data(), this->operating_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(57, this->operating_tags(i), target);
  }

  // optional string play_source_id = 58;
  if (has_play_source_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->play_source_id().data(), this->play_source_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        58, this->play_source_id(), target);
  }

  // optional .json.FilmVarietyType film_variety_type = 59;
  if (has_film_variety_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->film_variety_type(), target);
  }

  // optional double sns_score = 60;
  if (has_sns_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->sns_score(), target);
  }

  // optional double pps_wiki_score = 61;
  if (has_pps_wiki_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->pps_wiki_score(), target);
  }

  // optional int64 original_id = 62;
  if (has_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->original_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int64 pps_id = 4;
    if (has_pps_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pps_id());
    }

    // optional int32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }

    // optional int64 uploader_id = 7;
    if (has_uploader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uploader_id());
    }

    // optional int64 final_time = 8;
    if (has_final_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->final_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 time_duration = 9;
    if (has_time_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_duration());
    }

    // optional int32 allowed_platform = 10;
    if (has_allowed_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowed_platform());
    }

    // optional bool is_domestic_only = 11;
    if (has_is_domestic_only()) {
      total_size += 1 + 1;
    }

    // optional string signature = 12;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional float quality_score = 13;
    if (has_quality_score()) {
      total_size += 1 + 4;
    }

    // optional bool is_valid = 14;
    if (has_is_valid()) {
      total_size += 1 + 1;
    }

    // optional .json.Video.RatingType rating = 15;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rating());
    }

    // optional .json.Video.DangerLevel danger_level = 16;
    if (has_danger_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->danger_level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .json.Video.EditorRecommendLevel editor_recommend_level = 17;
    if (has_editor_recommend_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->editor_recommend_level());
    }

    // optional .json.Video.ContentType content_type = 21;
    if (has_content_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
    }

    // optional .json.Video.FeatureFilmType feature_film_type = 22;
    if (has_feature_film_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature_film_type());
    }

  }
  if (_has_bits_[27 / 32] & (0xffu << (27 % 32))) {
    // optional .json.ParentInfo parent_album = 28;
    if (has_parent_album()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent_album());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional .json.DisplayFields display_fields = 35;
    if (has_display_fields()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display_fields());
    }

    // optional int64 douban_id = 36;
    if (has_douban_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->douban_id());
    }

    // optional int32 allowed_platform_1 = 37;
    if (has_allowed_platform_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowed_platform_1());
    }

  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    // optional bool is_available_for_qiyihomepage = 42;
    if (has_is_available_for_qiyihomepage()) {
      total_size += 2 + 1;
    }

    // optional bool is_latest_episode = 44;
    if (has_is_latest_episode()) {
      total_size += 2 + 1;
    }

    // optional bool is_qiyi_produced = 45;
    if (has_is_qiyi_produced()) {
      total_size += 2 + 1;
    }

    // optional string song_name = 47;
    if (has_song_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->song_name());
    }

    // optional double douban_score = 48;
    if (has_douban_score()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[50 / 32] & (0xffu << (50 % 32))) {
    // optional bool is_available_for_channel_homepage = 51;
    if (has_is_available_for_channel_homepage()) {
      total_size += 2 + 1;
    }

    // optional bool is_online = 53;
    if (has_is_online()) {
      total_size += 2 + 1;
    }

    // optional int64 play_platform = 54;
    if (has_play_platform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->play_platform());
    }

    // optional int32 rc_order = 56;
    if (has_rc_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rc_order());
    }

  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    // optional string play_source_id = 58;
    if (has_play_source_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->play_source_id());
    }

    // optional .json.FilmVarietyType film_variety_type = 59;
    if (has_film_variety_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->film_variety_type());
    }

    // optional double sns_score = 60;
    if (has_sns_score()) {
      total_size += 2 + 8;
    }

    // optional double pps_wiki_score = 61;
    if (has_pps_wiki_score()) {
      total_size += 2 + 8;
    }

    // optional int64 original_id = 62;
    if (has_original_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->original_id());
    }

  }
  // repeated int64 multi_publish = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->multi_publish_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->multi_publish(i));
    }
    total_size += 1 * this->multi_publish_size() + data_size;
  }

  // repeated string tags = 18;
  total_size += 2 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string canonical_keyword = 19;
  total_size += 2 * this->canonical_keyword_size();
  for (int i = 0; i < this->canonical_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->canonical_keyword(i));
  }

  // repeated string keyword = 20;
  total_size += 2 * this->keyword_size();
  for (int i = 0; i < this->keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyword(i));
  }

  // repeated string location = 23;
  total_size += 2 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->location(i));
  }

  // repeated .json.People creator = 24;
  total_size += 2 * this->creator_size();
  for (int i = 0; i < this->creator_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creator(i));
  }

  // repeated .json.People main_contributor = 25;
  total_size += 2 * this->main_contributor_size();
  for (int i = 0; i < this->main_contributor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_contributor(i));
  }

  // repeated .json.People support_contributor = 26;
  total_size += 2 * this->support_contributor_size();
  for (int i = 0; i < this->support_contributor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->support_contributor(i));
  }

  // repeated .json.ParentInfo parent_video_group = 27;
  total_size += 2 * this->parent_video_group_size();
  for (int i = 0; i < this->parent_video_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parent_video_group(i));
  }

  // repeated .json.ParentInfo parent_collection = 29;
  total_size += 2 * this->parent_collection_size();
  for (int i = 0; i < this->parent_collection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parent_collection(i));
  }

  // repeated .json.ParentInfo parent_official_episode = 30;
  total_size += 2 * this->parent_official_episode_size();
  for (int i = 0; i < this->parent_official_episode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parent_official_episode(i));
  }

  // repeated .json.ChildInfo children_episode = 31;
  total_size += 2 * this->children_episode_size();
  for (int i = 0; i < this->children_episode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children_episode(i));
  }

  // repeated .json.ChildInfo children_prevue = 32;
  total_size += 2 * this->children_prevue_size();
  for (int i = 0; i < this->children_prevue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children_prevue(i));
  }

  // repeated .json.ChildInfo children_trailer = 33;
  total_size += 2 * this->children_trailer_size();
  for (int i = 0; i < this->children_trailer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children_trailer(i));
  }

  // repeated .json.ChildInfo children_titbit = 34;
  total_size += 2 * this->children_titbit_size();
  for (int i = 0; i < this->children_titbit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children_titbit(i));
  }

  // repeated .json.Slide slides = 38;
  total_size += 2 * this->slides_size();
  for (int i = 0; i < this->slides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slides(i));
  }

  // repeated string user_tags = 39;
  total_size += 2 * this->user_tags_size();
  for (int i = 0; i < this->user_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_tags(i));
  }

  // repeated string political_sensitive_words = 40;
  total_size += 2 * this->political_sensitive_words_size();
  for (int i = 0; i < this->political_sensitive_words_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->political_sensitive_words(i));
  }

  // repeated string custom_tags = 41;
  total_size += 2 * this->custom_tags_size();
  for (int i = 0; i < this->custom_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->custom_tags(i));
  }

  // repeated string site_name = 43;
  total_size += 2 * this->site_name_size();
  for (int i = 0; i < this->site_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->site_name(i));
  }

  // repeated .json.DetailedTag detailed_tags = 46;
  total_size += 2 * this->detailed_tags_size();
  for (int i = 0; i < this->detailed_tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailed_tags(i));
  }

  // repeated .json.ChildInfo children_clip = 49;
  total_size += 2 * this->children_clip_size();
  for (int i = 0; i < this->children_clip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children_clip(i));
  }

  // repeated .json.People screen_writer = 50;
  total_size += 2 * this->screen_writer_size();
  for (int i = 0; i < this->screen_writer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screen_writer(i));
  }

  // repeated .json.Topic topics = 52;
  total_size += 2 * this->topics_size();
  for (int i = 0; i < this->topics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topics(i));
  }

  // repeated .json.PlayLocation play_location = 55;
  total_size += 2 * this->play_location_size();
  for (int i = 0; i < this->play_location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->play_location(i));
  }

  // repeated string operating_tags = 57;
  total_size += 2 * this->operating_tags_size();
  for (int i = 0; i < this->operating_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->operating_tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Video::MergeFrom(const Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  multi_publish_.MergeFrom(from.multi_publish_);
  tags_.MergeFrom(from.tags_);
  canonical_keyword_.MergeFrom(from.canonical_keyword_);
  keyword_.MergeFrom(from.keyword_);
  location_.MergeFrom(from.location_);
  creator_.MergeFrom(from.creator_);
  main_contributor_.MergeFrom(from.main_contributor_);
  support_contributor_.MergeFrom(from.support_contributor_);
  parent_video_group_.MergeFrom(from.parent_video_group_);
  parent_collection_.MergeFrom(from.parent_collection_);
  parent_official_episode_.MergeFrom(from.parent_official_episode_);
  children_episode_.MergeFrom(from.children_episode_);
  children_prevue_.MergeFrom(from.children_prevue_);
  children_trailer_.MergeFrom(from.children_trailer_);
  children_titbit_.MergeFrom(from.children_titbit_);
  slides_.MergeFrom(from.slides_);
  user_tags_.MergeFrom(from.user_tags_);
  political_sensitive_words_.MergeFrom(from.political_sensitive_words_);
  custom_tags_.MergeFrom(from.custom_tags_);
  site_name_.MergeFrom(from.site_name_);
  detailed_tags_.MergeFrom(from.detailed_tags_);
  children_clip_.MergeFrom(from.children_clip_);
  screen_writer_.MergeFrom(from.screen_writer_);
  topics_.MergeFrom(from.topics_);
  play_location_.MergeFrom(from.play_location_);
  operating_tags_.MergeFrom(from.operating_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_pps_id()) {
      set_pps_id(from.pps_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_uploader_id()) {
      set_uploader_id(from.uploader_id());
    }
    if (from.has_final_time()) {
      set_final_time(from.final_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_duration()) {
      set_time_duration(from.time_duration());
    }
    if (from.has_allowed_platform()) {
      set_allowed_platform(from.allowed_platform());
    }
    if (from.has_is_domestic_only()) {
      set_is_domestic_only(from.is_domestic_only());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_quality_score()) {
      set_quality_score(from.quality_score());
    }
    if (from.has_is_valid()) {
      set_is_valid(from.is_valid());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_danger_level()) {
      set_danger_level(from.danger_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_editor_recommend_level()) {
      set_editor_recommend_level(from.editor_recommend_level());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_feature_film_type()) {
      set_feature_film_type(from.feature_film_type());
    }
  }
  if (from._has_bits_[27 / 32] & (0xffu << (27 % 32))) {
    if (from.has_parent_album()) {
      mutable_parent_album()->::json::ParentInfo::MergeFrom(from.parent_album());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_display_fields()) {
      mutable_display_fields()->::json::DisplayFields::MergeFrom(from.display_fields());
    }
    if (from.has_douban_id()) {
      set_douban_id(from.douban_id());
    }
    if (from.has_allowed_platform_1()) {
      set_allowed_platform_1(from.allowed_platform_1());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_is_available_for_qiyihomepage()) {
      set_is_available_for_qiyihomepage(from.is_available_for_qiyihomepage());
    }
    if (from.has_is_latest_episode()) {
      set_is_latest_episode(from.is_latest_episode());
    }
    if (from.has_is_qiyi_produced()) {
      set_is_qiyi_produced(from.is_qiyi_produced());
    }
    if (from.has_song_name()) {
      set_song_name(from.song_name());
    }
    if (from.has_douban_score()) {
      set_douban_score(from.douban_score());
    }
  }
  if (from._has_bits_[50 / 32] & (0xffu << (50 % 32))) {
    if (from.has_is_available_for_channel_homepage()) {
      set_is_available_for_channel_homepage(from.is_available_for_channel_homepage());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_play_platform()) {
      set_play_platform(from.play_platform());
    }
    if (from.has_rc_order()) {
      set_rc_order(from.rc_order());
    }
  }
  if (from._has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    if (from.has_play_source_id()) {
      set_play_source_id(from.play_source_id());
    }
    if (from.has_film_variety_type()) {
      set_film_variety_type(from.film_variety_type());
    }
    if (from.has_sns_score()) {
      set_sns_score(from.sns_score());
    }
    if (from.has_pps_wiki_score()) {
      set_pps_wiki_score(from.pps_wiki_score());
    }
    if (from.has_original_id()) {
      set_original_id(from.original_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Video::CopyFrom(const Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {

  return true;
}

void Video::Swap(Video* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(pps_id_, other->pps_id_);
    std::swap(channel_id_, other->channel_id_);
    multi_publish_.Swap(&other->multi_publish_);
    std::swap(uploader_id_, other->uploader_id_);
    std::swap(final_time_, other->final_time_);
    std::swap(time_duration_, other->time_duration_);
    std::swap(allowed_platform_, other->allowed_platform_);
    std::swap(is_domestic_only_, other->is_domestic_only_);
    std::swap(signature_, other->signature_);
    std::swap(quality_score_, other->quality_score_);
    std::swap(is_valid_, other->is_valid_);
    std::swap(rating_, other->rating_);
    std::swap(danger_level_, other->danger_level_);
    std::swap(editor_recommend_level_, other->editor_recommend_level_);
    tags_.Swap(&other->tags_);
    canonical_keyword_.Swap(&other->canonical_keyword_);
    keyword_.Swap(&other->keyword_);
    std::swap(content_type_, other->content_type_);
    std::swap(feature_film_type_, other->feature_film_type_);
    location_.Swap(&other->location_);
    creator_.Swap(&other->creator_);
    main_contributor_.Swap(&other->main_contributor_);
    support_contributor_.Swap(&other->support_contributor_);
    parent_video_group_.Swap(&other->parent_video_group_);
    std::swap(parent_album_, other->parent_album_);
    parent_collection_.Swap(&other->parent_collection_);
    parent_official_episode_.Swap(&other->parent_official_episode_);
    children_episode_.Swap(&other->children_episode_);
    children_prevue_.Swap(&other->children_prevue_);
    children_trailer_.Swap(&other->children_trailer_);
    children_titbit_.Swap(&other->children_titbit_);
    std::swap(display_fields_, other->display_fields_);
    std::swap(douban_id_, other->douban_id_);
    std::swap(allowed_platform_1_, other->allowed_platform_1_);
    slides_.Swap(&other->slides_);
    user_tags_.Swap(&other->user_tags_);
    political_sensitive_words_.Swap(&other->political_sensitive_words_);
    custom_tags_.Swap(&other->custom_tags_);
    std::swap(is_available_for_qiyihomepage_, other->is_available_for_qiyihomepage_);
    site_name_.Swap(&other->site_name_);
    std::swap(is_latest_episode_, other->is_latest_episode_);
    std::swap(is_qiyi_produced_, other->is_qiyi_produced_);
    detailed_tags_.Swap(&other->detailed_tags_);
    std::swap(song_name_, other->song_name_);
    std::swap(douban_score_, other->douban_score_);
    children_clip_.Swap(&other->children_clip_);
    screen_writer_.Swap(&other->screen_writer_);
    std::swap(is_available_for_channel_homepage_, other->is_available_for_channel_homepage_);
    topics_.Swap(&other->topics_);
    std::swap(is_online_, other->is_online_);
    std::swap(play_platform_, other->play_platform_);
    play_location_.Swap(&other->play_location_);
    std::swap(rc_order_, other->rc_order_);
    operating_tags_.Swap(&other->operating_tags_);
    std::swap(play_source_id_, other->play_source_id_);
    std::swap(film_variety_type_, other->film_variety_type_);
    std::swap(sns_score_, other->sns_score_);
    std::swap(pps_wiki_score_, other->pps_wiki_score_);
    std::swap(original_id_, other->original_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Video_descriptor_;
  metadata.reflection = Video_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace json

// @@protoc_insertion_point(global_scope)
